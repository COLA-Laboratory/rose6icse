{
  "repair_end": "2019-08-04 01:07:10.163453", 
  "repair_begin": "2019-08-04 00:58:48.402714", 
  "patches": [
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 905, 
          "faulty": "for (int i=4 * i0; i < 4 * n0 - 11; i+=4) {\n  if ((work[i + 3] <= TOLERANCE_2 * work[i]) && (work[i + 2] <= TOLERANCE_2 * sigma)) {\n    work[i + 2]=-sigma;\n    split=i / 4;\n    diagMax=0;\n    offDiagMin=work[i + 6];\n    previousEMin=work[i + 7];\n  }\n else {\n    diagMax=Math.max(diagMax,work[i + 4]);\n    offDiagMin=Math.min(offDiagMin,work[i + 2]);\n    previousEMin=Math.min(previousEMin,work[i + 3]);\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=4 * (n0 - 2); i >= 0; i-=4) {\n  if (work[i + 2] <= 0) {\n    i0=1 + i / 4;\n    break;\n  }\n  if (diagMin >= 4 * offDiagMax) {\n    diagMin=Math.min(diagMin,work[i + 4]);\n    offDiagMax=Math.max(offDiagMax,work[i + 2]);\n  }\n  diagMax=Math.max(diagMax,work[i] + work[i + 2]);\n  offDiagMin=Math.min(offDiagMin,work[i + 2]);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "if (tType == -6) {\n  g+=0.333 * (1 - g);\n}\n else if (tType == -18) {\n  g=0.25 * 0.333;\n}\n else {\n  g=0.25;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2019-08-04 03:57:56.123154400 -0400\n+++ /tmp/Arja_Defects4J_Math_81/patches_mozh/Patch_27/patched/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2019-08-04 04:07:09.787437282 -0400\n@@ -902,21 +902,6 @@\n                     diagMax    = work[4 * i0];\n                     offDiagMin = work[4 * i0 + 2];\n                     double previousEMin = work[4 * i0 + 3];\n-                    for (int i = 4 * i0; i < 4 * n0 - 11; i += 4) {\n-                        if ((work[i + 3] <= TOLERANCE_2 * work[i]) &&\n-                            (work[i + 2] <= TOLERANCE_2 * sigma)) {\n-                            // insert a split\n-                            work[i + 2]  = -sigma;\n-                            split        = i / 4;\n-                            diagMax      = 0;\n-                            offDiagMin   = work[i + 6];\n-                            previousEMin = work[i + 7];\n-                        } else {\n-                            diagMax      = Math.max(diagMax, work[i + 4]);\n-                            offDiagMin   = Math.min(offDiagMin, work[i + 2]);\n-                            previousEMin = Math.min(previousEMin, work[i + 3]);\n-                        }\n-                    }\n                     work[4 * n0 - 2] = offDiagMin;\n                     work[4 * n0 - 1] = previousEMin;\n                     i0 = split + 1;\n@@ -1539,27 +1524,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }
  ]
}