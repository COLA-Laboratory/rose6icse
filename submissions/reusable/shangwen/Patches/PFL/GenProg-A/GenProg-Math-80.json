{
  "repair_end": "2019-08-04 02:16:09.540666", 
  "repair_begin": "2019-08-04 02:01:48.848537", 
  "patches": [
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1135, 
          "faulty": "int j=4 * n - 1;", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < realEigenvalues.length; ++i) {\n  if ((realEigenvalues[i] == 0) && (imagEigenvalues[i] == 0)) {\n    return false;\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2019-08-04 05:00:46.033080540 -0400\n+++ /tmp/GenProg_Defects4J_Math_80/patches_7gj8/Patch_339/patched/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2019-08-04 05:16:08.553551878 -0400\n@@ -1131,7 +1131,12 @@\n      */\n     private boolean flipIfWarranted(final int n, final int step) {\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n-            // flip array\n+            for (int i = 0; i < realEigenvalues.length; ++i) {\n+\t\t\t\tif ((realEigenvalues[i] == 0) && (imagEigenvalues[i] == 0)) {\n+\t\t\t\t\treturn false;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\t// flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n                 for (int k = 0; k < 4; k += step) {\n\n\n"
    }
  ]
}