{
  "repair_end": "2019-08-09 19:52:50.272399", 
  "repair_begin": "2019-08-09 19:34:00.667731", 
  "patches": [
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckSideEffects.java", 
          "line": 101, 
          "faulty": "if (parent.getType() == Token.COMMA) {\n  Node gramps=parent.getParent();\n  if (gramps.isCall() && parent == gramps.getFirstChild()) {\n    if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && \"eval\".equals(n.getNext().getString())) {\n      return;\n    }\n  }\n  if (n == parent.getLastChild()) {\n    for (    Node an : parent.getAncestors()) {\n      int ancestorType=an.getType();\n      if (ancestorType == Token.COMMA)       continue;\n      if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)       return;\n else       break;\n    }\n  }\n}\n else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n  if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext())) {\n  }\n else {\n    return;\n  }\n}", 
          "type": "Delete", 
          "seed": "this.level=level;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_22/src/com/google/javascript/jscomp/CheckSideEffects.java\t2019-08-09 22:32:45.599511172 -0400\n+++ /tmp/Arja_Defects4J_Closure_22/patches_a94h/Patch_1/patched/com/google/javascript/jscomp/CheckSideEffects.java\t2019-08-09 22:52:50.236175851 -0400\n@@ -95,38 +95,6 @@\n       return;\n     }\n \n-    // Do not try to remove a block or an expr result. We already handle\n-    // these cases when we visit the child, and the peephole passes will\n-    // fix up the tree in more clever ways when these are removed.\n-    if (parent.getType() == Token.COMMA) {\n-      Node gramps = parent.getParent();\n-      if (gramps.isCall() && parent == gramps.getFirstChild()) {\n-        if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && \"eval\".equals(n.getNext().getString())) {\n-      return;\n-        }\n-    }\n-\n-    // This no-op statement was there so that JSDoc information could\n-    // be attached to the name. This check should not complain about it.\n-      if (n == parent.getLastChild()) {\n-        for (Node an : parent.getAncestors()) {\n-          int ancestorType = an.getType();\n-          if (ancestorType == Token.COMMA)\n-            continue;\n-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)\n-            return;\n-          else\n-            break;\n-        }\n-      }\n-    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n-      if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||\n-           n == parent.getFirstChild().getNext().getNext())) {\n-      } else {\n-      return;\n-      }\n-    }\n-\n     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n     if (!isResultUsed &&\n\n\n"
    }
  ]
}