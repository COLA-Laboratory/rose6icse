*
#
jdk\src\java\io\FileInputStream.java 323 339
Closes this file input stream and releases any system resources associated with the stream
If this stream has an associated channel then the channel is closed as well
Throws IOException if an I/O error occurs
#
jdk\src\java\io\FileOutputStream.java 342 359
Closes this file output stream and releases any system resources associated with this stream
If this stream has an associated channel then the channel is closed as well
Throws IOException if an I/O error occurs
#
jdk\src\java\io\RandomAccessFile.java 606 622
Closes this random access file stream and releases any system resources associated with the stream
A closed random access file cannot perform input or output operations and cannot be reopened
If this file has an associated channel then the channel is closed as well
Throws IOException if an I/O error occurs
*
#
jdk\src\java\io\FileInputStream.java 351 356
Returns the FileDescriptor object that represents the connection to the actual file in the file system being used by this FileInputStream
Returns the file descriptor object associated with this stream
Throws IOException if an I/O error occurs
#
jdk\src\java\io\FileOutputStream.java 371 376
Returns the file descriptor associated with this stream
Returns the FileDescriptor object that represents the connection to the file in the file system being used by this FileOutputStream object
Throws IOException if an I/O error occurs
#
jdk\src\java\io\RandomAccessFile.java 254 259
Returns the opaque file descriptor object associated with this stream
Returns the file descriptor object associated with this stream
Throws IOException if an I/O error occurs
*
#
jdk\src\java\io\FilePermission.java 779 784
Returns an enumeration of all the FilePermission objects in the container
Returns an enumeration of all the FilePermission objects
#
jdk\src\javax\security\auth\kerberos\ServicePermission.java 555 560
Returns an enumeration of all the ServicePermission objects in the container
Returns an enumeration of all the ServicePermission objects
#
jdk\src\javax\security\auth\kerberos\DelegationPermission.java 329 334
Returns an enumeration of all the DelegationPermission objects in the container
Returns an enumeration of all the DelegationPermission objects
*
#
jdk\src\java\io\LineNumberReader.java 229 245
Skip characters
Returns The number of characters actually skipped
Throws IOException If an I/O error occurs
Throws IllegalArgumentException If n is negative
#
jdk\src\java\io\Reader.java 176 192
Skips characters
Returns The number of characters actually skipped
Throws IllegalArgumentException If n is negative
Throws IOException If an I/O error occurs
*
#
jdk\src\java\io\ObjectInputStream.java 1456 1476
Verifies that this (possibly subclass) instance can be constructed without violating security constraints: the subclass must not override security-sensitive non-final methods, or else the "enableSubclassImplementation" SerializablePermission is checked
#
jdk\src\java\io\ObjectOutputStream.java 1040 1060
Verifies that this (possibly subclass) instance can be constructed without violating security constraints: the subclass must not override security-sensitive non-final methods, or else the "enableSubclassImplementation" SerializablePermission is checked
*
#
jdk\src\java\io\ObjectStreamClass.java 1675 1707
Returns JVM type signature for given class
#
jdk\src\java\io\ObjectStreamField.java 293 325
Returns JVM type signature for given class
*
#
jdk\src\java\io\ObjectStreamClass.java 2478 2486
Removes from the specified map any keys that have been enqueued on the specified reference queue
#
jdk\src\java\lang\Thread.java 1966 1974
Removes from the specified map any keys that have been enqueued on the specified reference queue
*
#
jdk\src\java\io\PipedInputStream.java 303 341
Reads the next byte of data from this piped input stream
Returns the next byte of data, or -1 if the end of the stream is reached
Throws IOException if the pipe is connect unconnected , <a href="#BROKEN"> broken , closed, or if an I/O error occurs
#
jdk\src\java\io\PipedReader.java 233 270
Reads the next character of data from this piped stream
If no character is available because the end of the stream has been reached, the value -1 is returned
Returns the next character of data, or -1 if the end of the stream is reached
Throws IOException if the pipe is <a href=PipedInputStream.html#BROKEN> broken , connect unconnected , closed, or an I/O error occurs
*
#
jdk\src\java\io\PrintStream.java 665 670
Prints a string
If the argument is null then the string "null" is printed
Otherwise, the string's characters are converted into bytes according to the platform's default character encoding, and these bytes are written in exactly the manner of the write method
s is The String to be printed
#
jdk\src\java\io\PrintWriter.java 599 604
Prints a string
If the argument is null then the string "null" is printed
Otherwise, the string's characters are converted into bytes according to the platform's default character encoding, and these bytes are written in exactly the manner of the write method
s is The String to be printed
*
#
jdk\src\java\io\RandomAccessFile.java 909 937
Reads the next line of text from this file
This method successively reads bytes from the file, starting at the current file pointer, until it reaches a line terminator or the end of the file
Each byte is converted into a character by taking the byte's value for the lower eight bits of the character and setting the high eight bits of the character to zero
A line of text is terminated by a carriage-return character ( '\u005Cr' ), a newline character ( '\u005Cn' ), a carriage-return character immediately followed by a newline character, or the end of the file
Line-terminating characters are discarded and are not included as part of the string returned
Returns the next line of text from this file, or null if end of file is encountered before even one byte is read
Throws IOException if an I/O error occurs
#
jdk\src\javax\imageio\stream\ImageInputStreamImpl.java 291 319
*
#
jdk\src\java\io\UncheckedIOException.java 82 89
Called to read the object from a stream
Throws InvalidObjectException if the object is invalid or has a cause that is not an IOException
#
jdk\src\java\nio\file\DirectoryIteratorException.java 79 86
Called to read the object from a stream
Throws InvalidObjectException if the object is invalid or has a cause that is not an IOException
*
#
jdk\src\java\lang\Thread.java 1387 1392
Determines if the currently running thread has permission to modify this thread
If there is a security manager, its checkAccess method is called with this thread as its argument
This may result in throwing a SecurityException
Throws SecurityException if the current thread is not allowed to access this thread
#
jdk\src\java\lang\ThreadGroup.java 312 317
Determines if the currently running thread has permission to modify this thread group
If there is a security manager, its checkAccess method is called with this thread group as its argument
This may result in throwing a SecurityException
Throws SecurityException if the current thread is not allowed to access this thread group
*
#
jdk\src\java\net\Authenticator.java 160 188
Ask the authenticator that has been registered with the system for a password
First, if there is a security manager, its checkPermission method is called with a NetPermission("requestPasswordAuthentication") permission
This may result in a java.lang.SecurityException
Returns The username/password, or null if one can't be gotten
Throws SecurityException if a security manager exists and its checkPermission method doesn't allow the password authentication request
#
jdk\src\java\net\Authenticator.java 221 251
Ask the authenticator that has been registered with the system for a password
First, if there is a security manager, its checkPermission method is called with a NetPermission("requestPasswordAuthentication") permission
This may result in a java.lang.SecurityException
Returns The username/password, or null if one can't be gotten
Throws SecurityException if a security manager exists and its checkPermission method doesn't allow the password authentication request
*
#
jdk\src\java\net\DatagramSocket.java 914 926
Retrieve setting for SO_TIMEOUT
Returns the setting for SO_TIMEOUT
Throws SocketException if there is an error in the underlying protocol, such as an UDP error
#
jdk\src\java\net\Socket.java 1155 1165
Returns setting for SO_TIMEOUT SO_TIMEOUT
Returns the setting for SO_TIMEOUT SO_TIMEOUT
Throws SocketException if there is an error in the underlying protocol, such as a TCP error
*
#
jdk\src\java\net\DatagramSocket.java 957 965
Sets the SO_SNDBUF option to the specified value for this DatagramSocket
Throws SocketException if there is an error in the underlying protocol, such as an UDP error
Throws IllegalArgumentException if the value is 0 or is negative
#
jdk\src\java\net\Socket.java 1190 1198
Sets the SO_SNDBUF SO_SNDBUF option to the specified value for this Socket
Throws SocketException if there is an error in the underlying protocol, such as a TCP error
Throws IllegalArgumentException if the value is 0 or is negative
*
#
jdk\src\java\net\DatagramSocket.java 976 985
Get value of the SO_SNDBUF option for this DatagramSocket , that is the buffer size used by the platform for output on this DatagramSocket
Returns the value of the SO_SNDBUF option for this DatagramSocket
Throws SocketException if there is an error in the underlying protocol, such as an UDP error
#
jdk\src\java\net\Socket.java 1213 1222
Get value of the SO_SNDBUF SO_SNDBUF option for this Socket , that is the buffer size used by the platform for output on this Socket
Returns the value of the SO_SNDBUF option for this Socket
Throws SocketException if there is an error in the underlying protocol, such as a TCP error
*
#
jdk\src\java\net\DatagramSocket.java 1015 1023
Sets the SO_RCVBUF option to the specified value for this DatagramSocket
Throws SocketException if there is an error in the underlying protocol, such as an UDP error
Throws IllegalArgumentException if the value is 0 or is negative
#
jdk\src\java\net\Socket.java 1264 1272
Sets the SO_RCVBUF SO_RCVBUF option to the specified value for this Socket
Throws IllegalArgumentException if the value is 0 or is negative
Throws SocketException if there is an error in the underlying protocol, such as a TCP error
*
#
jdk\src\java\net\DatagramSocket.java 1033 1043
Get value of the SO_RCVBUF option for this DatagramSocket , that is the buffer size used by the platform for input on this DatagramSocket
Returns the value of the SO_RCVBUF option for this DatagramSocket
Throws SocketException if there is an error in the underlying protocol, such as an UDP error
#
jdk\src\java\net\Socket.java 1286 1296
Gets the value of the SO_RCVBUF SO_RCVBUF option for this Socket , that is the buffer size used by the platform for input on this Socket
Returns the value of the SO_RCVBUF SO_RCVBUF option for this Socket
Throws SocketException if there is an error in the underlying protocol, such as a TCP error
#
jdk\src\java\net\ServerSocket.java 866 876
Gets the value of the SO_RCVBUF SO_RCVBUF option for this ServerSocket , that is the proposed buffer size that will be used for Sockets accepted from this ServerSocket
Returns the value of the SO_RCVBUF SO_RCVBUF option for this Socket
Throws SocketException if there is an error in the underlying protocol, such as a TCP error
*
#
jdk\src\java\net\DatagramSocket.java 1244 1248
Returns whether the socket is closed or not
Returns true if the socket has been closed
#
jdk\src\java\net\ServerSocket.java 627 631
Returns the closed state of the ServerSocket
Returns true if the socket has been closed
#
jdk\src\java\net\Socket.java 1616 1620
Returns the closed state of the socket
Returns true if the socket has been closed
*
#
jdk\src\java\net\HttpCookie.java 750 756
Create and return a copy of this object
Returns a clone of this HTTP cookie
#
jdk\src\java\text\Format.java 256 263
Creates and returns a copy of this object
Returns a clone of this instance
#
jdk\src\java\text\BreakIterator.java 242 250
Create a copy of this iterator
Returns A copy of this
#
jdk\src\java\security\cert\CollectionCertStoreParameters.java 120 127
Returns a copy of this object
Returns the copy
#
jdk\src\java\security\cert\PKIXCertPathValidatorResult.java 134 141
Returns a copy of this object
Returns the copy
#
jdk\src\java\security\cert\LDAPCertStoreParameters.java 126 133
Returns a copy of this object
Returns the copy
#
jdk\src\java\security\cert\PKIXCertPathChecker.java 188 195
Returns a clone of this object
Calls the Object.clone() method
Returns a copy of this PKIXCertPathChecker
*
#
jdk\src\java\net\ServerSocket.java 434 445
Returns the port number on which this socket is listening
If the socket was bound prior to being close closed , then this method will continue to return the port number after the socket is closed
Returns the port number to which this socket is listening or -1 if the socket is not bound yet
#
jdk\src\java\net\Socket.java 765 774
Returns the local port number to which this socket is bound
If the socket was bound prior to being close closed , then this method will continue to return the local port number after the socket is closed
Returns the local port number to which this socket is bound or -1 if the socket is not bound yet
*
#
jdk\src\java\net\SocksSocketImpl.java 724 730
Sends the Bind request to the SOCKS proxy
Throws IOException if an I/O error occurs when binding this socket
#
jdk\src\java\net\SocksSocketImpl.java 755 761
Sends the Bind request to the SOCKS proxy
Throws IOException if an I/O error occurs when binding this socket
*
#
jdk\src\java\net\URISyntaxException.java 123 133
Returns a string describing the parse error
The resulting string consists of the reason string followed by a colon character ( ':' ), a space, and the input string
If the error index is defined then the string " at index " followed by the index, in decimal, is inserted after the reason string and before the colon character
Returns A string describing the parse error
#
jdk\src\java\nio\file\InvalidPathException.java 119 129
Returns a string describing the error
The resulting string consists of the reason string followed by a colon character ( ':' ), a space, and the input string
If the error index is defined then the string " at index " followed by the index, in decimal, is inserted after the reason string and before the colon character
Returns a string describing the error
*
#
jdk\src\java\nio\ByteBuffer.java 1020 1026
Returns the offset within this buffer's backing array of the first element of the buffer&nbsp;&nbsp; (optional operation)
If this buffer is backed by an array then buffer position p corresponds to array index p &nbsp;+&nbsp; arrayOffset()
Invoke the hasArray hasArray method before invoking this method in order to ensure that this buffer has an accessible backing array
Returns The offset within this buffer's array of the first element of the buffer
Throws ReadOnlyBufferException If this buffer is backed by an array but is read-only
Throws UnsupportedOperationException If this buffer is not backed by an accessible array
#
jdk\src\java\nio\ShortBuffer.java 1020 1026
Returns the offset within this buffer's backing array of the first element of the buffer&nbsp;&nbsp; (optional operation)
If this buffer is backed by an array then buffer position p corresponds to array index p &nbsp;+&nbsp; arrayOffset()
Invoke the hasArray hasArray method before invoking this method in order to ensure that this buffer has an accessible backing array
Returns The offset within this buffer's array of the first element of the buffer
Throws ReadOnlyBufferException If this buffer is backed by an array but is read-only
Throws UnsupportedOperationException If this buffer is not backed by an accessible array
#
jdk\src\java\nio\IntBuffer.java 1020 1026
Returns the offset within this buffer's backing array of the first element of the buffer&nbsp;&nbsp; (optional operation)
If this buffer is backed by an array then buffer position p corresponds to array index p &nbsp;+&nbsp; arrayOffset()
Invoke the hasArray hasArray method before invoking this method in order to ensure that this buffer has an accessible backing array
Returns The offset within this buffer's array of the first element of the buffer
Throws ReadOnlyBufferException If this buffer is backed by an array but is read-only
Throws UnsupportedOperationException If this buffer is not backed by an accessible array
#
jdk\src\java\nio\DoubleBuffer.java 1020 1026
Returns the offset within this buffer's backing array of the first element of the buffer&nbsp;&nbsp; (optional operation)
If this buffer is backed by an array then buffer position p corresponds to array index p &nbsp;+&nbsp; arrayOffset()
Invoke the hasArray hasArray method before invoking this method in order to ensure that this buffer has an accessible backing array
Returns The offset within this buffer's array of the first element of the buffer
Throws ReadOnlyBufferException If this buffer is backed by an array but is read-only
Throws UnsupportedOperationException If this buffer is not backed by an accessible array
#
jdk\src\java\nio\CharBuffer.java 1020 1026
Returns the offset within this buffer's backing array of the first element of the buffer&nbsp;&nbsp; (optional operation)
If this buffer is backed by an array then buffer position p corresponds to array index p &nbsp;+&nbsp; arrayOffset()
Invoke the hasArray hasArray method before invoking this method in order to ensure that this buffer has an accessible backing array
Returns The offset within this buffer's array of the first element of the buffer
Throws ReadOnlyBufferException If this buffer is backed by an array but is read-only
Throws UnsupportedOperationException If this buffer is not backed by an accessible array
#
jdk\src\java\nio\FloatBuffer.java 1020 1026
Returns the offset within this buffer's backing array of the first element of the buffer&nbsp;&nbsp; (optional operation)
If this buffer is backed by an array then buffer position p corresponds to array index p &nbsp;+&nbsp; arrayOffset()
Invoke the hasArray hasArray method before invoking this method in order to ensure that this buffer has an accessible backing array
Returns The offset within this buffer's array of the first element of the buffer
Throws ReadOnlyBufferException If this buffer is backed by an array but is read-only
Throws UnsupportedOperationException If this buffer is not backed by an accessible array
#
jdk\src\java\nio\LongBuffer.java 1020 1026
Returns the offset within this buffer's backing array of the first element of the buffer&nbsp;&nbsp; (optional operation)
If this buffer is backed by an array then buffer position p corresponds to array index p &nbsp;+&nbsp; arrayOffset()
Invoke the hasArray hasArray method before invoking this method in order to ensure that this buffer has an accessible backing array
Returns The offset within this buffer's array of the first element of the buffer
Throws ReadOnlyBufferException If this buffer is backed by an array but is read-only
Throws UnsupportedOperationException If this buffer is not backed by an accessible array
*
#
jdk\src\java\nio\ByteBuffer.java 1084 1095
Returns a string summarizing the state of this buffer
Returns A summary string
#
jdk\src\java\nio\DoubleBuffer.java 1084 1095
Returns a string summarizing the state of this buffer
Returns A summary string
#
jdk\src\java\nio\LongBuffer.java 1084 1095
Returns a string summarizing the state of this buffer
Returns A summary string
#
jdk\src\java\nio\IntBuffer.java 1084 1095
Returns a string summarizing the state of this buffer
Returns A summary string
#
jdk\src\java\nio\ShortBuffer.java 1084 1095
Returns a string summarizing the state of this buffer
Returns A summary string
#
jdk\src\java\nio\FloatBuffer.java 1084 1095
Returns a string summarizing the state of this buffer
Returns A summary string
*
#
jdk\src\java\nio\ByteBuffer.java 1115 1125
Returns the current hash code of this buffer
Returns The current hash code of this buffer
#
jdk\src\java\nio\LongBuffer.java 1115 1125
Returns the current hash code of this buffer
Returns The current hash code of this buffer
#
jdk\src\java\nio\FloatBuffer.java 1115 1125
Returns the current hash code of this buffer
Returns The current hash code of this buffer
#
jdk\src\java\nio\DoubleBuffer.java 1115 1125
Returns the current hash code of this buffer
#
jdk\src\java\nio\CharBuffer.java 1115 1125
Returns the current hash code of this buffer
Returns The current hash code of this buffer
#
jdk\src\java\nio\ShortBuffer.java 1115 1125
Returns the current hash code of this buffer
Returns The current hash code of this buffer
*
#
jdk\src\java\nio\channels\Channels.java 151 156
Constructs a stream that writes bytes to the given channel
The write methods of the resulting stream will throw an IllegalBlockingModeException if invoked while the underlying channel is in non-blocking mode
Returns A new output stream
#
jdk\src\java\nio\channels\Channels.java 282 287
Constructs a stream that writes bytes to the given channel
Returns A new output stream
*
#
jdk\src\java\nio\charset\CharsetDecoder.java 566 625
Decodes as many bytes as possible from the given input buffer, writing the results to the given output buffer
The buffers are read from, and written to, starting at their current positions
At most remaining in.remaining() bytes will be read and at most remaining out.remaining() characters will be written
The buffers' positions will be advanced to reflect the bytes read and the characters written, but their marks and limits will not be modified
In addition to reading bytes from the input buffer and writing characters to the output buffer, this method returns a CoderResult object to describe its reason for termination: UNDERFLOW indicates that as much of the input buffer as possible has been decoded
If there is no further input then the invoker can proceed to the next step of the <a href="#steps">decoding operation
Otherwise this method should be invoked again with further input
OVERFLOW indicates that there is insufficient space in the output buffer to decode any more bytes
This method should be invoked again with an output buffer that has more remaining remaining characters
This is typically done by draining any decoded characters from the output buffer
A malformedForLength malformed-input result indicates that a malformed-input error has been detected
The malformed bytes begin at the input buffer's (possibly incremented) position; the number of malformed bytes may be determined by invoking the result object's length length method
This case applies only if the onMalformedInput malformed action of this decoder is REPORT ; otherwise the malformed input will be ignored or replaced, as requested
An unmappableForLength unmappable-character result indicates that an unmappable-character error has been detected
The bytes that decode the unmappable character begin at the input buffer's (possibly incremented) position; the number of such bytes may be determined by invoking the result object's length length method
This case applies only if the onUnmappableCharacter unmappable action of this decoder is REPORT ; otherwise the unmappable character will be ignored or replaced, as requested
In any case, if this method is to be reinvoked in the same decoding operation then care should be taken to preserve any bytes remaining in the input buffer so that they are available to the next invocation
The endOfInput parameter advises this method as to whether the invoker can provide further input beyond that contained in the given input buffer
If there is a possibility of providing additional input then the invoker should pass false for this parameter; if there is no possibility of providing further input then the invoker should pass true
It is not erroneous, and in fact it is quite common, to pass false in one invocation and later discover that no further input was actually available
It is critical, however, that the final invocation of this method in a sequence of invocations always pass true so that any remaining undecoded input will be treated as being malformed
This method works by invoking the decodeLoop decodeLoop method, interpreting its results, handling error conditions, and reinvoking it as necessary
Returns A coder-result object describing the reason for termination
Throws IllegalStateException If a decoding operation is already in progress and the previous step was an invocation neither of the reset reset method, nor of this method with a value of false for the endOfInput parameter, nor of this method with a value of true for the endOfInput parameter but a return value indicating an incomplete decoding operation
Throws CoderMalfunctionError If an invocation of the decodeLoop method threw an unexpected exception
#
jdk\src\java\nio\charset\CharsetEncoder.java 566 625
Encodes as many characters as possible from the given input buffer, writing the results to the given output buffer
The buffers are read from, and written to, starting at their current positions
At most remaining in.remaining() characters will be read and at most remaining out.remaining() bytes will be written
The buffers' positions will be advanced to reflect the characters read and the bytes written, but their marks and limits will not be modified
In addition to reading characters from the input buffer and writing bytes to the output buffer, this method returns a CoderResult object to describe its reason for termination: UNDERFLOW indicates that as much of the input buffer as possible has been encoded
If there is no further input then the invoker can proceed to the next step of the <a href="#steps">encoding operation
Otherwise this method should be invoked again with further input
OVERFLOW indicates that there is insufficient space in the output buffer to encode any more characters
This method should be invoked again with an output buffer that has more remaining remaining bytes
This is typically done by draining any encoded bytes from the output buffer
A malformedForLength malformed-input result indicates that a malformed-input error has been detected
The malformed characters begin at the input buffer's (possibly incremented) position; the number of malformed characters may be determined by invoking the result object's length length method
This case applies only if the onMalformedInput malformed action of this encoder is REPORT ; otherwise the malformed input will be ignored or replaced, as requested
An unmappableForLength unmappable-character result indicates that an unmappable-character error has been detected
The characters that encode the unmappable character begin at the input buffer's (possibly incremented) position; the number of such characters may be determined by invoking the result object's length length method
This case applies only if the onUnmappableCharacter unmappable action of this encoder is REPORT ; otherwise the unmappable character will be ignored or replaced, as requested
In any case, if this method is to be reinvoked in the same encoding operation then care should be taken to preserve any characters remaining in the input buffer so that they are available to the next invocation
The endOfInput parameter advises this method as to whether the invoker can provide further input beyond that contained in the given input buffer
If there is a possibility of providing additional input then the invoker should pass false for this parameter; if there is no possibility of providing further input then the invoker should pass true
It is not erroneous, and in fact it is quite common, to pass false in one invocation and later discover that no further input was actually available
It is critical, however, that the final invocation of this method in a sequence of invocations always pass true so that any remaining unencoded input will be treated as being malformed
This method works by invoking the encodeLoop encodeLoop method, interpreting its results, handling error conditions, and reinvoking it as necessary
Returns A coder-result object describing the reason for termination
Throws IllegalStateException If an encoding operation is already in progress and the previous step was an invocation neither of the reset reset method, nor of this method with a value of false for the endOfInput parameter, nor of this method with a value of true for the endOfInput parameter but a return value indicating an incomplete encoding operation
Throws CoderMalfunctionError If an invocation of the encodeLoop method threw an unexpected exception
*
#
jdk\src\java\security\AccessController.java 482 496
Performs the specified PrivilegedAction with privileges enabled and restricted by the specified AccessControlContext and with a privilege scope limited by specified Permission arguments
The action is performed with the intersection of the permissions possessed by the caller's protection domain, and those possessed by the domains represented by the specified AccessControlContext
If the action's run method throws an (unchecked) exception, it will propagate through this method
This method preserves the current AccessControlContext's DomainCombiner (which may be null) while the action is performed
If a security manager is installed and the specified AccessControlContext was not created by system code and the caller's ProtectionDomain has not been granted the "createAccessControlContext" java.security.SecurityPermission , then the action is performed with no permissions
Returns the value returned by the action's run method
Throws NullPointerException if action or perms or any element of perms is null
#
jdk\src\java\security\AccessController.java 768 784
Performs the specified PrivilegedExceptionAction with privileges enabled and restricted by the specified AccessControlContext and with a privilege scope limited by specified Permission arguments
The action is performed with the intersection of the permissions possessed by the caller's protection domain, and those possessed by the domains represented by the specified AccessControlContext
If the action's run method throws an (unchecked) exception, it will propagate through this method
This method preserves the current AccessControlContext's DomainCombiner (which may be null) while the action is performed
If a security manager is installed and the specified AccessControlContext was not created by system code and the caller's ProtectionDomain has not been granted the "createAccessControlContext" java.security.SecurityPermission , then the action is performed with no permissions
Returns the value returned by the action's run method
Throws PrivilegedActionException if the specified action's run method threw a checked exception
Throws NullPointerException if action or perms or any element of perms is null
*
#
jdk\src\java\security\MessageDigest.java 513 519
Returns a clone if the implementation is cloneable
Returns a clone if the implementation is cloneable
Throws CloneNotSupportedException if this is called on an implementation that does not support Cloneable
#
jdk\src\java\security\Signature.java 929 935
Returns a clone if the implementation is cloneable
Returns a clone if the implementation is cloneable
Throws CloneNotSupportedException if this is called on an implementation that does not support Cloneable
#
jdk\src\java\security\SignatureSpi.java 383 389
Returns a clone if the implementation is cloneable
Returns a clone if the implementation is cloneable
Throws CloneNotSupportedException if this is called on an implementation that does not support Cloneable
#
jdk\src\java\security\MessageDigestSpi.java 199 205
Returns a clone if the implementation is cloneable
Returns a clone if the implementation is cloneable
Throws CloneNotSupportedException if this is called on an implementation that does not support Cloneable
*
#
jdk\src\java\text\CollationElementIterator.java 499 512
Set a new string over which to iterate
#
jdk\src\java\text\CollationElementIterator.java 520 533
Set a new string over which to iterate
*
#
jdk\src\java\time\LocalDateTime.java 574 580
Checks if the specified field is supported
This checks if this date-time can be queried for the specified field
If false, then calling the range range , get get and with methods will throw an exception
If the field is a ChronoField then the query is implemented here
The supported fields are: NANO_OF_SECOND NANO_OF_DAY MICRO_OF_SECOND MICRO_OF_DAY MILLI_OF_SECOND MILLI_OF_DAY SECOND_OF_MINUTE SECOND_OF_DAY MINUTE_OF_HOUR MINUTE_OF_DAY HOUR_OF_AMPM CLOCK_HOUR_OF_AMPM HOUR_OF_DAY CLOCK_HOUR_OF_DAY AMPM_OF_DAY DAY_OF_WEEK ALIGNED_DAY_OF_WEEK_IN_MONTH ALIGNED_DAY_OF_WEEK_IN_YEAR DAY_OF_MONTH DAY_OF_YEAR EPOCH_DAY ALIGNED_WEEK_OF_MONTH ALIGNED_WEEK_OF_YEAR MONTH_OF_YEAR PROLEPTIC_MONTH YEAR_OF_ERA YEAR ERA All other ChronoField instances will return false
If the field is not a ChronoField , then the result of this method is obtained by invoking TemporalField.isSupportedBy(TemporalAccessor) passing this as the argument
Whether the field is supported is determined by the field
Returns true if the field is supported on this date-time, false if not
#
jdk\src\java\time\chrono\ChronoLocalDateTimeImpl.java 239 245
*
#
jdk\src\java\time\LocalDateTime.java 648 654
Gets the range of valid values for the specified field
The range object expresses the minimum and maximum valid values for a field
This date-time is used to enhance the accuracy of the returned range
If it is not possible to return the range, because the field is not supported or for some other reason, an exception is thrown
If the field is a ChronoField then the query is implemented here
The isSupported supported fields will return appropriate range instances
All other ChronoField instances will throw an UnsupportedTemporalTypeException
If the field is not a ChronoField , then the result of this method is obtained by invoking TemporalField.rangeRefinedBy(TemporalAccessor) passing this as the argument
Returns the range of valid values for the field, not null
Throws DateTimeException if the range for the field cannot be obtained
Throws UnsupportedTemporalTypeException if the field is not supported
#
jdk\src\java\time\chrono\ChronoLocalDateTimeImpl.java 248 254
*
#
jdk\src\java\time\LocalDateTime.java 717 723
Gets the value of the specified field from this date-time as a long
This queries this date-time for the value of the specified field
If it is not possible to return the value, because the field is not supported or for some other reason, an exception is thrown
If the field is a ChronoField then the query is implemented here
The isSupported supported fields will return valid values based on this date-time
All other ChronoField instances will throw an UnsupportedTemporalTypeException
If the field is not a ChronoField , then the result of this method is obtained by invoking TemporalField.getFrom(TemporalAccessor) passing this as the argument
Returns the value for the field
Throws DateTimeException if a value for the field cannot be obtained
Throws UnsupportedTemporalTypeException if the field is not supported
Throws ArithmeticException if numeric overflow occurs
#
jdk\src\java\time\chrono\ChronoLocalDateTimeImpl.java 266 272
*
#
jdk\src\java\time\LocalTime.java 553 558
Checks if the specified unit is supported
This checks if the specified unit can be added to, or subtracted from, this time
If false, then calling the plus and minus minus methods will throw an exception
If the unit is a ChronoUnit then the query is implemented here
The supported units are: NANOS MICROS MILLIS SECONDS MINUTES HOURS HALF_DAYS All other ChronoUnit instances will return false
If the unit is not a ChronoUnit , then the result of this method is obtained by invoking TemporalUnit.isSupportedBy(Temporal) passing this as the argument
Returns true if the unit can be added/subtracted, false if not
#
jdk\src\java\time\OffsetTime.java 431 436
Checks if the specified unit is supported
This checks if the specified unit can be added to, or subtracted from, this offset-time
If false, then calling the plus and minus minus methods will throw an exception
If the unit is a ChronoUnit then the query is implemented here
The supported units are: NANOS MICROS MILLIS SECONDS MINUTES HOURS HALF_DAYS All other ChronoUnit instances will return false
If the unit is not a ChronoUnit , then the result of this method is obtained by invoking TemporalUnit.isSupportedBy(Temporal) passing this as the argument
Returns true if the unit can be added/subtracted, false if not
*
#
jdk\src\java\time\LocalTime.java 1384 1400
Calculates the amount of time until another time in terms of the specified unit
This calculates the amount of time between two LocalTime objects in terms of a single TemporalUnit
The start and end points are this and the specified time
The result will be negative if the end is before the start
The Temporal passed to this method is converted to a LocalTime using from
For example, the amount in hours between two times can be calculated using startTime.until(endTime, HOURS)
The calculation returns a whole number, representing the number of complete units between the two times
The units NANOS , MICROS , MILLIS , SECONDS , MINUTES , HOURS and HALF_DAYS are supported
Other ChronoUnit values will throw an exception
If the unit is not a ChronoUnit , then the result of this method is obtained by invoking TemporalUnit.between(Temporal, Temporal) passing this as the first argument and the converted input temporal as the second argument
Returns the amount of time between this time and the end time
Throws DateTimeException if the amount cannot be calculated, or the end temporal cannot be converted to a LocalTime
Throws UnsupportedTemporalTypeException if the unit is not supported
Throws ArithmeticException if numeric overflow occurs
#
jdk\src\java\time\OffsetTime.java 1177 1193
Calculates the amount of time until another time in terms of the specified unit
This calculates the amount of time between two OffsetTime objects in terms of a single TemporalUnit
The start and end points are this and the specified time
The result will be negative if the end is before the start
For example, the amount in hours between two times can be calculated using startTime.until(endTime, HOURS)
The Temporal passed to this method is converted to a OffsetTime using from
If the offset differs between the two times, then the specified end time is normalized to have the same offset as this time
The calculation returns a whole number, representing the number of complete units between the two times
The units NANOS , MICROS , MILLIS , SECONDS , MINUTES , HOURS and HALF_DAYS are supported
Other ChronoUnit values will throw an exception
If the unit is not a ChronoUnit , then the result of this method is obtained by invoking TemporalUnit.between(Temporal, Temporal) passing this as the first argument and the converted input temporal as the second argument
Returns the amount of time between this time and the end time
Throws DateTimeException if the amount cannot be calculated, or the end temporal cannot be converted to an OffsetTime
Throws UnsupportedTemporalTypeException if the unit is not supported
Throws ArithmeticException if numeric overflow occurs
*
#
jdk\src\java\time\OffsetDateTime.java 557 565
Gets the range of valid values for the specified field
The range object expresses the minimum and maximum valid values for a field
This date-time is used to enhance the accuracy of the returned range
If it is not possible to return the range, because the field is not supported or for some other reason, an exception is thrown
If the field is a ChronoField then the query is implemented here
The isSupported supported fields will return appropriate range instances
All other ChronoField instances will throw an UnsupportedTemporalTypeException
If the field is not a ChronoField , then the result of this method is obtained by invoking TemporalField.rangeRefinedBy(TemporalAccessor) passing this as the argument
Returns the range of valid values for the field, not null
Throws DateTimeException if the range for the field cannot be obtained
Throws UnsupportedTemporalTypeException if the field is not supported
#
jdk\src\java\time\ZonedDateTime.java 773 781
Gets the range of valid values for the specified field
The range object expresses the minimum and maximum valid values for a field
This date-time is used to enhance the accuracy of the returned range
If it is not possible to return the range, because the field is not supported or for some other reason, an exception is thrown
If the field is a ChronoField then the query is implemented here
The isSupported supported fields will return appropriate range instances
All other ChronoField instances will throw an UnsupportedTemporalTypeException
If the field is not a ChronoField , then the result of this method is obtained by invoking TemporalField.rangeRefinedBy(TemporalAccessor) passing this as the argument
Returns the range of valid values for the field, not null
Throws DateTimeException if the range for the field cannot be obtained
Throws UnsupportedTemporalTypeException if the field is not supported
*
#
jdk\src\java\time\OffsetDateTime.java 596 607
Gets the value of the specified field from this date-time as an int
This queries this date-time for the value of the specified field
The returned value will always be within the valid range of values for the field
If it is not possible to return the value, because the field is not supported or for some other reason, an exception is thrown
If the field is a ChronoField then the query is implemented here
The isSupported supported fields will return valid values based on this date-time, except NANO_OF_DAY , MICRO_OF_DAY , EPOCH_DAY , PROLEPTIC_MONTH and INSTANT_SECONDS which are too large to fit in an int and throw a DateTimeException
All other ChronoField instances will throw an UnsupportedTemporalTypeException
If the field is not a ChronoField , then the result of this method is obtained by invoking TemporalField.getFrom(TemporalAccessor) passing this as the argument
Returns the value for the field
Throws DateTimeException if a value for the field cannot be obtained or the value is outside the range of valid values for the field
Throws UnsupportedTemporalTypeException if the field is not supported or the range of values exceeds an int
Throws ArithmeticException if numeric overflow occurs
#
jdk\src\java\time\ZonedDateTime.java 812 823
Gets the value of the specified field from this date-time as an int
This queries this date-time for the value of the specified field
The returned value will always be within the valid range of values for the field
If it is not possible to return the value, because the field is not supported or for some other reason, an exception is thrown
If the field is a ChronoField then the query is implemented here
The isSupported supported fields will return valid values based on this date-time, except NANO_OF_DAY , MICRO_OF_DAY , EPOCH_DAY , PROLEPTIC_MONTH and INSTANT_SECONDS which are too large to fit in an int and throw a DateTimeException
All other ChronoField instances will throw an UnsupportedTemporalTypeException
If the field is not a ChronoField , then the result of this method is obtained by invoking TemporalField.getFrom(TemporalAccessor) passing this as the argument
Returns the value for the field
Throws DateTimeException if a value for the field cannot be obtained or the value is outside the range of valid values for the field
Throws UnsupportedTemporalTypeException if the field is not supported or the range of values exceeds an int
Throws ArithmeticException if numeric overflow occurs
*
#
jdk\src\java\time\OffsetDateTime.java 633 642
Gets the value of the specified field from this date-time as a long
This queries this date-time for the value of the specified field
If it is not possible to return the value, because the field is not supported or for some other reason, an exception is thrown
If the field is a ChronoField then the query is implemented here
The isSupported supported fields will return valid values based on this date-time
All other ChronoField instances will throw an UnsupportedTemporalTypeException
If the field is not a ChronoField , then the result of this method is obtained by invoking TemporalField.getFrom(TemporalAccessor) passing this as the argument
Returns the value for the field
Throws DateTimeException if a value for the field cannot be obtained
Throws UnsupportedTemporalTypeException if the field is not supported
Throws ArithmeticException if numeric overflow occurs
#
jdk\src\java\time\ZonedDateTime.java 849 858
Gets the value of the specified field from this date-time as a long
This queries this date-time for the value of the specified field
If it is not possible to return the value, because the field is not supported or for some other reason, an exception is thrown
If the field is a ChronoField then the query is implemented here
The isSupported supported fields will return valid values based on this date-time
All other ChronoField instances will throw an UnsupportedTemporalTypeException
If the field is not a ChronoField , then the result of this method is obtained by invoking TemporalField.getFrom(TemporalAccessor) passing this as the argument
Returns the value for the field
Throws DateTimeException if a value for the field cannot be obtained
Throws UnsupportedTemporalTypeException if the field is not supported
Throws ArithmeticException if numeric overflow occurs
*
#
jdk\src\java\time\chrono\ChronoLocalDateTime.java 250 255
Checks if the specified unit is supported
This checks if the specified unit can be added to or subtracted from this date-time
If false, then calling the plus and minus minus methods will throw an exception
The set of supported units is defined by the chronology and normally includes all ChronoUnit units except FOREVER
If the unit is not a ChronoUnit , then the result of this method is obtained by invoking TemporalUnit.isSupportedBy(Temporal) passing this as the argument
Returns true if the unit can be added/subtracted, false if not
#
jdk\src\java\time\chrono\ChronoZonedDateTime.java 397 402
Checks if the specified unit is supported
This checks if the specified unit can be added to or subtracted from this date-time
If false, then calling the plus and minus minus methods will throw an exception
The set of supported units is defined by the chronology and normally includes all ChronoUnit units except FOREVER
If the unit is not a ChronoUnit , then the result of this method is obtained by invoking TemporalUnit.isSupportedBy(Temporal) passing this as the argument
Returns true if the unit can be added/subtracted, false if not
*
#
jdk\src\javax\imageio\IIOParam.java 670 675
Activates the installed IIOParamController for this IIOParam object and returns the resulting value
When this method returns true , all values for this IIOParam object will be ready for the next read or write operation
If false is returned, no settings in this object will have been disturbed ( i.e., the user canceled the operation)
Returns true if the controller completed normally
Throws IllegalStateException if there is no controller currently installed
#
jdk\src\javax\imageio\metadata\IIOMetadata.java 894 899
Activates the installed IIOMetadataController for this IIOMetadata object and returns the resulting value
When this method returns true , all values for this IIOMetadata object will be ready for the next write operation
If false is returned, no settings in this object will have been disturbed ( i.e., the user canceled the operation)
The default implementation calls getController and the calls activate on the returned object if hasController returns true
Returns true if the controller completed normally
Throws IllegalStateException if there is no controller currently installed
*
#
jdk\src\javax\imageio\ImageReader.java 479 496
Sets the current Locale of this ImageReader to the given value
A value of null removes any previous setting, and indicates that the reader should localize as it sees fit
Throws IllegalArgumentException if locale is non- null but is not one of the values returned by getAvailableLocales
#
jdk\src\javax\imageio\ImageWriter.java 287 304
Sets the current Locale of this ImageWriter to the given value
A value of null removes any previous setting, and indicates that the writer should localize as it sees fit
The default implementation checks locale against the values returned by getAvailableLocales , and sets the locale instance variable if it is found
If locale is null , the instance variable is set to null without any checking
Throws IllegalArgumentException if locale is non- null but is not one of the values returned by getAvailableLocales
*
#
jdk\src\javax\imageio\ImageReader.java 1853 1866
Removes an IIOReadWarningListener from the list of registered error listeners
If the listener was not previously registered, or if listener is null , no exception will be thrown and no action will be taken
#
jdk\src\javax\imageio\ImageWriter.java 1663 1677
Removes an IIOWriteWarningListener from the list of registered warning listeners
If the listener was not previously registered, or if listener is null , no exception will be thrown and no action will be taken
*
#
jdk\src\javax\imageio\ImageReader.java 2046 2056
Broadcasts the start of an image read to all registered IIOReadProgressListener s by calling their imageStarted method
#
jdk\src\javax\imageio\ImageWriter.java 1752 1762
Broadcasts the start of an image write to all registered IIOWriteProgressListener s by calling their imageStarted method
*
#
jdk\src\javax\imageio\ImageReader.java 2067 2077
Broadcasts the current percentage of image completion to all registered IIOReadProgressListener s by calling their imageProgress method
#
jdk\src\javax\imageio\ImageWriter.java 1773 1783
Broadcasts the current percentage of image completion to all registered IIOWriteProgressListener s by calling their imageProgress method
*
#
jdk\src\javax\imageio\ImageReader.java 2085 2095
Broadcasts the completion of an image read to all registered IIOReadProgressListener s by calling their imageComplete method
#
jdk\src\javax\imageio\ImageWriter.java 1791 1801
Broadcasts the completion of an image write to all registered IIOWriteProgressListener s by calling their imageComplete method
*
#
jdk\src\javax\imageio\ImageReader.java 2107 2118
Broadcasts the start of a thumbnail read to all registered IIOReadProgressListener s by calling their thumbnailStarted method
#
jdk\src\javax\imageio\ImageWriter.java 1813 1824
Broadcasts the start of a thumbnail write to all registered IIOWriteProgressListener s by calling their thumbnailStarted method
*
#
jdk\src\javax\imageio\ImageReader.java 2129 2139
Broadcasts the current percentage of thumbnail completion to all registered IIOReadProgressListener s by calling their thumbnailProgress method
#
jdk\src\javax\imageio\ImageWriter.java 1835 1845
Broadcasts the current percentage of thumbnail completion to all registered IIOWriteProgressListener s by calling their thumbnailProgress method
*
#
jdk\src\javax\imageio\ImageReader.java 2147 2157
Broadcasts the completion of a thumbnail read to all registered IIOReadProgressListener s by calling their thumbnailComplete method
#
jdk\src\javax\imageio\ImageWriter.java 1853 1863
Broadcasts the completion of a thumbnail write to all registered IIOWriteProgressListener s by calling their thumbnailComplete method
*
#
jdk\src\javax\imageio\ImageReader.java 2436 2494
Broadcasts a localized warning message to all registered IIOReadWarningListener s by calling their warningOccurred method with a string taken from a ResourceBundle
Throws IllegalArgumentException if baseName is null
Throws IllegalArgumentException if keyword is null
Throws IllegalArgumentException if no appropriate ResourceBundle may be located
Throws IllegalArgumentException if the named resource is not found in the located ResourceBundle
Throws IllegalArgumentException if the object retrieved from the ResourceBundle is not a String
#
jdk\src\javax\imageio\ImageWriter.java 1940 1999
Broadcasts a localized warning message to all registered IIOWriteWarningListener s by calling their warningOccurred method with a string taken from a ResourceBundle
Throws IllegalArgumentException if baseName is null
Throws IllegalArgumentException if keyword is null
Throws IllegalArgumentException if no appropriate ResourceBundle may be located
Throws IllegalArgumentException if the named resource is not found in the located ResourceBundle
Throws IllegalArgumentException if the object retrieved from the ResourceBundle is not a String
*
#
jdk\src\javax\imageio\stream\FileImageInputStream.java 131 138
Returns the length of the underlying file, or -1 if it is unknown
Returns the file length as a long , or -1
#
jdk\src\javax\imageio\stream\FileImageOutputStream.java 128 135
*
#
jdk\src\javax\imageio\stream\FileImageInputStream.java 140 148
#
jdk\src\javax\imageio\stream\FileImageOutputStream.java 148 156
Sets the current stream position and resets the bit offset to 0
It is legal to seeking past the end of the file; an EOFException will be thrown only if a read is performed
The file length will not be increased until a write is performed
Throws IndexOutOfBoundsException if pos is smaller than the flushed position
Throws IOException if any other I/O error occurs
*
#
jdk\src\javax\management\MBeanAttributeInfo.java 204 211
Returns a shallow clone of this instance
The clone is obtained by simply calling super.clone() , thus calling the default native shallow cloning mechanism implemented by Object.clone()
#
jdk\src\javax\management\MBeanParameterInfo.java 96 103
Returns a shallow clone of this instance
The clone is obtained by simply calling super.clone() , thus calling the default native shallow cloning mechanism implemented by Object.clone()
#
jdk\src\javax\management\MBeanInfo.java 272 279
Returns a shallow clone of this instance
The clone is obtained by simply calling super.clone() , thus calling the default native shallow cloning mechanism implemented by Object.clone()
#
jdk\src\javax\management\MBeanConstructorInfo.java 129 136
Returns a shallow clone of this instance
The clone is obtained by simply calling super.clone() , thus calling the default native shallow cloning mechanism implemented by Object.clone()
#
jdk\src\javax\management\MBeanNotificationInfo.java 136 143
Returns a shallow clone of this instance
The clone is obtained by simply calling super.clone() , thus calling the default native shallow cloning mechanism implemented by Object.clone()
#
jdk\src\javax\management\MBeanOperationInfo.java 186 193
Returns a shallow clone of this instance
The clone is obtained by simply calling super.clone() , thus calling the default native shallow cloning mechanism implemented by Object.clone()
*
#
jdk\src\javax\management\MBeanFeatureInfo.java 186 203
Serializes an MBeanFeatureInfo to an ObjectOutputStream
#
jdk\src\javax\management\MBeanInfo.java 643 658
Serializes an MBeanInfo to an ObjectOutputStream
*
#
jdk\src\javax\management\MBeanFeatureInfo.java 234 264
Deserializes an MBeanFeatureInfo from an ObjectInputStream
#
jdk\src\javax\management\MBeanInfo.java 690 720
Deserializes an MBeanInfo from an ObjectInputStream
*
#
jdk\src\javax\management\modelmbean\ModelMBeanAttributeInfo.java 511 528
Serializes a ModelMBeanAttributeInfo to an ObjectOutputStream
#
jdk\src\javax\management\modelmbean\ModelMBeanConstructorInfo.java 472 489
Serializes a ModelMBeanConstructorInfo to an ObjectOutputStream
#
jdk\src\javax\management\modelmbean\ModelMBeanNotificationInfo.java 404 418
Serializes a ModelMBeanNotificationInfo to an ObjectOutputStream
#
jdk\src\javax\management\modelmbean\ModelMBeanOperationInfo.java 523 540
Serializes a ModelMBeanOperationInfo to an ObjectOutputStream
*
#
jdk\src\javax\management\monitor\CounterMonitor.java 386 392
Returns the derived gauge of the first object in the set of observed MBeans
Returns The derived gauge
#
jdk\src\javax\management\monitor\GaugeMonitor.java 292 298
Returns the derived gauge of the first object in the set of observed MBeans
Returns The derived gauge
*
#
jdk\src\javax\management\monitor\CounterMonitor.java 404 410
Gets the derived gauge timestamp of the first object in the set of observed MBeans
Returns The derived gauge timestamp
#
jdk\src\javax\management\monitor\StringMonitor.java 236 242
Gets the derived gauge timestamp of the first object in the set of observed MBeans
Returns The derived gauge timestamp
#
jdk\src\javax\management\monitor\GaugeMonitor.java 310 316
Gets the derived gauge timestamp of the first object in the set of observed MBeans
Returns The derived gauge timestamp
*
#
jdk\src\javax\management\openmbean\CompositeType.java 161 170
#
jdk\src\javax\management\openmbean\TabularType.java 152 161
Checks that Object[] arg is neither null nor empty (ie length==0) and that it does not contain any null element
*
#
jdk\src\javax\management\openmbean\CompositeType.java 172 178
#
jdk\src\javax\management\openmbean\TabularType.java 166 172
Checks that String[] does not contain any empty (or blank characters only) string
*
#
jdk\src\javax\management\relation\RoleList.java 353 360
Returns true if o is a non-Role object
#
jdk\src\javax\management\relation\RoleUnresolvedList.java 350 357
Returns true if o is a non-RoleUnresolved object
*
#
jdk\src\javax\management\relation\RoleList.java 365 372
Returns true if c contains any non-Role objects
#
jdk\src\javax\management\relation\RoleUnresolvedList.java 362 369
Returns true if c contains any non-RoleUnresolved objects
*
#
jdk\src\javax\print\attribute\Size2DSyntax.java 184 189
Convert a value from micrometers to some other units
The result is returned as a floating-point number
Returns The value of x converted to the desired units
Throws IllegalArgumentException (unchecked exception) Thrown if units < 1
#
jdk\src\javax\print\attribute\standard\MediaPrintableArea.java 329 334
*
#
jdk\src\javax\print\attribute\standard\MediaSize.java 121 131
Construct a new media size attribute from the given floating-point values
Throws IllegalArgumentException (Unchecked exception) Thrown if x < 0 or y < 0 or units < 1 or x > y
#
jdk\src\javax\print\attribute\standard\MediaSize.java 147 157
Construct a new media size attribute from the given integer values
Throws IllegalArgumentException (Unchecked exception) Thrown if x < 0 or y < 0 or units < 1 or x > y
*
#
jdk\src\javax\sound\midi\MidiDevice.java 315 321
Constructs a device info object
#
jdk\src\javax\sound\sampled\Mixer.java 284 290
Constructs a mixer's info object, passing it the given textual information
*
#
jdk\src\javax\sound\midi\MidiFileFormat.java 269 277
Obtain an unmodifiable map of properties
The concept of properties is further explained in the MidiFileFormat class description
Returns a Map&lt;String,Object&gt; object containing all properties
If no properties are recognized, an empty map is returned
#
jdk\src\javax\sound\sampled\AudioFormat.java 399 407
Obtain an unmodifiable map of properties
The concept of properties is further explained in the AudioFileFormat class description
Returns a Map&lt;String,Object&gt; object containing all properties
If no properties are recognized, an empty map is returned
#
jdk\src\javax\sound\sampled\AudioFileFormat.java 247 255
Obtain an unmodifiable map of properties
The concept of properties is further explained in the AudioFileFormat class description
Returns a Map&lt;String,Object&gt; object containing all properties
If no properties are recognized, an empty map is returned
*
#
jdk\src\javax\sound\midi\MidiFileFormat.java 296 301
Obtain the property value specified by the key
The concept of properties is further explained in the MidiFileFormat class description
If the specified property is not defined for a particular file format, this method returns null
Returns the value of the property with the specified key, or null if the property does not exist
#
jdk\src\javax\sound\sampled\AudioFileFormat.java 274 279
Obtain the property value specified by the key
The concept of properties is further explained in the AudioFileFormat class description
If the specified property is not defined for a particular file format, this method returns null
Returns the value of the property with the specified key, or null if the property does not exist
#
jdk\src\javax\sound\sampled\AudioFormat.java 426 431
Obtain the property value specified by the key
The concept of properties is further explained in the AudioFileFormat class description
If the specified property is not defined for a particular file format, this method returns null
Returns the value of the property with the specified key, or null if the property does not exist
*
#
jdk\src\javax\sound\midi\MidiSystem.java 906 928
Obtains the set of MIDI file types for which file writing support is provided by the system
Returns array of unique file types
If no file types are supported, an array of length 0 is returned
#
jdk\src\javax\sound\midi\MidiSystem.java 960 982
Obtains the set of MIDI file types that the system can write from the sequence specified
sequence is the sequence for which MIDI file type support is queried
Returns the set of unique supported file types
If no file types are supported, returns an array of length 0
*
#
jdk\src\javax\sound\sampled\AudioSystem.java 275 301
Obtains information about all source lines of a particular type that are supported by the installed mixers
Returns an array of Line.Info objects describing source lines matching the type requested
If no matching source lines are supported, an array of length 0 is returned
#
jdk\src\javax\sound\sampled\AudioSystem.java 315 341
Obtains information about all target lines of a particular type that are supported by the installed mixers
Returns an array of Line.Info objects describing target lines matching the type requested
If no matching target lines are supported, an array of length 0 is returned
*
#
jdk\src\javax\sound\sampled\AudioSystem.java 1306 1329
Writes a stream of bytes representing an audio file of the specified file type to the output stream provided
Some file types require that the length be written into the file header; such files cannot be written from start to finish unless the length is known in advance
An attempt to write a file of such a type will fail with an IOException if the length in the audio file type is AudioSystem.NOT_SPECIFIED
Returns the number of bytes written to the output stream
Throws IOException if an input/output exception occurs
Throws IllegalArgumentException if the file type is not supported by the system
#
jdk\src\javax\sound\sampled\AudioSystem.java 1346 1369
Writes a stream of bytes representing an audio file of the specified file type to the external file provided
Returns the number of bytes written to the file
Throws IOException if an I/O exception occurs
Throws IllegalArgumentException if the file type is not supported by the system
*
#
jdk\src\javax\sql\rowset\serial\SQLOutputImpl.java 353 371
Writes a stream of ASCII characters to this SQLOutputImpl object
The driver will do any necessary conversion from ASCII to the database CHAR format
Throws SQLException if the SQLOutputImpl object is in use by a SQLData object attempting to write the attribute values of a UDT to the database
#
jdk\src\javax\sql\rowset\serial\SQLOutputImpl.java 383 401
Writes a stream of uninterpreted bytes to this SQLOutputImpl object
Throws SQLException if the SQLOutputImpl object is in use by a SQLData object attempting to write the attribute values of a UDT to the database
*
#
jdk\src\javax\sql\rowset\serial\SerialBlob.java 246 269
Returns the position in this SerialBlob object where the given pattern of bytes begins, starting the search at the specified position
Returns the position in this SerialBlob object where the given pattern begins, starting at the specified position; -1 if the pattern is not found or the given starting position is out of bounds; position numbering for the return value starts at 1
Throws SerialException if an error occurs when serializing the blob; if free had previously been called on this object
Throws SQLException if there is an error accessing the BLOB value from the database
#
jdk\src\javax\sql\rowset\serial\SerialClob.java 308 333
Returns the position in this SerialClob object where the given String object begins, starting the search at the specified position
This method returns -1 if the pattern is not found
Returns the position at which the given String object begins, starting the search at the specified position; -1 if the given String object is not found or the starting position is out of bounds; position numbering for the return value starts at 1
Throws SerialException if the free method had been previously called on this object
Throws SQLException if there is an error accessing the Clob value from the database
*
#
jdk\src\javax\swing\AbstractAction.java 295 300
Adds a PropertyChangeListener to the listener list
#
jdk\src\javax\swing\tree\DefaultTreeSelectionModel.java 825 831
Adds a PropertyChangeListener to the listener list
#
jdk\src\javax\swing\UIDefaults.java 793 798
Adds a PropertyChangeListener to the listener list
#
jdk\src\javax\swing\table\TableColumn.java 749 755
Adds a PropertyChangeListener to the listener list
*
#
jdk\src\javax\swing\AbstractAction.java 312 317
Removes a PropertyChangeListener from the listener list
#
jdk\src\javax\swing\tree\DefaultTreeSelectionModel.java 841 847
Removes a PropertyChangeListener from the listener list
*
#
jdk\src\javax\swing\AbstractAction.java 328 333
Returns an array of all the PropertyChangeListener s added to this AbstractAction with addPropertyChangeListener()
Returns all of the PropertyChangeListener s added or an empty array if no listeners have been added
#
jdk\src\javax\swing\UIDefaults.java 824 829
Returns an array of all the PropertyChangeListener s added to this UIDefaults with addPropertyChangeListener()
Returns all of the PropertyChangeListener s added or an empty array if no listeners have been added
#
jdk\src\javax\swing\table\TableColumn.java 781 786
Returns an array of all the PropertyChangeListener s added to this TableColumn with addPropertyChangeListener()
Returns all of the PropertyChangeListener s added or an empty array if no listeners have been added
*
#
jdk\src\javax\swing\AbstractButton.java 957 966
If both the icon and text properties are set, this property defines the space between them
#
jdk\src\javax\swing\JLabel.java 661 669
If both the icon and text properties are set, this property defines the space between them
*
#
jdk\src\javax\swing\AbstractButton.java 1100 1121
Sets the Action
The new Action replaces any previously set Action but does not affect ActionListeners independently added with addActionListener
If the Action is already a registered ActionListener for the button, it is not re-registered
Setting the Action results in immediately changing all the properties described in <a href="Action.html#buttonActions"> Swing Components Supporting Action
Subsequently, the button's properties are automatically updated as the Action 's properties change
This method uses three other methods to set and help track the Action 's property values
It uses the configurePropertiesFromAction method to immediately change the button's properties
To track changes in the Action 's property values, this method registers the PropertyChangeListener returned by createActionPropertyChangeListener
The default PropertyChangeListener invokes the actionPropertyChanged method when a property in the Action changes
#
jdk\src\javax\swing\JTextField.java 565 586
Sets the Action for the ActionEvent source
The new Action replaces any previously set Action but does not affect ActionListeners independently added with addActionListener
If the Action is already a registered ActionListener for the ActionEvent source, it is not re-registered
Setting the Action results in immediately changing all the properties described in <a href="Action.html#buttonActions"> Swing Components Supporting Action
Subsequently, the textfield's properties are automatically updated as the Action 's properties change
This method uses three other methods to set and help track the Action 's property values
It uses the configurePropertiesFromAction method to immediately change the textfield's properties
To track changes in the Action 's property values, this method registers the PropertyChangeListener returned by createActionPropertyChangeListener
The default PropertyChangeListener invokes the actionPropertyChanged method when a property in the Action changes
#
jdk\src\javax\swing\JComboBox.java 1069 1090
Sets the Action for the ActionEvent source
The new Action replaces any previously set Action but does not affect ActionListeners independently added with addActionListener
If the Action is already a registered ActionListener for the ActionEvent source, it is not re-registered
Setting the Action results in immediately changing all the properties described in <a href="Action.html#buttonActions"> Swing Components Supporting Action
Subsequently, the combobox's properties are automatically updated as the Action 's properties change
This method uses three other methods to set and help track the Action 's property values
It uses the configurePropertiesFromAction method to immediately change the combobox's properties
To track changes in the Action 's property values, this method registers the PropertyChangeListener returned by createActionPropertyChangeListener
The default PropertyChangeListener invokes the actionPropertyChanged method when a property in the Action changes
*
#
jdk\src\javax\swing\AbstractButton.java 1416 1420
Paint the button's border if BorderPainted property is true and the button has a border
#
jdk\src\javax\swing\JMenuBar.java 346 350
Paints the menubar's border if BorderPainted property is true
#
jdk\src\javax\swing\JPopupMenu.java 1099 1103
Paints the popup menu's border if the borderPainted property is true
#
jdk\src\javax\swing\JToolBar.java 342 348
Paints the tool bar's border if the borderPainted property is true
#
jdk\src\javax\swing\JProgressBar.java 581 585
Paints the progress bar's border if the borderPainted property is true
*
#
jdk\src\javax\swing\AbstractButton.java 1628 1646
Provides a hint to the look and feel as to which character in the text should be decorated to represent the mnemonic
A value of -1 indicates either there is no mnemonic, the mnemonic character is not contained in the string, or the developer does not wish the mnemonic to be displayed
The value of this is updated as the properties relating to the mnemonic change (such as the mnemonic itself, the text...)
Throws IllegalArgumentException will be thrown if index is &gt;= length of the text, or &lt; -1
#
jdk\src\javax\swing\JLabel.java 557 575
Provides a hint to the look and feel as to which character in the text should be decorated to represent the mnemonic
A value of -1 indicates either there is no mnemonic, the mnemonic character is not contained in the string, or the developer does not wish the mnemonic to be displayed
The value of this is updated as the properties relating to the mnemonic change (such as the mnemonic itself, the text...)
Throws IllegalArgumentException will be thrown if index is &gt;= length of the text, or &lt; -1
*
#
jdk\src\javax\swing\AbstractButton.java 1906 1919
Notifies all listeners that have registered interest for notification on this event type
#
jdk\src\javax\swing\JProgressBar.java 719 732
Send a ChangeEvent , whose source is this JProgressBar , to all ChangeListener s that have registered interest in ChangeEvent s
This method is called each time a ChangeEvent is received from the model
The event instance is created if necessary, and stored in changeEvent
#
jdk\src\javax\swing\text\StyleContext.java 1356 1369
Notifies all listeners that have registered interest for notification on this event type
The event instance is lazily created using the parameters passed into the fire method
#
jdk\src\javax\swing\text\DefaultCaret.java 792 805
Notifies all listeners that have registered interest for notification on this event type
The event instance is lazily created using the parameters passed into the fire method
#
jdk\src\javax\swing\MenuSelectionManager.java 194 207
Notifies all listeners that have registered interest for notification on this event type
#
jdk\src\javax\swing\DefaultButtonModel.java 339 352
Notifies all listeners that have registered interest for notification on this event type
#
jdk\src\javax\swing\DefaultSingleSelectionModel.java 122 135
Notifies all listeners that have registered interest for notification on this event type
*
#
jdk\src\javax\swing\AbstractButton.java 1937 1943
Removes an ActionListener from the button
If the listener is the currently set Action for the button, then the Action is set to null
#
jdk\src\javax\swing\JComboBox.java 881 887
Removes an ActionListener
*
#
jdk\src\javax\swing\AbstractButton.java 2400 2413
Returns the accessible name of this object
Returns the localized name of the object -- can be null if this object does not have a name
#
jdk\src\javax\swing\JLabel.java 1082 1095
Get the accessible name of this object
Returns the localized name of the object -- can be null if this object does not have a name
*
#
jdk\src\javax\swing\AbstractButton.java 2536 2542
Return a description of the specified action of the object
#
jdk\src\javax\swing\JList.java 3779 3785
*
#
jdk\src\javax\swing\AbstractButton.java 2638 2652
Given a point in local coordinates, return the zero-based index of the character under that Point
If the point is invalid, this method returns -1
Returns the zero-based index of the character under Point p; if Point is invalid returns -1
#
jdk\src\javax\swing\JLabel.java 1171 1185
Given a point in local coordinates, return the zero-based index of the character under that Point
If the point is invalid, this method returns -1
Returns the zero-based index of the character under Point p; if Point is invalid returns -1
*
#
jdk\src\javax\swing\AbstractButton.java 2670 2689
Determine the bounding box of the character at the given index into the string
The bounds are returned in local coordinates
If the index is invalid an empty rectangle is returned
Returns the screen coordinates of the character's the bounding box, if index is invalid returns an empty rectangle
#
jdk\src\javax\swing\JLabel.java 1197 1216
Returns the bounding box of the character at the given index in the string
The bounds are returned in local coordinates
If the index is invalid, null is returned
*
#
jdk\src\javax\swing\AbstractButton.java 2697 2707
Return the number of characters (valid indicies)
Returns the number of characters
#
jdk\src\javax\swing\JLabel.java 1224 1234
Return the number of characters (valid indicies)
Returns the number of characters
*
#
jdk\src\javax\swing\AbstractButton.java 2732 2767
Returns the String at a given index
#
jdk\src\javax\swing\JLabel.java 1259 1294
Returns the String at a given index
*
#
jdk\src\javax\swing\AbstractButton.java 2779 2831
Returns the String after a given index
#
jdk\src\javax\swing\JLabel.java 1306 1358
Returns the String after a given index
*
#
jdk\src\javax\swing\AbstractButton.java 2843 2891
Returns the String before a given index
#
jdk\src\javax\swing\JLabel.java 1370 1418
Returns the String before a given index
*
#
jdk\src\javax\swing\AbstractButton.java 2900 2913
Return the AttributeSet for a given character at a given index
i is the zero-based index into the text
Returns the AttributeSet of the character
#
jdk\src\javax\swing\JLabel.java 1427 1440
Return the AttributeSet for a given character at a given index
i is the zero-based index into the text
Returns the AttributeSet of the character
*
#
jdk\src\javax\swing\AbstractButton.java 2956 2968
#
jdk\src\javax\swing\JLabel.java 1483 1495
*
#
jdk\src\javax\swing\AbstractButton.java 3100 3105
Returns a key binding for this object
Returns a javax.lang.Object which specifies the key binding
Throws IllegalArgumentException if the index is out of bounds
#
jdk\src\javax\swing\JLabel.java 1627 1632
Returns a key binding for this object
Returns a javax.lang.Object which specifies the key binding
Throws IllegalArgumentException if the index is out of bounds
*
#
jdk\src\javax\swing\AbstractSpinnerModel.java 111 122
Run each ChangeListeners stateChanged() method
#
jdk\src\javax\swing\JSpinner.java 451 461
Sends a ChangeEvent , whose source is this JSpinner , to each ChangeListener
When a ChangeListener has been added to the spinner, this method method is called each time a ChangeEvent is received from the model
#
jdk\src\javax\swing\colorchooser\DefaultColorSelectionModel.java 141 152
Runs each ChangeListener 's stateChanged method
#
jdk\src\javax\swing\JViewport.java 1361 1372
Notifies all ChangeListeners when the views size, position, or the viewports extent size has changed
#
jdk\src\javax\swing\JSlider.java 425 435
Send a ChangeEvent , whose source is this JSlider , to all ChangeListener s that have registered interest in ChangeEvent s
This method is called each time a ChangeEvent is received from the model
The event instance is created if necessary, and stored in changeEvent
#
jdk\src\javax\swing\DefaultBoundedRangeModel.java 356 367
Runs each ChangeListener 's stateChanged method
*
#
jdk\src\javax\swing\ActionMap.java 143 147
Removes all the mappings from this ActionMap
#
jdk\src\javax\swing\InputMap.java 146 150
Removes all the mappings from this InputMap
*
#
jdk\src\javax\swing\ActionMap.java 164 169
Returns the number of bindings in this ActionMap
Returns the number of bindings in this ActionMap
#
jdk\src\javax\swing\InputMap.java 167 172
Returns the number of KeyStroke bindings
*
#
jdk\src\javax\swing\Box.java 281 289
Paints this Box
If this Box has a UI this method invokes super's implementation, otherwise if this Box is opaque the Graphics is filled using the background
Throws NullPointerException if g is null
#
jdk\src\javax\swing\Box.java 351 359
Paints this Filler
If this Filler has a UI this method invokes super's implementation, otherwise if this Filler is opaque the Graphics is filled using the background
Throws NullPointerException if g is null
*
#
jdk\src\javax\swing\DefaultButtonModel.java 392 405
Notifies all listeners that have registered interest for notification on this event type
#
jdk\src\javax\swing\Timer.java 305 316
Notifies all listeners that have registered interest for notification on this event type
*
#
jdk\src\javax\swing\DefaultButtonModel.java 445 458
Notifies all listeners that have registered interest for notification on this event type
#
jdk\src\javax\swing\JComboBox.java 1213 1226
Notifies all listeners that have registered interest for notification on this event type
*
#
jdk\src\javax\swing\DefaultListCellRenderer.java 184 195
Overridden for performance reasons
Returns true if the background is completely opaque and differs from the JList's background; false otherwise
#
jdk\src\javax\swing\table\DefaultTableCellRenderer.java 275 287
Overridden for performance reasons
*
#
jdk\src\javax\swing\DefaultListCellRenderer.java 254 263
Overridden for performance reasons
#
jdk\src\javax\swing\tree\DefaultTreeCellRenderer.java 624 633
Overridden for performance reasons
*
#
jdk\src\javax\swing\DefaultListSelectionModel.java 90 100
Throws IllegalArgumentException
#
jdk\src\javax\swing\text\html\OptionListModel.java 73 83
*
#
jdk\src\javax\swing\DefaultListSelectionModel.java 174 187
#
jdk\src\javax\swing\text\html\OptionListModel.java 136 149
#
jdk\src\javax\swing\JList.java 1790 1805
Notifies ListSelectionListener s added directly to the list of selection changes made to the selection model
JList listens for changes made to the selection in the selection model, and forwards notification to listeners added to the list directly, by calling this method
This method constructs a ListSelectionEvent with this list as the source, and the specified arguments, and sends it to the registered ListSelectionListeners
*
#
jdk\src\javax\swing\DefaultListSelectionModel.java 444 460
Changes the selection to be between index0 and index1 inclusive
In SINGLE_SELECTION selection mode, only the second index is used
If this represents a change to the current selection, then each ListSelectionListener is notified of the change
If either index is -1 , this method does nothing and returns without exception
Otherwise, if either index is less than -1 , an IndexOutOfBoundsException is thrown
Throws IndexOutOfBoundsException if either index is less than -1 (and neither index is -1 )
#
jdk\src\javax\swing\text\html\OptionListModel.java 333 349
*
#
jdk\src\javax\swing\JApplet.java 160 168
Called by the constructor methods to create the default rootPane
#
jdk\src\javax\swing\JDialog.java 666 674
Called by the constructor methods to create the default rootPane
#
jdk\src\javax\swing\JWindow.java 275 283
Called by the constructor methods to create the default rootPane
#
jdk\src\javax\swing\JFrame.java 285 293
Called by the constructor methods to create the default rootPane
*
#
jdk\src\javax\swing\JApplet.java 203 208
Sets the transferHandler property, which is a mechanism to support transfer of data into this component
Use null if the component does not support data transfer operations
If the system property suppressSwingDropSupport is false (the default) and the current drop target on this component is either null or not a user-set drop target, this method will change the drop target as follows: If newHandler is null it will clear the drop target
If not null it will install a new DropTarget
#
jdk\src\javax\swing\JDialog.java 807 812
Sets the transferHandler property, which is a mechanism to support transfer of data into this component
Use null if the component does not support data transfer operations
If the system property suppressSwingDropSupport is false (the default) and the current drop target on this component is either null or not a user-set drop target, this method will change the drop target as follows: If newHandler is null it will clear the drop target
If not null it will install a new DropTarget
#
jdk\src\javax\swing\JWindow.java 334 339
Sets the transferHandler property, which is a mechanism to support transfer of data into this component
Use null if the component does not support data transfer operations
If the system property suppressSwingDropSupport is false (the default) and the current drop target on this component is either null or not a user-set drop target, this method will change the drop target as follows: If newHandler is null it will clear the drop target
If not null it will install a new DropTarget
#
jdk\src\javax\swing\JFrame.java 453 458
Sets the transferHandler property, which is a mechanism to support transfer of data into this component
Use null if the component does not support data transfer operations
If the system property suppressSwingDropSupport is false (the default) and the current drop target on this component is either null or not a user-set drop target, this method will change the drop target as follows: If newHandler is null it will clear the drop target
If not null it will install a new DropTarget
*
#
jdk\src\javax\swing\JApplet.java 312 320
Adds the specified child Component
This method is overridden to conditionally forward calls to the contentPane
By default, children are added to the contentPane instead of the frame, refer to javax.swing.RootPaneContainer for details
Throws IllegalArgumentException if index is invalid
Throws IllegalArgumentException if adding the container's parent to itself
Throws IllegalArgumentException if adding a window to a container
#
jdk\src\javax\swing\JInternalFrame.java 498 505
Adds the specified child Component
This method is overridden to conditionally forward calls to the contentPane
By default, children are added to the contentPane instead of the frame, refer to javax.swing.RootPaneContainer for details
Throws IllegalArgumentException if index is invalid
Throws IllegalArgumentException if adding the container's parent to itself
Throws IllegalArgumentException if adding a window to a container
#
jdk\src\javax\swing\JDialog.java 918 926
Adds the specified child Component
This method is overridden to conditionally forward calls to the contentPane
By default, children are added to the contentPane instead of the frame, refer to javax.swing.RootPaneContainer for details
Throws IllegalArgumentException if index is invalid
Throws IllegalArgumentException if adding the container's parent to itself
Throws IllegalArgumentException if adding a window to a container
#
jdk\src\javax\swing\JFrame.java 564 572
Adds the specified child Component
This method is overridden to conditionally forward calls to the contentPane
By default, children are added to the contentPane instead of the frame, refer to javax.swing.RootPaneContainer for details
Throws IllegalArgumentException if index is invalid
Throws IllegalArgumentException if adding the container's parent to itself
Throws IllegalArgumentException if adding a window to a container
#
jdk\src\javax\swing\JWindow.java 404 412
Adds the specified child Component
This method is overridden to conditionally forward calls to the contentPane
By default, children are added to the contentPane instead of the frame, refer to javax.swing.RootPaneContainer for details
Throws IllegalArgumentException if index is invalid
Throws IllegalArgumentException if adding the container's parent to itself
Throws IllegalArgumentException if adding a window to a container
*
#
jdk\src\javax\swing\JApplet.java 334 340
Removes the specified component from the container
If comp is not the rootPane , this will forward the call to the contentPane
This will do nothing if comp is not a child of the JFrame or contentPane
Throws NullPointerException if comp is null
#
jdk\src\javax\swing\JFrame.java 586 592
Removes the specified component from the container
If comp is not the rootPane , this will forward the call to the contentPane
This will do nothing if comp is not a child of the JFrame or contentPane
Throws NullPointerException if comp is null
#
jdk\src\javax\swing\JDialog.java 940 946
Removes the specified component from the container
If comp is not the rootPane , this will forward the call to the contentPane
This will do nothing if comp is not a child of the JDialog or contentPane
Throws NullPointerException if comp is null
#
jdk\src\javax\swing\JWindow.java 426 432
Removes the specified component from the container
If comp is not the rootPane , this will forward the call to the contentPane
This will do nothing if comp is not a child of the JWindow or contentPane
Throws NullPointerException if comp is null
*
#
jdk\src\javax\swing\JApplet.java 354 361
Sets the LayoutManager
Overridden to conditionally forward the call to the contentPane
#
jdk\src\javax\swing\JDialog.java 960 967
Sets the LayoutManager
Overridden to conditionally forward the call to the contentPane
#
jdk\src\javax\swing\JInternalFrame.java 536 543
Ensures that, by default, the layout of this component cannot be set
Overridden to conditionally forward the call to the contentPane
#
jdk\src\javax\swing\JWindow.java 446 453
Sets the LayoutManager
Overridden to conditionally forward the call to the contentPane
#
jdk\src\javax\swing\JFrame.java 606 613
Sets the LayoutManager
Overridden to conditionally forward the call to the contentPane
*
#
jdk\src\javax\swing\JApplet.java 385 400
Sets the rootPane property
#
jdk\src\javax\swing\JFrame.java 639 655
Sets the rootPane property
#
jdk\src\javax\swing\JWindow.java 479 494
Sets the new rootPane object for this window
#
jdk\src\javax\swing\JDialog.java 993 1008
Sets the rootPane property
*
#
jdk\src\javax\swing\JApplet.java 507 515
Repaints the specified rectangle of this component within time milliseconds
#
jdk\src\javax\swing\JDialog.java 1132 1140
Repaints the specified rectangle of this component within time milliseconds
#
jdk\src\javax\swing\JFrame.java 780 788
Repaints the specified rectangle of this component within time milliseconds
#
jdk\src\javax\swing\JWindow.java 609 617
Repaints the specified rectangle of this component within time milliseconds
*
#
jdk\src\javax\swing\JColorChooser.java 358 363
Sets the dragEnabled property, which must be true to enable automatic drag handling (the first part of drag and drop) on this component
The transferHandler property needs to be set to a non- null value for the drag to do anything
The default value of the dragEnabled property is false
When automatic drag handling is enabled, most look and feels begin a drag-and-drop operation when the user presses the mouse button over the preview panel
Throws HeadlessException if b is true and GraphicsEnvironment.isHeadless() returns true
#
jdk\src\javax\swing\JTree.java 1219 1224
Turns on or off automatic drag handling
In order to enable automatic drag handling, this property should be set to true , and the tree's TransferHandler needs to be non-null
The default value of the dragEnabled property is false
The job of honoring this property, and recognizing a user drag gesture, lies with the look and feel implementation, and in particular, the tree's TreeUI
When automatic drag handling is enabled, most look and feels (including those that subclass BasicLookAndFeel ) begin a drag and drop operation whenever the user presses the mouse button over an item and then moves the mouse a few pixels
Setting this property to true can therefore have a subtle effect on how selections behave
Throws HeadlessException if b is true and GraphicsEnvironment.isHeadless() returns true
#
jdk\src\javax\swing\JFileChooser.java 449 454
Sets the dragEnabled property, which must be true to enable automatic drag handling (the first part of drag and drop) on this component
The transferHandler property needs to be set to a non- null value for the drag to do anything
The default value of the dragEnabled property is false
When automatic drag handling is enabled, most look and feels begin a drag-and-drop operation whenever the user presses the mouse button over an item and then moves the mouse a few pixels
Setting this property to true can therefore have a subtle effect on how selections behave
Some look and feels might not support automatic drag and drop; they will ignore this property
Throws HeadlessException if b is true and GraphicsEnvironment.isHeadless() returns true
#
jdk\src\javax\swing\JList.java 1188 1193
Turns on or off automatic drag handling
In order to enable automatic drag handling, this property should be set to true , and the list's TransferHandler needs to be non-null
The default value of the dragEnabled property is false
The job of honoring this property, and recognizing a user drag gesture, lies with the look and feel implementation, and in particular, the list's ListUI
When automatic drag handling is enabled, most look and feels (including those that subclass BasicLookAndFeel ) begin a drag and drop operation whenever the user presses the mouse button over an item and then moves the mouse a few pixels
Setting this property to true can therefore have a subtle effect on how selections behave
Throws HeadlessException if b is true and GraphicsEnvironment.isHeadless() returns true
#
jdk\src\javax\swing\JTable.java 1436 1441
Turns on or off automatic drag handling
In order to enable automatic drag handling, this property should be set to true , and the table's TransferHandler needs to be non-null
The default value of the dragEnabled property is false
The job of honoring this property, and recognizing a user drag gesture, lies with the look and feel implementation, and in particular, the table's TableUI
When automatic drag handling is enabled, most look and feels (including those that subclass BasicLookAndFeel ) begin a drag and drop operation whenever the user presses the mouse button over an item (in single selection mode) or a selection (in other selection modes) and then moves the mouse a few pixels
Setting this property to true can therefore have a subtle effect on how selections behave
Throws HeadlessException if b is true and GraphicsEnvironment.isHeadless() returns true
#
jdk\src\javax\swing\text\JTextComponent.java 684 689
Turns on or off automatic drag handling
In order to enable automatic drag handling, this property should be set to true , and the component's TransferHandler needs to be non-null
The default value of the dragEnabled property is false
The job of honoring this property, and recognizing a user drag gesture, lies with the look and feel implementation, and in particular, the component's TextUI
When automatic drag handling is enabled, most look and feels (including those that subclass BasicLookAndFeel ) begin a drag and drop operation whenever the user presses the mouse button over a selection and then moves the mouse a few pixels
Setting this property to true can therefore have a subtle effect on how selections behave
Throws HeadlessException if b is true and GraphicsEnvironment.isHeadless() returns true
*
#
jdk\src\javax\swing\JComboBox.java 949 959
Notifies PopupMenuListener s that the popup portion of the combo box will become visible
#
jdk\src\javax\swing\JPopupMenu.java 675 685
Notifies PopupMenuListener s that this popup menu will become visible
*
#
jdk\src\javax\swing\JComboBox.java 970 980
Notifies PopupMenuListener s that the popup portion of the combo box has become invisible
#
jdk\src\javax\swing\JPopupMenu.java 691 701
Notifies PopupMenuListener s that this popup menu will become invisible
*
#
jdk\src\javax\swing\JComboBox.java 991 1001
Notifies PopupMenuListener s that the popup portion of the combo box has been canceled
#
jdk\src\javax\swing\JPopupMenu.java 707 717
Notifies PopupMenuListeners that this popup menu is cancelled
*
#
jdk\src\javax\swing\JComboBox.java 1130 1134
Sets the properties on this combobox to match those in the specified Action
#
jdk\src\javax\swing\JTextField.java 626 630
Sets the properties on this textfield to match those in the specified Action
*
#
jdk\src\javax\swing\JDialog.java 1166 1172
Provides a hint as to whether or not newly created JDialog s should have their Window decorations (such as borders, widgets to close the window, title...) provided by the current look and feel
If defaultLookAndFeelDecorated is true, the current LookAndFeel supports providing window decorations, and the current window manager supports undecorated windows, then newly created JDialog s will have their Window decorations provided by the current LookAndFeel
Otherwise, newly created JDialog s will have their Window decorations provided by the current window manager
#
jdk\src\javax\swing\JFrame.java 814 820
Provides a hint as to whether or not newly created JFrame s should have their Window decorations (such as borders, widgets to close the window, title...) provided by the current look and feel
If defaultLookAndFeelDecorated is true, the current LookAndFeel supports providing window decorations, and the current window manager supports undecorated windows, then newly created JFrame s will have their Window decorations provided by the current LookAndFeel
Otherwise, newly created JFrame s will have their Window decorations provided by the current window manager
*
#
jdk\src\javax\swing\JDialog.java 1182 1189
Returns true if newly created JDialog s should have their Window decorations provided by the current look and feel
Returns true if look and feel should provide Window decorations
#
jdk\src\javax\swing\JFrame.java 831 838
Returns true if newly created JFrame s should have their Window decorations provided by the current look and feel
Returns true if look and feel should provide Window decorations
*
#
jdk\src\javax\swing\JDialog.java 1260 1270
Get the accessible name of this object
Returns the localized name of the object -- can be null if this object does not have a name
#
jdk\src\javax\swing\JFrame.java 912 922
Get the accessible name of this object
Returns the localized name of the object -- can be null if this object does not have a name
*
#
jdk\src\javax\swing\JEditorPane.java 1656 1667
Gets the accessibleDescription property of this object
If this property isn't set, returns the content type of this JEditorPane instead (e.g
"plain/text", "html/text")
Returns the localized description of the object; null if this object does not have a description
#
jdk\src\javax\swing\JToolTip.java 269 280
Get the accessible description of this object
Returns a localized String describing this object
*
#
jdk\src\javax\swing\JEditorPane.java 1676 1680
Gets the state set of this object
Returns an instance of AccessibleStateSet describing the states of the object
#
jdk\src\javax\swing\JTextArea.java 798 802
Gets the state set of this object
Returns an instance of AccessibleStateSet describing the states of the object
*
#
jdk\src\javax\swing\JEditorPane.java 2147 2157
Fetch the constraining span to flow against for the given child index
#
jdk\src\javax\swing\plaf\basic\BasicTextAreaUI.java 258 268
Fetch the constraining span to flow against for the given child index
*
#
jdk\src\javax\swing\JList.java 1233 1246
Sets the drop mode for this component
For backward compatibility, the default for this property is DropMode.USE_SELECTION
Throws IllegalArgumentException if the drop mode is unsupported or null
#
jdk\src\javax\swing\JTree.java 1265 1278
Sets the drop mode for this component
For backward compatibility, the default for this property is DropMode.USE_SELECTION
Throws IllegalArgumentException if the drop mode is unsupported or null
*
#
jdk\src\javax\swing\JList.java 3336 3343
#
jdk\src\javax\swing\JTable.java 8137 8144
Returns the number of accessible children in the object
Returns the number of accessible children in the object
#
jdk\src\javax\swing\JTable.java 8938 8945
Returns the number of accessible children in the object
Returns the number of accessible children in the object
#
jdk\src\javax\swing\table\JTableHeader.java 1043 1050
*
#
jdk\src\javax\swing\JList.java 3345 3354
#
jdk\src\javax\swing\JTable.java 8954 8963
Returns the specified Accessible child of the object
Returns the Accessible child of the object
#
jdk\src\javax\swing\JTable.java 8153 8162
Returns the specified Accessible child of the object
i is zero-based index of child
Returns the Accessible child of the object
#
jdk\src\javax\swing\table\JTableHeader.java 1052 1061
*
#
jdk\src\javax\swing\JList.java 3356 3363
#
jdk\src\javax\swing\JTable.java 8178 8185
Gets the locale of the component
If the component does not have a locale, then the locale of its parent is returned
Returns this component's locale; if this component does not have a locale, the locale of its parent is returned
Throws IllegalComponentStateException if the Component does not have its own locale and has not yet been added to a containment hierarchy such that the locale can be determined from the containing parent
#
jdk\src\javax\swing\table\JTableHeader.java 1063 1070
#
jdk\src\javax\swing\JTable.java 8979 8986
Gets the locale of the component
If the component does not have a locale, then the locale of its parent is returned
Returns this component's locale; if this component does not have a locale, the locale of its parent is returned
Throws IllegalComponentStateException if the Component does not have its own locale and has not yet been added to a containment hierarchy such that the locale can be determined from the containing parent
*
#
jdk\src\javax\swing\JList.java 3409 3421
#
jdk\src\javax\swing\JTree.java 5017 5029
Get the background color of this object
Returns the background color, if supported, of the object; otherwise, null
#
jdk\src\javax\swing\table\JTableHeader.java 1121 1133
#
jdk\src\javax\swing\JTable.java 9082 9094
Gets the background color of this object
Returns the background color, if supported, of the object; otherwise, null
#
jdk\src\javax\swing\JTable.java 8281 8293
Gets the background color of this object
Returns the background color, if supported, of the object; otherwise, null
*
#
jdk\src\javax\swing\JList.java 3423 3433
#
jdk\src\javax\swing\JTable.java 8300 8310
Sets the background color of this object
#
jdk\src\javax\swing\JTable.java 9101 9111
Sets the background color of this object
#
jdk\src\javax\swing\table\JTableHeader.java 1135 1145
#
jdk\src\javax\swing\JTree.java 5036 5046
Set the background color of this object
*
#
jdk\src\javax\swing\JList.java 3435 3447
#
jdk\src\javax\swing\JTable.java 9119 9131
Gets the foreground color of this object
Returns the foreground color, if supported, of the object; otherwise, null
#
jdk\src\javax\swing\JTable.java 8318 8330
Gets the foreground color of this object
Returns the foreground color, if supported, of the object; otherwise, null
#
jdk\src\javax\swing\JTree.java 5055 5067
Get the foreground color of this object
Returns the foreground color, if supported, of the object; otherwise, null
#
jdk\src\javax\swing\table\JTableHeader.java 1147 1159
*
#
jdk\src\javax\swing\JList.java 3449 3459
#
jdk\src\javax\swing\table\JTableHeader.java 1161 1171
#
jdk\src\javax\swing\JTree.java 5069 5079
#
jdk\src\javax\swing\JTable.java 9138 9148
Sets the foreground color of this object
#
jdk\src\javax\swing\JTable.java 8337 8347
Sets the foreground color of this object
*
#
jdk\src\javax\swing\JList.java 3461 3478
#
jdk\src\javax\swing\JTree.java 5081 5098
#
jdk\src\javax\swing\JTable.java 8355 8372
Gets the Cursor of this object
Returns the Cursor , if supported, of the object; otherwise, null
#
jdk\src\javax\swing\JTable.java 9156 9173
Gets the Cursor of this object
Returns the Cursor , if supported, of the object; otherwise, null
#
jdk\src\javax\swing\table\JTableHeader.java 1173 1190
*
#
jdk\src\javax\swing\JList.java 3480 3490
#
jdk\src\javax\swing\JTree.java 5100 5110
#
jdk\src\javax\swing\JTable.java 9180 9190
Sets the Cursor of this object
#
jdk\src\javax\swing\table\JTableHeader.java 1192 1202
#
jdk\src\javax\swing\JTable.java 8379 8389
Sets the Cursor of this object
*
#
jdk\src\javax\swing\JList.java 3492 3504
#
jdk\src\javax\swing\JTree.java 5112 5124
#
jdk\src\javax\swing\JTable.java 8397 8409
Gets the Font of this object
Returns the Font ,if supported, for the object; otherwise, null
#
jdk\src\javax\swing\table\JTableHeader.java 1204 1216
#
jdk\src\javax\swing\JTable.java 9198 9210
Gets the Font of this object
Returns the Font ,if supported, for the object; otherwise, null
*
#
jdk\src\javax\swing\JList.java 3506 3516
#
jdk\src\javax\swing\JTree.java 5126 5136
#
jdk\src\javax\swing\table\JTableHeader.java 1218 1228
#
jdk\src\javax\swing\JTable.java 8416 8426
Sets the Font of this object
#
jdk\src\javax\swing\JTable.java 9217 9227
Sets the Font of this object
*
#
jdk\src\javax\swing\JList.java 3518 3530
#
jdk\src\javax\swing\table\JTableHeader.java 1230 1242
#
jdk\src\javax\swing\JTable.java 9237 9249
Gets the FontMetrics of this object
Returns the FontMetrics object, if supported; otherwise null
#
jdk\src\javax\swing\JTable.java 8436 8448
Gets the FontMetrics of this object
Returns the FontMetrics object, if supported; otherwise null
#
jdk\src\javax\swing\JTree.java 5138 5150
*
#
jdk\src\javax\swing\JList.java 3532 3544
#
jdk\src\javax\swing\table\JTableHeader.java 1244 1256
#
jdk\src\javax\swing\JTable.java 9256 9268
Determines if the object is enabled
Returns true if object is enabled; otherwise, false
#
jdk\src\javax\swing\JTree.java 5152 5164
#
jdk\src\javax\swing\JTable.java 8455 8467
Determines if the object is enabled
Returns true if object is enabled; otherwise, false
*
#
jdk\src\javax\swing\JList.java 3546 3556
#
jdk\src\javax\swing\JTable.java 9275 9285
Sets the enabled state of the object
#
jdk\src\javax\swing\JTable.java 8474 8484
Sets the enabled state of the object
#
jdk\src\javax\swing\table\JTableHeader.java 1258 1268
#
jdk\src\javax\swing\JTree.java 5166 5176
*
#
jdk\src\javax\swing\JList.java 3578 3592
#
jdk\src\javax\swing\table\JTableHeader.java 1304 1318
#
jdk\src\javax\swing\JTable.java 9368 9382
Checks whether the specified point is within this object's bounds, where the point's x and y coordinates are defined to be relative to the coordinate system of the object
Returns true if object contains Point ; otherwise false
#
jdk\src\javax\swing\JTable.java 8567 8581
Checks whether the specified point is within this object's bounds, where the point's x and y coordinates are defined to be relative to the coordinate system of the object
Returns true if object contains Point ; otherwise false
#
jdk\src\javax\swing\JTree.java 5192 5206
*
#
jdk\src\javax\swing\JList.java 3653 3663
#
jdk\src\javax\swing\JTable.java 9492 9502
Resizes this object so that it has width and height
d is The dimension specifying the new size of the object
#
jdk\src\javax\swing\table\JTableHeader.java 1402 1412
#
jdk\src\javax\swing\JTable.java 8659 8669
#
jdk\src\javax\swing\JTree.java 5278 5288
*
#
jdk\src\javax\swing\JList.java 3665 3672
#
jdk\src\javax\swing\JTable.java 9512 9519
Returns the Accessible child, if one exists, contained at the local coordinate Point
p is The point relative to the coordinate system of this object
Returns the Accessible, if it exists, at the specified location; otherwise null
#
jdk\src\javax\swing\JTable.java 8671 8678
#
jdk\src\javax\swing\table\JTableHeader.java 1414 1421
#
jdk\src\javax\swing\JTree.java 5300 5307
Returns the Accessible child, if one exists, contained at the local coordinate Point
Otherwise returns null
Returns the Accessible , if it exists, at the specified location; else null
*
#
jdk\src\javax\swing\JList.java 3674 3686
#
jdk\src\javax\swing\JTable.java 8680 8692
#
jdk\src\javax\swing\JTable.java 9532 9544
Returns whether this object can accept focus or not
Returns true if object can accept focus; otherwise false
#
jdk\src\javax\swing\table\JTableHeader.java 1423 1435
#
jdk\src\javax\swing\JTree.java 5310 5322
*
#
jdk\src\javax\swing\JList.java 3688 3698
#
jdk\src\javax\swing\table\JTableHeader.java 1437 1447
#
jdk\src\javax\swing\JTree.java 5324 5334
#
jdk\src\javax\swing\JTable.java 9552 9562
Requests focus for this object
If this object cannot accept focus, nothing will happen
Otherwise, the object will attempt to take focus
#
jdk\src\javax\swing\JTable.java 8694 8704
*
#
jdk\src\javax\swing\JList.java 3700 3710
#
jdk\src\javax\swing\table\JTableHeader.java 1449 1459
#
jdk\src\javax\swing\JTable.java 9571 9581
Adds the specified focus listener to receive focus events from this component
#
jdk\src\javax\swing\JTable.java 8706 8716
#
jdk\src\javax\swing\JTree.java 5336 5346
*
#
jdk\src\javax\swing\JList.java 3712 3722
#
jdk\src\javax\swing\table\JTableHeader.java 1461 1471
#
jdk\src\javax\swing\JTree.java 5348 5358
#
jdk\src\javax\swing\JTable.java 8718 8728
#
jdk\src\javax\swing\JTable.java 9590 9600
Removes the specified focus listener so it no longer receives focus events from this component
*
#
jdk\src\javax\swing\JMenu.java 623 628
Creates a new menu item attached to the specified Action object and appends it to the end of this menu
#
jdk\src\javax\swing\JPopupMenu.java 313 318
Appends a new menu item to the end of the menu which dispatches the specified Action object
Returns the new menu item
*
#
jdk\src\javax\swing\JMenu.java 640 653
Factory method which creates the JMenuItem for Action s added to the JMenu
Returns the new menu item
#
jdk\src\javax\swing\JPopupMenu.java 436 449
Factory method which creates the JMenuItem for Actions added to the JPopupMenu
Returns the new menu item
*
#
jdk\src\javax\swing\JMenu.java 642 648
Factory method which creates the JMenuItem for Action s added to the JMenu
Returns the new menu item
#
jdk\src\javax\swing\JToolBar.java 534 540
Factory method which creates the JButton for Action s added to the JToolBar
The default name is empty if a null action is passed
Returns the newly created button
#
jdk\src\javax\swing\JPopupMenu.java 438 444
Factory method which creates the JMenuItem for Actions added to the JPopupMenu
Returns the new menu item
*
#
jdk\src\javax\swing\JMenuBar.java 276 285
Returns the index of the specified component
Returns an integer giving the component's position, where 0 is first; or -1 if it can't be found
#
jdk\src\javax\swing\JToolBar.java 224 233
Returns the index of the specified component
(Note: Separators occupy index positions.)
Returns an integer indicating the component's position, where 0 is first
#
jdk\src\javax\swing\JPopupMenu.java 1005 1014
Returns the index of the specified component
Returns the index of the component, where 0 is the first; or -1 if the component is not found
*
#
jdk\src\javax\swing\JMenuBar.java 293 297
Sets the currently selected component, producing a a change to the selection model
#
jdk\src\javax\swing\JPopupMenu.java 1062 1066
Sets the currently selected component, This will result in a change to the selection model
*
#
jdk\src\javax\swing\JMenuBar.java 382 388
Returns the margin between the menubar's border and its menus
If there is no previous margin, it will create a default margin with zero size
Returns an Insets object containing the margin values
#
jdk\src\javax\swing\JPopupMenu.java 1111 1117
Returns the margin, in pixels, between the popup menu's border and its containers
Returns an Insets object containing the margin values
#
jdk\src\javax\swing\JToolBar.java 286 293
Returns the margin between the tool bar's border and its buttons
Returns an Insets object containing the margin values
*
#
jdk\src\javax\swing\JMenuBar.java 423 440
Implemented to be a MenuElement -- returns the menus in this menu bar
Returns an array of menu items in the menu bar
#
jdk\src\javax\swing\JPopupMenu.java 1497 1514
Returns an array of MenuElement s containing the submenu for this menu component
It will only return items conforming to the JMenuElement interface
Returns an array of MenuElement objects
*
#
jdk\src\javax\swing\JProgressBar.java 1048 1059
Gets the state set of this object
Returns an instance of AccessibleState containing the current state of the object
#
jdk\src\javax\swing\JScrollBar.java 855 866
Get the state set of this object
Returns an instance of AccessibleState containing the current state of the object
#
jdk\src\javax\swing\JSlider.java 1442 1454
Get the state set of this object
Returns an instance of AccessibleState containing the current state of the object
*
#
jdk\src\javax\swing\JProgressBar.java 1097 1104
Sets the value of this object as a Number
Returns true if the value was set
#
jdk\src\javax\swing\JSlider.java 1491 1498
Set the value of this object as a Number
Returns True if the value was set
#
jdk\src\javax\swing\JScrollBar.java 904 911
Set the value of this object as a Number
Returns True if the value was set
*
#
jdk\src\javax\swing\JScrollBar.java 270 288
Set the scrollbar's orientation to either VERTICAL or HORIZONTAL
Throws IllegalArgumentException if orientation is not one of VERTICAL, HORIZONTAL
#
jdk\src\javax\swing\JSlider.java 729 747
Set the slider's orientation to either SwingConstants.VERTICAL or SwingConstants.HORIZONTAL
Throws IllegalArgumentException if orientation is not one of VERTICAL , HORIZONTAL
*
#
jdk\src\javax\swing\JScrollBar.java 591 602
Sets the model's valueIsAdjusting property
Scrollbar look and feel implementations should set this property to true when a knob drag begins, and to false when the drag ends
The scrollbar model will not generate ChangeEvents while valueIsAdjusting is true
#
jdk\src\javax\swing\JSlider.java 649 660
Sets the model's valueIsAdjusting property
Slider look and feel implementations should set this property to true when a knob drag begins, and to false when the drag ends
*
#
jdk\src\javax\swing\JSpinner.java 1321 1326
#
jdk\src\javax\swing\text\DefaultFormatter.java 279 284
Converts the passed in Object into a String by way of the toString method
Throws ParseException if there is an error in the conversion
Returns String representation of value
*
#
jdk\src\javax\swing\JTable.java 8014 8021
Sets the localized accessible name of this object
#
jdk\src\javax\swing\JTree.java 4696 4703
Set the localized accessible name of this object
#
jdk\src\javax\swing\table\JTableHeader.java 987 994
#
jdk\src\javax\swing\JTable.java 8818 8825
Sets the localized accessible name of this object
*
#
jdk\src\javax\swing\JTable.java 8033 8040
Gets the accessible description of this object
Returns the localized description of the object; null if this object does not have a description
#
jdk\src\javax\swing\JTable.java 8834 8841
Gets the accessible description of this object
Returns the localized description of the object; null if this object does not have a description
#
jdk\src\javax\swing\JTree.java 4714 4721
Get the accessible description of this object
Returns the localized description of the object; null if this object does not have a description
#
jdk\src\javax\swing\table\JTableHeader.java 999 1006
*
#
jdk\src\javax\swing\JTable.java 8047 8054
Sets the accessible description of this object
#
jdk\src\javax\swing\JTree.java 4728 4735
Set the accessible description of this object
#
jdk\src\javax\swing\JTable.java 8848 8855
Sets the accessible description of this object
#
jdk\src\javax\swing\table\JTableHeader.java 1008 1015
*
#
jdk\src\javax\swing\JTable.java 8063 8070
Gets the role of this object
Returns an instance of AccessibleRole describing the role of the object
#
jdk\src\javax\swing\JTree.java 4743 4750
Get the role of this object
Returns an instance of AccessibleRole describing the role of the object
#
jdk\src\javax\swing\JTable.java 8864 8871
Gets the role of this object
Returns an instance of AccessibleRole describing the role of the object
*
#
jdk\src\javax\swing\JTable.java 8079 8108
Gets the state set of this object
Returns an instance of AccessibleStateSet containing the current state set of the object
#
jdk\src\javax\swing\JTable.java 8880 8909
Gets the state set of this object
Returns an instance of AccessibleStateSet containing the current state set of the object
*
#
jdk\src\javax\swing\JTable.java 8194 8201
Adds a PropertyChangeListener to the listener list
#
jdk\src\javax\swing\table\JTableHeader.java 1072 1079
#
jdk\src\javax\swing\JTree.java 4914 4921
Add a PropertyChangeListener to the listener list
#
jdk\src\javax\swing\JTable.java 8995 9002
Adds a PropertyChangeListener to the listener list
*
#
jdk\src\javax\swing\JTable.java 8211 8218
Removes a PropertyChangeListener from the listener list
This removes a PropertyChangeListener that was registered for all properties
#
jdk\src\javax\swing\table\JTableHeader.java 1081 1088
#
jdk\src\javax\swing\JTable.java 9012 9019
Removes a PropertyChangeListener from the listener list
This removes a PropertyChangeListener that was registered for all properties
#
jdk\src\javax\swing\JTree.java 4930 4937
Remove a PropertyChangeListener from the listener list
This removes a PropertyChangeListener that was registered for all properties
*
#
jdk\src\javax\swing\JTable.java 8495 8507
Determines if this object is visible
To determine if an object is showing on the screen, use isShowing
Returns true if object is visible; otherwise, false
#
jdk\src\javax\swing\JTable.java 9296 9308
Determines if this object is visible
To determine if an object is showing on the screen, use isShowing
Returns true if object is visible; otherwise, false
#
jdk\src\javax\swing\table\JTableHeader.java 1270 1282
*
#
jdk\src\javax\swing\JTable.java 8514 8524
Sets the visible state of the object
#
jdk\src\javax\swing\table\JTableHeader.java 1284 1294
#
jdk\src\javax\swing\JTable.java 9315 9325
Sets the visible state of the object
*
#
jdk\src\javax\swing\JTable.java 8535 8554
This is determined by checking the visibility of the object and ancestors of the object
Returns true if the object is showing; otherwise, false
#
jdk\src\javax\swing\JTable.java 9336 9355
This is determined by checking the visibility of the object and ancestors of the object
Returns true if the object is showing; otherwise, false
*
#
jdk\src\javax\swing\JTable.java 8589 8598
Returns the location of the object on the screen
Returns location of object on screen -- can be null if this object is not on the screen
#
jdk\src\javax\swing\JTable.java 9390 9399
Returns the location of the object on the screen
Returns location of object on screen -- can be null if this object is not on the screen
#
jdk\src\javax\swing\table\JTableHeader.java 1320 1329
*
#
jdk\src\javax\swing\JTable.java 8637 8647
#
jdk\src\javax\swing\table\JTableHeader.java 1373 1383
#
jdk\src\javax\swing\JTree.java 5262 5272
#
jdk\src\javax\swing\JTable.java 9454 9464
Sets the bounds of this object in the form of a Rectangle object
The bounds specify this object's width, height, and location relative to its parent
*
#
jdk\src\javax\swing\JTextArea.java 579 588
Sets the number of columns for this TextArea
Does an invalidate() after setting the new value
Throws IllegalArgumentException if columns is less than 0
#
jdk\src\javax\swing\JTextField.java 386 395
Sets the number of columns in this TextField , and then invalidate the layout
Throws IllegalArgumentException if columns is less than 0
*
#
jdk\src\javax\swing\JTextArea.java 600 606
Gets column width
By default this is defined to be the width of the character m for the font used
Returns the column width &gt;= 1
#
jdk\src\javax\swing\JTextField.java 407 413
Returns the column width
By default this is defined to be the width of the character m for the font used
Returns the column width &gt;= 1
*
#
jdk\src\javax\swing\JTree.java 2923 2937
Notifies all listeners that have registered interest for notification on this event type
#
jdk\src\javax\swing\tree\DefaultTreeSelectionModel.java 624 638
Notifies all listeners that are registered for tree selection events on this object
*
#
jdk\src\javax\swing\JTree.java 3519 3525
Returns false to indicate that the width of the viewport does not determine the width of the table, unless the preferred width of the tree is smaller than the viewports width
In other words: ensure that the tree is never smaller than its viewport
Returns whether the tree should track the width of the viewport
#
jdk\src\javax\swing\text\JTextComponent.java 2019 2025
Returns true if a viewport should always force the width of this Scrollable to match the width of the viewport
Note that returning true for a Scrollable whose ancestor is a JScrollPane effectively disables horizontal scrolling
Returns true if a viewport should force the Scrollable s width to match its own
*
#
jdk\src\javax\swing\JTree.java 3536 3542
Returns false to indicate that the height of the viewport does not determine the height of the table, unless the preferred height of the tree is smaller than the viewports height
In other words: ensure that the tree is never smaller than its viewport
Returns whether the tree should track the height of the viewport
#
jdk\src\javax\swing\text\JTextComponent.java 2040 2046
Returns true if a viewport should always force the height of this Scrollable to match the height of the viewport
Returns true if a viewport should force the Scrollables height to match its own
*
#
jdk\src\javax\swing\JTree.java 4553 4558
Clears the selection in the object, so that nothing in the object is selected
#
jdk\src\javax\swing\JTree.java 5466 5471
Clears the selection in the object, so that nothing in the object is selected
*
#
jdk\src\javax\swing\UIDefaults.java 809 813
Removes a PropertyChangeListener from the listener list
This removes a PropertyChangeListener that was registered for all properties
#
jdk\src\javax\swing\table\TableColumn.java 766 771
Removes a PropertyChangeListener from the listener list
The PropertyChangeListener to be removed was registered for all properties
*
#
jdk\src\javax\swing\UIDefaults.java 844 848
Support for reporting bound property changes
If oldValue and newValue are not equal and the PropertyChangeEvent x listener list isn't empty, then fire a PropertyChange event to each listener
propertyName is the programmatic name of the property that was changed
#
jdk\src\javax\swing\plaf\basic\BasicDirectoryModel.java 423 429
Support for reporting bound property changes for boolean properties
*
#
jdk\src\javax\swing\plaf\basic\BasicButtonUI.java 365 372
#
jdk\src\javax\swing\plaf\basic\BasicLabelUI.java 273 280
Returns getPreferredSize(c)
#
jdk\src\javax\swing\plaf\basic\BasicToolTipUI.java 178 185
*
#
jdk\src\javax\swing\plaf\basic\BasicButtonUI.java 379 386
#
jdk\src\javax\swing\plaf\basic\BasicLabelUI.java 285 292
Returns getPreferredSize(c)
#
jdk\src\javax\swing\plaf\basic\BasicToolTipUI.java 187 194
*
#
jdk\src\javax\swing\plaf\basic\BasicDirectoryModel.java 404 409
Returns an array of all the property change listeners registered on this component
Returns all of this component's PropertyChangeListener s or an empty array if no property change listeners are currently registered
#
jdk\src\javax\swing\tree\DefaultTreeSelectionModel.java 862 867
Returns an array of all the property change listeners registered on this DefaultTreeSelectionModel
Returns all of this model's PropertyChangeListener s or an empty array if no property change listeners are currently registered
*
#
jdk\src\javax\swing\plaf\basic\BasicIconFactory.java 84 89
#
jdk\src\javax\swing\plaf\metal\MetalIconFactory.java 165 170
Returns a checkbox icon
*
#
jdk\src\javax\swing\plaf\basic\BasicLookAndFeel.java 1931 1936
Returns the ui that is of type klass , or null if one can not be found
#
jdk\src\javax\swing\plaf\synth\SynthLookAndFeel.java 384 389
Returns the ui that is of type klass , or null if one can not be found
*
#
jdk\src\javax\swing\plaf\basic\BasicTextAreaUI.java 238 243
#
jdk\src\javax\swing\text\html\BlockView.java 71 76
Establishes the parent view for this view
This is implemented to forward to the superclass as well as call the setPropertiesFromAttributes method to set the paragraph properties from the css attributes
#
jdk\src\javax\swing\text\html\ParagraphView.java 74 79
Establishes the parent view for this view
This is implemented to forward to the superclass as well as call the setPropertiesFromAttributes setPropertiesFromAttributes method to set the paragraph properties from the css attributes
#
jdk\src\javax\swing\text\html\TableView.java 816 821
Establishes the parent view for this view
This is implemented to forward to the superclass as well as call the <a href="#setPropertiesFromAttributes">setPropertiesFromAttributes method to set the paragraph properties from the css attributes
*
#
jdk\src\javax\swing\plaf\basic\BasicTextFieldUI.java 208 273
Adjusts the allocation given to the view to be a suitable allocation for a text field
If the view has been allocated more than the preferred span vertically, the allocation is changed to be centered vertically
Horizontally the view is adjusted according to the horizontal alignment property set on the associated JTextField (if that is the type of the hosting component)
Returns the allocation that the superclass should use
#
jdk\src\javax\swing\text\FieldView.java 79 144
Adjusts the allocation given to the view to be a suitable allocation for a text field
If the view has been allocated more than the preferred span vertically, the allocation is changed to be centered vertically
Horizontally the view is adjusted according to the horizontal alignment property set on the associated JTextField (if that is the type of the hosting component)
Returns the allocation that the superclass should use
*
#
jdk\src\javax\swing\plaf\basic\BasicTextFieldUI.java 283 300
Update the visibility model with the associated JTextField (if there is one) to reflect the current visibility as a result of changes to the document model
The bounded range properties are updated
If the view hasn't yet been shown the extent will be zero and we just set it to be full until determined otherwise
#
jdk\src\javax\swing\text\FieldView.java 154 171
Update the visibility model with the associated JTextField (if there is one) to reflect the current visibility as a result of changes to the document model
The bounded range properties are updated
If the view hasn't yet been shown the extent will be zero and we just set it to be full until determined otherwise
*
#
jdk\src\javax\swing\plaf\basic\BasicTextFieldUI.java 327 332
Determines the resizability of the view along the given axis
A value of 0 or less is not resizable
Returns the weight -> 1 for View.X_AXIS, else 0
#
jdk\src\javax\swing\text\FieldView.java 246 251
Determines the resizability of the view along the given axis
A value of 0 or less is not resizable
Returns the weight -&gt; 1 for View.X_AXIS, else 0
*
#
jdk\src\javax\swing\plaf\basic\BasicToolBarUI.java 477 492
#
jdk\src\javax\swing\plaf\basic\BasicToolBarUI.java 519 534
Creates a window which contains the toolbar after it has been dragged out from its container
Returns a RootPaneContainer object, containing the toolbar
*
#
jdk\src\javax\swing\plaf\metal\MetalLookAndFeel.java 2257 2262
Updates the UIs of all the known Frames
#
jdk\src\javax\swing\plaf\synth\SynthLookAndFeel.java 871 876
Updates the UIs of all the known Frames
*
#
jdk\src\javax\swing\plaf\metal\MetalSplitPaneDivider.java 104 197
Creates and return an instance of JButton that can be used to collapse the left component in the metal split pane
#
jdk\src\javax\swing\plaf\metal\MetalSplitPaneDivider.java 213 306
Creates and return an instance of JButton that can be used to collapse the right component in the metal split pane
*
#
jdk\src\javax\swing\plaf\multi\MultiButtonUI.java 79 86
Invokes the contains method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiDesktopPaneUI.java 79 86
Invokes the contains method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiFileChooserUI.java 162 169
Invokes the contains method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiTextUI.java 229 236
Invokes the contains method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiTreeUI.java 220 227
Invokes the contains method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiLabelUI.java 79 86
Invokes the contains method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiListUI.java 127 134
Invokes the contains method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiTableUI.java 79 86
Invokes the contains method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiMenuBarUI.java 79 86
Invokes the contains method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiTableHeaderUI.java 79 86
Invokes the contains method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiMenuItemUI.java 84 91
Invokes the contains method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiOptionPaneUI.java 104 111
Invokes the contains method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiPanelUI.java 79 86
Invokes the contains method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiTabbedPaneUI.java 126 133
Invokes the contains method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiPopupMenuUI.java 114 121
Invokes the contains method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiProgressBarUI.java 79 86
Invokes the contains method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiRootPaneUI.java 80 87
Invokes the contains method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiSplitPaneUI.java 152 159
Invokes the contains method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiToolBarUI.java 79 86
Invokes the contains method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiScrollBarUI.java 79 86
Invokes the contains method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiToolTipUI.java 79 86
Invokes the contains method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiInternalFrameUI.java 79 86
Invokes the contains method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiDesktopIconUI.java 79 86
Invokes the contains method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiComboBoxUI.java 119 126
Invokes the contains method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiColorChooserUI.java 79 86
Invokes the contains method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiScrollPaneUI.java 79 86
Invokes the contains method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiSeparatorUI.java 79 86
Invokes the contains method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiSliderUI.java 79 86
Invokes the contains method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiSpinnerUI.java 80 87
Invokes the contains method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiViewportUI.java 79 86
Invokes the contains method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
*
#
jdk\src\javax\swing\plaf\multi\MultiButtonUI.java 91 95
Invokes the update method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiRootPaneUI.java 92 96
Invokes the update method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiListUI.java 139 143
Invokes the update method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiViewportUI.java 91 95
Invokes the update method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiScrollBarUI.java 91 95
Invokes the update method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiProgressBarUI.java 91 95
Invokes the update method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiTreeUI.java 232 236
Invokes the update method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiToolTipUI.java 91 95
Invokes the update method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiSplitPaneUI.java 164 168
Invokes the update method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiToolBarUI.java 91 95
Invokes the update method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiTextUI.java 241 245
Invokes the update method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiLabelUI.java 91 95
Invokes the update method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiComboBoxUI.java 131 135
Invokes the update method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiTableUI.java 91 95
Invokes the update method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiTableHeaderUI.java 91 95
Invokes the update method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiTabbedPaneUI.java 138 142
Invokes the update method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiSpinnerUI.java 92 96
Invokes the update method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiInternalFrameUI.java 91 95
Invokes the update method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiSeparatorUI.java 91 95
Invokes the update method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiMenuBarUI.java 91 95
Invokes the update method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiColorChooserUI.java 91 95
Invokes the update method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiPopupMenuUI.java 126 130
Invokes the update method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiFileChooserUI.java 174 178
Invokes the update method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiScrollPaneUI.java 91 95
Invokes the update method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiPanelUI.java 91 95
Invokes the update method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiSliderUI.java 91 95
Invokes the update method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiOptionPaneUI.java 116 120
Invokes the update method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiDesktopPaneUI.java 91 95
Invokes the update method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiMenuItemUI.java 96 100
Invokes the update method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiDesktopIconUI.java 91 95
Invokes the update method on each UI handled by this object
*
#
jdk\src\javax\swing\plaf\multi\MultiButtonUI.java 112 116
Invokes the installUI method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiComboBoxUI.java 152 156
Invokes the installUI method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiMenuItemUI.java 117 121
Invokes the installUI method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiDesktopPaneUI.java 112 116
Invokes the installUI method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiMenuBarUI.java 112 116
Invokes the installUI method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiFileChooserUI.java 195 199
Invokes the installUI method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiPopupMenuUI.java 147 151
Invokes the installUI method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiInternalFrameUI.java 112 116
Invokes the installUI method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiScrollBarUI.java 112 116
Invokes the installUI method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiLabelUI.java 112 116
Invokes the installUI method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiSliderUI.java 112 116
Invokes the installUI method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiOptionPaneUI.java 137 141
Invokes the installUI method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiProgressBarUI.java 112 116
Invokes the installUI method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiScrollPaneUI.java 112 116
Invokes the installUI method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiRootPaneUI.java 113 117
Invokes the installUI method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiListUI.java 160 164
Invokes the installUI method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiViewportUI.java 112 116
Invokes the installUI method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiTreeUI.java 253 257
Invokes the installUI method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiToolTipUI.java 112 116
Invokes the installUI method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiToolBarUI.java 112 116
Invokes the installUI method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiPanelUI.java 112 116
Invokes the installUI method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiTextUI.java 262 266
Invokes the installUI method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiColorChooserUI.java 112 116
Invokes the installUI method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiSpinnerUI.java 113 117
Invokes the installUI method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiTableUI.java 112 116
Invokes the installUI method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiSeparatorUI.java 112 116
Invokes the installUI method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiTableHeaderUI.java 112 116
Invokes the installUI method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiTabbedPaneUI.java 159 163
Invokes the installUI method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiDesktopIconUI.java 112 116
Invokes the installUI method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiSplitPaneUI.java 185 189
Invokes the installUI method on each UI handled by this object
*
#
jdk\src\javax\swing\plaf\multi\MultiButtonUI.java 121 125
Invokes the uninstallUI method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiMenuBarUI.java 121 125
Invokes the uninstallUI method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiPanelUI.java 121 125
Invokes the uninstallUI method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiOptionPaneUI.java 146 150
Invokes the uninstallUI method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiComboBoxUI.java 161 165
Invokes the uninstallUI method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiMenuItemUI.java 126 130
Invokes the uninstallUI method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiListUI.java 169 173
Invokes the uninstallUI method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiDesktopPaneUI.java 121 125
Invokes the uninstallUI method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiScrollPaneUI.java 121 125
Invokes the uninstallUI method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiSpinnerUI.java 122 126
Invokes the uninstallUI method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiTextUI.java 271 275
Invokes the uninstallUI method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiSliderUI.java 121 125
Invokes the uninstallUI method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiFileChooserUI.java 204 208
Invokes the uninstallUI method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiInternalFrameUI.java 121 125
Invokes the uninstallUI method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiColorChooserUI.java 121 125
Invokes the uninstallUI method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiLabelUI.java 121 125
Invokes the uninstallUI method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiSeparatorUI.java 121 125
Invokes the uninstallUI method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiProgressBarUI.java 121 125
Invokes the uninstallUI method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiPopupMenuUI.java 156 160
Invokes the uninstallUI method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiScrollBarUI.java 121 125
Invokes the uninstallUI method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiDesktopIconUI.java 121 125
Invokes the uninstallUI method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiTableUI.java 121 125
Invokes the uninstallUI method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiTableHeaderUI.java 121 125
Invokes the uninstallUI method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiTabbedPaneUI.java 168 172
Invokes the uninstallUI method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiRootPaneUI.java 122 126
Invokes the uninstallUI method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiToolBarUI.java 121 125
Invokes the uninstallUI method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiSplitPaneUI.java 194 198
Invokes the uninstallUI method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiToolTipUI.java 121 125
Invokes the uninstallUI method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiViewportUI.java 121 125
Invokes the uninstallUI method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiTreeUI.java 262 266
Invokes the uninstallUI method on each UI handled by this object
*
#
jdk\src\javax\swing\plaf\multi\MultiButtonUI.java 130 134
Invokes the paint method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiToolTipUI.java 130 134
Invokes the paint method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiTreeUI.java 271 275
Invokes the paint method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiViewportUI.java 130 134
Invokes the paint method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiToolBarUI.java 130 134
Invokes the paint method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiTextUI.java 280 284
Invokes the paint method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiTableUI.java 130 134
Invokes the paint method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiTableHeaderUI.java 130 134
Invokes the paint method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiTabbedPaneUI.java 177 181
Invokes the paint method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiSplitPaneUI.java 203 207
Invokes the paint method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiListUI.java 178 182
Invokes the paint method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiSpinnerUI.java 131 135
Invokes the paint method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiScrollPaneUI.java 130 134
Invokes the paint method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiComboBoxUI.java 170 174
Invokes the paint method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiOptionPaneUI.java 155 159
Invokes the paint method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiProgressBarUI.java 130 134
Invokes the paint method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiSliderUI.java 130 134
Invokes the paint method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiDesktopPaneUI.java 130 134
Invokes the paint method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiFileChooserUI.java 213 217
Invokes the paint method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiColorChooserUI.java 130 134
Invokes the paint method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiMenuItemUI.java 135 139
Invokes the paint method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiRootPaneUI.java 131 135
Invokes the paint method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiPanelUI.java 130 134
Invokes the paint method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiDesktopIconUI.java 130 134
Invokes the paint method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiMenuBarUI.java 130 134
Invokes the paint method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiInternalFrameUI.java 130 134
Invokes the paint method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiScrollBarUI.java 130 134
Invokes the paint method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiSeparatorUI.java 130 134
Invokes the paint method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiPopupMenuUI.java 165 169
Invokes the paint method on each UI handled by this object
#
jdk\src\javax\swing\plaf\multi\MultiLabelUI.java 130 134
Invokes the paint method on each UI handled by this object
*
#
jdk\src\javax\swing\plaf\multi\MultiButtonUI.java 142 149
Invokes the getPreferredSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiTableHeaderUI.java 142 149
Invokes the getPreferredSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiTreeUI.java 283 290
Invokes the getPreferredSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiListUI.java 190 197
Invokes the getPreferredSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiSpinnerUI.java 143 150
Invokes the getPreferredSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiTabbedPaneUI.java 189 196
Invokes the getPreferredSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiTextUI.java 292 299
Invokes the getPreferredSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiToolBarUI.java 142 149
Invokes the getPreferredSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiViewportUI.java 142 149
Invokes the getPreferredSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiScrollBarUI.java 142 149
Invokes the getPreferredSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiDesktopIconUI.java 142 149
Invokes the getPreferredSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiMenuBarUI.java 142 149
Invokes the getPreferredSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiFileChooserUI.java 225 232
Invokes the getPreferredSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiSliderUI.java 142 149
Invokes the getPreferredSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiToolTipUI.java 142 149
Invokes the getPreferredSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiSplitPaneUI.java 215 222
Invokes the getPreferredSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiRootPaneUI.java 143 150
Invokes the getPreferredSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiDesktopPaneUI.java 142 149
Invokes the getPreferredSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiMenuItemUI.java 147 154
Invokes the getPreferredSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiTableUI.java 142 149
Invokes the getPreferredSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiComboBoxUI.java 182 189
Invokes the getPreferredSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiSeparatorUI.java 142 149
Invokes the getPreferredSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiLabelUI.java 142 149
Invokes the getPreferredSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiProgressBarUI.java 142 149
Invokes the getPreferredSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiOptionPaneUI.java 167 174
Invokes the getPreferredSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiPanelUI.java 142 149
Invokes the getPreferredSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiPopupMenuUI.java 177 184
Invokes the getPreferredSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiColorChooserUI.java 142 149
Invokes the getPreferredSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiScrollPaneUI.java 142 149
Invokes the getPreferredSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiInternalFrameUI.java 142 149
Invokes the getPreferredSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
*
#
jdk\src\javax\swing\plaf\multi\MultiButtonUI.java 157 164
Invokes the getMinimumSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiSpinnerUI.java 158 165
Invokes the getMinimumSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiDesktopPaneUI.java 157 164
Invokes the getMinimumSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiScrollPaneUI.java 157 164
Invokes the getMinimumSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiColorChooserUI.java 157 164
Invokes the getMinimumSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiSplitPaneUI.java 230 237
Invokes the getMinimumSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiSeparatorUI.java 157 164
Invokes the getMinimumSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiComboBoxUI.java 197 204
Invokes the getMinimumSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiViewportUI.java 157 164
Invokes the getMinimumSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiInternalFrameUI.java 157 164
Invokes the getMinimumSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiTableHeaderUI.java 157 164
Invokes the getMinimumSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiTextUI.java 307 314
Invokes the getMinimumSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiToolBarUI.java 157 164
Invokes the getMinimumSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiSliderUI.java 157 164
Invokes the getMinimumSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiDesktopIconUI.java 157 164
Invokes the getMinimumSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiScrollBarUI.java 157 164
Invokes the getMinimumSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiTreeUI.java 298 305
Invokes the getMinimumSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiMenuBarUI.java 157 164
Invokes the getMinimumSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiLabelUI.java 157 164
Invokes the getMinimumSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiTabbedPaneUI.java 204 211
Invokes the getMinimumSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiTableUI.java 157 164
Invokes the getMinimumSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiFileChooserUI.java 240 247
Invokes the getMinimumSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiMenuItemUI.java 162 169
Invokes the getMinimumSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiRootPaneUI.java 158 165
Invokes the getMinimumSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiOptionPaneUI.java 182 189
Invokes the getMinimumSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiPanelUI.java 157 164
Invokes the getMinimumSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiPopupMenuUI.java 192 199
Invokes the getMinimumSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiProgressBarUI.java 157 164
Invokes the getMinimumSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiListUI.java 205 212
Invokes the getMinimumSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiToolTipUI.java 157 164
Invokes the getMinimumSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
*
#
jdk\src\javax\swing\plaf\multi\MultiButtonUI.java 172 179
Invokes the getMaximumSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiSpinnerUI.java 173 180
Invokes the getMaximumSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiTabbedPaneUI.java 219 226
Invokes the getMaximumSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiColorChooserUI.java 172 179
Invokes the getMaximumSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiPopupMenuUI.java 207 214
Invokes the getMaximumSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiProgressBarUI.java 172 179
Invokes the getMaximumSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiScrollPaneUI.java 172 179
Invokes the getMaximumSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiSplitPaneUI.java 245 252
Invokes the getMaximumSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiPanelUI.java 172 179
Invokes the getMaximumSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiComboBoxUI.java 212 219
Invokes the getMaximumSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiTableHeaderUI.java 172 179
Invokes the getMaximumSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiToolTipUI.java 172 179
Invokes the getMaximumSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiTableUI.java 172 179
Invokes the getMaximumSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiOptionPaneUI.java 197 204
Invokes the getMaximumSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiScrollBarUI.java 172 179
Invokes the getMaximumSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiTreeUI.java 313 320
Invokes the getMaximumSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiToolBarUI.java 172 179
Invokes the getMaximumSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiMenuItemUI.java 177 184
Invokes the getMaximumSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiRootPaneUI.java 173 180
Invokes the getMaximumSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiSeparatorUI.java 172 179
Invokes the getMaximumSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiDesktopIconUI.java 172 179
Invokes the getMaximumSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiTextUI.java 322 329
Invokes the getMaximumSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiMenuBarUI.java 172 179
Invokes the getMaximumSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiInternalFrameUI.java 172 179
Invokes the getMaximumSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiDesktopPaneUI.java 172 179
Invokes the getMaximumSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiLabelUI.java 172 179
Invokes the getMaximumSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiViewportUI.java 172 179
Invokes the getMaximumSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiSliderUI.java 172 179
Invokes the getMaximumSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiFileChooserUI.java 255 262
Invokes the getMaximumSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiListUI.java 220 227
Invokes the getMaximumSize method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
*
#
jdk\src\javax\swing\plaf\multi\MultiButtonUI.java 187 194
Invokes the getAccessibleChildrenCount method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiLabelUI.java 187 194
Invokes the getAccessibleChildrenCount method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiInternalFrameUI.java 187 194
Invokes the getAccessibleChildrenCount method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiFileChooserUI.java 270 277
Invokes the getAccessibleChildrenCount method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiDesktopPaneUI.java 187 194
Invokes the getAccessibleChildrenCount method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiListUI.java 235 242
Invokes the getAccessibleChildrenCount method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiTableUI.java 187 194
Invokes the getAccessibleChildrenCount method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiTableHeaderUI.java 187 194
Invokes the getAccessibleChildrenCount method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiTabbedPaneUI.java 234 241
Invokes the getAccessibleChildrenCount method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiSplitPaneUI.java 260 267
Invokes the getAccessibleChildrenCount method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiTextUI.java 337 344
Invokes the getAccessibleChildrenCount method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiSpinnerUI.java 188 195
Invokes the getAccessibleChildrenCount method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiSliderUI.java 187 194
Invokes the getAccessibleChildrenCount method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiSeparatorUI.java 187 194
Invokes the getAccessibleChildrenCount method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiTreeUI.java 328 335
Invokes the getAccessibleChildrenCount method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiScrollPaneUI.java 187 194
Invokes the getAccessibleChildrenCount method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiViewportUI.java 187 194
Invokes the getAccessibleChildrenCount method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiToolBarUI.java 187 194
Invokes the getAccessibleChildrenCount method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiColorChooserUI.java 187 194
Invokes the getAccessibleChildrenCount method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiScrollBarUI.java 187 194
Invokes the getAccessibleChildrenCount method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiComboBoxUI.java 227 234
Invokes the getAccessibleChildrenCount method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiDesktopIconUI.java 187 194
Invokes the getAccessibleChildrenCount method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiRootPaneUI.java 188 195
Invokes the getAccessibleChildrenCount method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiProgressBarUI.java 187 194
Invokes the getAccessibleChildrenCount method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiPopupMenuUI.java 222 229
Invokes the getAccessibleChildrenCount method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiMenuBarUI.java 187 194
Invokes the getAccessibleChildrenCount method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiPanelUI.java 187 194
Invokes the getAccessibleChildrenCount method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiOptionPaneUI.java 212 219
Invokes the getAccessibleChildrenCount method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiMenuItemUI.java 192 199
Invokes the getAccessibleChildrenCount method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiToolTipUI.java 187 194
Invokes the getAccessibleChildrenCount method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
*
#
jdk\src\javax\swing\plaf\multi\MultiButtonUI.java 202 209
Invokes the getAccessibleChild method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiToolTipUI.java 202 209
Invokes the getAccessibleChild method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiLabelUI.java 202 209
Invokes the getAccessibleChild method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiTableUI.java 202 209
Invokes the getAccessibleChild method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiDesktopPaneUI.java 202 209
Invokes the getAccessibleChild method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiSplitPaneUI.java 275 282
Invokes the getAccessibleChild method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiColorChooserUI.java 202 209
Invokes the getAccessibleChild method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiScrollBarUI.java 202 209
Invokes the getAccessibleChild method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiToolBarUI.java 202 209
Invokes the getAccessibleChild method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiOptionPaneUI.java 227 234
Invokes the getAccessibleChild method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiListUI.java 250 257
Invokes the getAccessibleChild method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiPanelUI.java 202 209
Invokes the getAccessibleChild method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiViewportUI.java 202 209
Invokes the getAccessibleChild method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiTableHeaderUI.java 202 209
Invokes the getAccessibleChild method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiComboBoxUI.java 242 249
Invokes the getAccessibleChild method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiTextUI.java 352 359
Invokes the getAccessibleChild method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiScrollPaneUI.java 202 209
Invokes the getAccessibleChild method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiInternalFrameUI.java 202 209
Invokes the getAccessibleChild method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiSpinnerUI.java 203 210
Invokes the getAccessibleChild method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiTreeUI.java 343 350
Invokes the getAccessibleChild method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiMenuBarUI.java 202 209
Invokes the getAccessibleChild method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiPopupMenuUI.java 237 244
Invokes the getAccessibleChild method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiTabbedPaneUI.java 249 256
Invokes the getAccessibleChild method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiDesktopIconUI.java 202 209
Invokes the getAccessibleChild method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiSeparatorUI.java 202 209
Invokes the getAccessibleChild method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiFileChooserUI.java 285 292
Invokes the getAccessibleChild method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiProgressBarUI.java 202 209
Invokes the getAccessibleChild method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiSliderUI.java 202 209
Invokes the getAccessibleChild method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiRootPaneUI.java 203 210
Invokes the getAccessibleChild method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
#
jdk\src\javax\swing\plaf\multi\MultiMenuItemUI.java 207 214
Invokes the getAccessibleChild method on each UI handled by this object
Returns the value obtained from the first UI, which is the UI obtained from the default LookAndFeel
*
#
jdk\src\javax\swing\plaf\nimbus\SynthPainterImpl.java 204 216
Paints the background of an arrow button
Arrow buttons are created by some components, such as JScrollBar
#
jdk\src\javax\swing\plaf\nimbus\SynthPainterImpl.java 2345 2357
Paints the background of a text field
#
jdk\src\javax\swing\plaf\nimbus\SynthPainterImpl.java 632 644
Paints the background of a formatted text field
#
jdk\src\javax\swing\plaf\nimbus\SynthPainterImpl.java 454 466
Paints the background of a combo box
*
#
jdk\src\javax\swing\plaf\nimbus\SynthPainterImpl.java 657 669
Paints the border of a formatted text field
#
jdk\src\javax\swing\plaf\nimbus\SynthPainterImpl.java 2370 2382
Paints the border of a text field
*
#
jdk\src\javax\swing\plaf\nimbus\SynthPainterImpl.java 1997 2019
Paints the background of the area behind the tabs of a tabbed pane
This implementation invokes the method of the same name without the orientation
#
jdk\src\javax\swing\plaf\nimbus\SynthPainterImpl.java 2097 2119
Paints the background of a tab of a tabbed pane
This implementation invokes the method of the same name without the orientation
*
#
jdk\src\javax\swing\plaf\synth\SynthButtonUI.java 250 257
Notifies this UI delegate to repaint the specified component
This method paints the component background, then calls the paint method
#
jdk\src\javax\swing\plaf\synth\SynthTextFieldUI.java 175 182
Notifies this UI delegate to repaint the specified component
This method paints the component background, then calls the paint method
#
jdk\src\javax\swing\plaf\synth\SynthMenuItemUI.java 240 247
Notifies this UI delegate to repaint the specified component
This method paints the component background, then calls the paint method
#
jdk\src\javax\swing\plaf\synth\SynthEditorPaneUI.java 162 169
Notifies this UI delegate to repaint the specified component
This method paints the component background, then calls the paint method
*
#
jdk\src\javax\swing\plaf\synth\SynthButtonUI.java 269 274
Paints the specified component according to the Look and Feel
#
jdk\src\javax\swing\plaf\synth\SynthMenuBarUI.java 159 164
Paints the specified component according to the Look and Feel
#
jdk\src\javax\swing\plaf\synth\SynthPopupMenuUI.java 166 171
Paints the specified component according to the Look and Feel
#
jdk\src\javax\swing\plaf\synth\SynthRootPaneUI.java 136 141
Paints the specified component according to the Look and Feel
#
jdk\src\javax\swing\plaf\synth\SynthColorChooserUI.java 171 176
Paints the specified component according to the Look and Feel
#
jdk\src\javax\swing\plaf\synth\SynthOptionPaneUI.java 183 188
Paints the specified component according to the Look and Feel
#
jdk\src\javax\swing\plaf\synth\SynthTableHeaderUI.java 158 163
Paints the specified component according to the Look and Feel
#
jdk\src\javax\swing\plaf\synth\SynthInternalFrameUI.java 228 233
Paints the specified component according to the Look and Feel
#
jdk\src\javax\swing\plaf\synth\SynthSpinnerUI.java 318 323
Paints the specified component according to the Look and Feel
#
jdk\src\javax\swing\plaf\synth\SynthTableUI.java 298 303
Paints the specified component according to the Look and Feel
#
jdk\src\javax\swing\plaf\synth\SynthTabbedPaneUI.java 423 428
Paints the specified component according to the Look and Feel
#
jdk\src\javax\swing\plaf\synth\SynthSliderUI.java 785 789
Paints the specified component according to the Look and Feel
#
jdk\src\javax\swing\plaf\synth\SynthProgressBarUI.java 232 237
Paints the specified component according to the Look and Feel
#
jdk\src\javax\swing\plaf\synth\SynthScrollPaneUI.java 99 104
Paints the specified component according to the Look and Feel
#
jdk\src\javax\swing\plaf\synth\SynthViewportUI.java 201 206
Paints the specified component according to the Look and Feel
#
jdk\src\javax\swing\plaf\synth\SynthToolBarUI.java 232 237
Paints the specified component according to the Look and Feel
#
jdk\src\javax\swing\plaf\synth\SynthTreeUI.java 292 297
Paints the specified component according to the Look and Feel
#
jdk\src\javax\swing\plaf\synth\SynthPanelUI.java 170 175
Paints the specified component according to the Look and Feel
#
jdk\src\javax\swing\plaf\synth\SynthToolTipUI.java 164 169
Paints the specified component according to the Look and Feel
#
jdk\src\javax\swing\plaf\synth\SynthComboBoxUI.java 339 344
Paints the specified component according to the Look and Feel
#
jdk\src\javax\swing\plaf\synth\SynthSplitPaneUI.java 301 306
Paints the specified component according to the Look and Feel
#
jdk\src\javax\swing\plaf\synth\SynthLabelUI.java 190 195
Paints the specified component according to the Look and Feel
#
jdk\src\javax\swing\plaf\synth\SynthSeparatorUI.java 172 177
Paints the specified component according to the Look and Feel
#
jdk\src\javax\swing\plaf\synth\SynthDesktopPaneUI.java 473 478
Paints the specified component according to the Look and Feel
#
jdk\src\javax\swing\plaf\synth\SynthMenuItemUI.java 259 264
Paints the specified component according to the Look and Feel
#
jdk\src\javax\swing\plaf\synth\SynthDesktopIconUI.java 185 190
Paints the specified component according to the Look and Feel
#
jdk\src\javax\swing\plaf\synth\SynthMenuUI.java 259 264
Paints the specified component according to the Look and Feel
#
jdk\src\javax\swing\plaf\synth\SynthScrollBarUI.java 258 263
Paints the specified component according to the Look and Feel
*
#
jdk\src\javax\swing\plaf\synth\SynthEditorPaneUI.java 109 114
This method gets called when a bound property is changed on the associated JTextComponent
This is a hook which UI implementations may change to reflect how the UI displays bound properties of JTextComponent subclasses
This is implemented to rebuild the ActionMap based upon an EditorKit change
#
jdk\src\javax\swing\plaf\synth\SynthTextFieldUI.java 235 240
This method gets called when a bound property is changed on the associated JTextComponent
This is a hook which UI implementations may change to reflect how the UI displays bound properties of JTextComponent subclasses
This is implemented to do nothing (i.e
the response to properties in JTextComponent itself are handled prior to calling this method)
#
jdk\src\javax\swing\plaf\synth\SynthTextAreaUI.java 188 193
This method gets called when a bound property is changed on the associated JTextComponent
This is a hook which UI implementations may change to reflect how the UI displays bound properties of JTextComponent subclasses
This is implemented to rebuild the View when the WrapLine or the WrapStyleWord property changes
*
#
jdk\src\javax\swing\plaf\synth\SynthMenuItemUI.java 273 284
Paints the specified component
#
jdk\src\javax\swing\plaf\synth\SynthMenuUI.java 273 283
Paints the specified component
This implementation does nothing
*
#
jdk\src\javax\swing\plaf\synth\SynthToolTipUI.java 78 83
#
jdk\src\javax\swing\plaf\synth\SynthViewportUI.java 128 133
Uninstalls defaults from a viewport
*
#
jdk\src\javax\swing\text\AsyncBoxView.java 403 413
Loads all of the children to initialize the view
The default implementation creates a child view for each child element
Normally a write-lock is held on the Document while the children are being changed, which keeps the rendering and layout threads safe
The exception to this is when the view is initialized to represent an existing element (via this method), so it is synchronized to exclude preferenceChanged while we are initializing
#
jdk\src\javax\swing\text\WrappedPlainView.java 260 270
Loads all of the children to initialize the view
The default implementation creates a child view for each child element
*
#
jdk\src\javax\swing\text\ComponentView.java 329 341
Provides a mapping from the coordinate space of the model to that of the view
Returns the bounding box of the given position is returned
Throws BadLocationException if the given position does not represent a valid location in the associated document
#
jdk\src\javax\swing\text\IconView.java 130 142
Provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it
Returns the bounding box of the given position
Throws BadLocationException if the given position does not represent a valid location in the associated document
*
#
jdk\src\javax\swing\text\ComponentView.java 354 362
Provides a mapping from the view coordinate space to the logical coordinate space of the model
Returns the location within the model that best represents the given point in the view
#
jdk\src\javax\swing\text\html\HRuleView.java 277 285
Provides a mapping from the view coordinate space to the logical coordinate space of the model
Returns the location within the model that best represents the given point of view
#
jdk\src\javax\swing\text\IconView.java 155 163
Provides a mapping from the view coordinate space to the logical coordinate space of the model
Returns the location within the model that best represents the given point of view &gt;= 0
*
#
jdk\src\javax\swing\text\DefaultEditorKit.java 971 980
The operation to perform when this action is triggered
#
jdk\src\javax\swing\text\DefaultEditorKit.java 1013 1022
The operation to perform when this action is triggered
*
#
jdk\src\javax\swing\text\DefaultEditorKit.java 1745 1760
The operation to perform when this action is triggered
#
jdk\src\javax\swing\text\DefaultEditorKit.java 1949 1964
The operation to perform when this action is triggered
*
#
jdk\src\javax\swing\text\DefaultEditorKit.java 1785 1800
The operation to perform when this action is triggered
#
jdk\src\javax\swing\text\DefaultEditorKit.java 1989 2004
The operation to perform when this action is triggered
*
#
jdk\src\javax\swing\text\DefaultEditorKit.java 2029 2041
The operation to perform when this action is triggered
#
jdk\src\javax\swing\text\DefaultEditorKit.java 2066 2079
The operation to perform when this action is triggered
*
#
jdk\src\javax\swing\text\EditorKit.java 63 71
Creates a copy of the editor kit
This is implemented to use Object.clone()
If the kit cannot be cloned, null is returned
Returns the copy
#
jdk\src\javax\swing\text\Segment.java 303 311
Creates a shallow copy
Returns the copy
*
#
jdk\src\javax\swing\text\FlowView.java 392 402
Gives notification that something was removed from the document in a location that the given flow view is responsible for
#
jdk\src\javax\swing\text\FlowView.java 414 424
Gives notification from the document that attributes were changed in a location that this view is responsible for
*
#
jdk\src\javax\swing\text\JTextComponent.java 2579 2592
Handles document insert (fire appropriate property change event which is AccessibleContext.ACCESSIBLE_TEXT_PROPERTY)
This tracks the changed offset via the event
#
jdk\src\javax\swing\text\JTextComponent.java 2601 2614
Handles document remove (fire appropriate property change event, which is AccessibleContext.ACCESSIBLE_TEXT_PROPERTY)
This tracks the changed offset via the event
#
jdk\src\javax\swing\text\JTextComponent.java 2623 2636
Handles document remove (fire appropriate property change event, which is AccessibleContext.ACCESSIBLE_TEXT_PROPERTY)
This tracks the changed offset via the event
*
#
jdk\src\javax\swing\text\JTextComponent.java 2933 2989
Gets the word, sentence, or character at index
If direction is non-null this will find the next/previous word/sentence/character
#
jdk\src\javax\swing\text\html\AccessibleHTML.java 1011 1066
Gets the word, sentence, or character at index
If direction is non-null this will find the next/previous word/sentence/character
*
#
jdk\src\javax\swing\text\JTextComponent.java 3048 3083
Returns the Segment at index representing either the paragraph or sentence as identified by part , or null if a valid paragraph/sentence can't be found
The offset will point to the start of the word/sentence in the array, and the modelOffset will point to the location of the word/sentence in the model
#
jdk\src\javax\swing\text\html\AccessibleHTML.java 1124 1160
Returns the Segment at index representing either the paragraph or sentence as identified by part , or null if a valid paragraph/sentence can't be found
The offset will point to the start of the word/sentence in the array, and the modelOffset will point to the location of the word/sentence in the model
*
#
jdk\src\javax\swing\text\PlainView.java 56 60
Returns the tab size set for the document, defaulting to 8
Returns the tab size
#
jdk\src\javax\swing\text\WrappedPlainView.java 83 87
Returns the tab size set for the document, defaulting to 8
Returns the tab size
*
#
jdk\src\javax\swing\text\PlainView.java 190 195
Gives access to a buffer that can be used to fetch text from the associated document
Returns the buffer
#
jdk\src\javax\swing\text\WrappedPlainView.java 217 222
Gives access to a buffer that can be used to fetch text from the associated document
Returns the buffer
*
#
jdk\src\javax\swing\text\StyleContext.java 970 980
Checks whether the attribute set contains all of the given attributes
Returns true if the element contains all the attributes
#
jdk\src\javax\swing\text\html\MuxingAttributeSet.java 239 249
Checks whether the attribute set contains all of the given attributes
Returns true if the element contains all the attributes
*
#
jdk\src\javax\swing\text\TableView.java 331 347
Perform layout for the minor axis of the box
The results of the layout should be placed in the given arrays which represent the allocations to the children along the minor axis
This is implemented to call the layoutColumns layoutColumns method, and then forward to the superclass to actually carry out the layout of the tables rows
#
jdk\src\javax\swing\text\html\TableView.java 645 661
Perform layout for the minor axis of the box
The results of the layout should be placed in the given arrays which represent the allocations to the children along the minor axis
This is implemented to call the layoutColumns layoutColumns method, and then forward to the superclass to actually carry out the layout of the tables rows
Returns the offset and span for each child view in the offsets and spans parameters
*
#
jdk\src\javax\swing\text\TableView.java 472 536
check the requirements of a table cell that spans multiple columns
#
jdk\src\javax\swing\text\html\TableView.java 469 528
check the requirements of a table cell that spans multiple columns
*
#
jdk\src\javax\swing\text\TableView.java 551 573
Fetches the child view that represents the given position in the model
This is implemented to walk through the children looking for a range that contains the given position
In this view the children do not necessarily have a one to one mapping with the child elements
Returns the view representing the given position, or null if there isn't one
#
jdk\src\javax\swing\text\html\TableView.java 719 741
Fetches the child view that represents the given position in the model
This is implemented to walk through the children looking for a range that contains the given position
In this view the children do not necessarily have a one to one mapping with the child elements
Returns the view representing the given position, or null if there isn't one
#
jdk\src\javax\swing\text\html\TableView.java 1633 1655
Fetches the child view that represents the given position in the model
This is implemented to walk through the children looking for a range that contains the given position
In this view the children do not necessarily have a one to one mapping with the child elements
Returns the view representing the given position, or null if there isn't one
#
jdk\src\javax\swing\text\TableView.java 764 786
Fetches the child view that represents the given position in the model
This is implemented to walk through the children looking for a range that contains the given position
In this view the children do not necessarily have a one to one mapping with the child elements
Returns the view representing the given position, or null if there isn't one
*
#
jdk\src\javax\swing\text\TableView.java 628 637
The number of columns present in this row
#
jdk\src\javax\swing\text\html\TableView.java 1330 1339
The number of columns present in this row
*
#
jdk\src\javax\swing\text\View.java 699 713
Gives notification that something was inserted into the document in a location that this view is responsible for
To reduce the burden to subclasses, this functionality is spread out into the following calls that subclasses can reimplement: updateChildren updateChildren is called if there were any changes to the element this view is responsible for
If this view has child views that are represent the child elements, then this method should do whatever is necessary to make sure the child views correctly represent the model
forwardUpdate forwardUpdate is called to forward the DocumentEvent to the appropriate child views
updateLayout updateLayout is called to give the view a chance to either repair its layout, to reschedule layout, or do nothing
#
jdk\src\javax\swing\text\View.java 781 795
Gives notification from the document that attributes were changed in a location that this view is responsible for
To reduce the burden to subclasses, this functionality is spread out into the following calls that subclasses can reimplement: updateChildren updateChildren is called if there were any changes to the element this view is responsible for
If this view has child views that are represent the child elements, then this method should do whatever is necessary to make sure the child views correctly represent the model
forwardUpdate forwardUpdate is called to forward the DocumentEvent to the appropriate child views
updateLayout updateLayout is called to give the view a chance to either repair its layout, to reschedule layout, or do nothing
#
jdk\src\javax\swing\text\View.java 740 754
Gives notification that something was removed from the document in a location that this view is responsible for
To reduce the burden to subclasses, this functionality is spread out into the following calls that subclasses can reimplement: updateChildren updateChildren is called if there were any changes to the element this view is responsible for
If this view has child views that are represent the child elements, then this method should do whatever is necessary to make sure the child views correctly represent the model
forwardUpdate forwardUpdate is called to forward the DocumentEvent to the appropriate child views
updateLayout updateLayout is called to give the view a chance to either repair its layout, to reschedule layout, or do nothing
*
#
jdk\src\javax\swing\text\html\AccessibleHTML.java 169 173
Releases a lock previously obtained via lock
#
jdk\src\javax\swing\text\html\HTMLEditorKit.java 2188 2192
*
#
jdk\src\javax\swing\text\html\AccessibleHTML.java 249 255
Gets the accessibleName property of this object
The accessibleName property of an object is a localized String that designates the purpose of the object
In the case of an object that doesn't display its name, the accessibleName should still be set
Returns the localized name of the object; null if this object does not have a name
#
jdk\src\javax\swing\text\html\AccessibleHTML.java 866 872
Gets the accessibleName property of this object
The accessibleName property of an object is a localized String that designates the purpose of the object
In the case of an object that doesn't display its name, the accessibleName should still be set
Returns the localized name of the object; null if this object does not have a name
*
#
jdk\src\javax\swing\text\html\BlockView.java 279 283
Renders using the given rendering surface and area on that surface
This is implemented to delegate to the css box painter to paint the border and background prior to the interior
allocation is the allocated region to render into
#
jdk\src\javax\swing\text\html\TableView.java 1462 1466
Renders using the given rendering surface and area on that surface
This is implemented to delegate to the css box painter to paint the border and background prior to the interior
allocation is the allocated region to render into
*
#
jdk\src\javax\swing\text\html\BlockView.java 290 296
Fetches the attributes to use when rendering
This is implemented to multiplex the attributes specified in the model with a StyleSheet
#
jdk\src\javax\swing\text\html\TableView.java 750 756
Fetches the attributes to use when rendering
This is implemented to multiplex the attributes specified in the model with a StyleSheet
#
jdk\src\javax\swing\text\html\ParagraphView.java 86 92
Fetches the attributes to use when rendering
This is implemented to multiplex the attributes specified in the model with a StyleSheet
*
#
jdk\src\javax\swing\text\html\BlockView.java 305 314
Gets the resize weight
Returns the weight
Throws IllegalArgumentException for an invalid axis
#
jdk\src\javax\swing\text\html\LineView.java 83 92
Gets the resize weight for the specified axis
Returns the weight
*
#
jdk\src\javax\swing\text\html\HRuleView.java 252 264
Provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it
Returns the bounding box of the given position
Throws BadLocationException if the given position does not represent a valid location in the associated document
#
jdk\src\javax\swing\text\html\ImageView.java 518 530
Provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it
Returns the bounding box of the given position
Throws BadLocationException if the given position does not represent a valid location in the associated document
*
#
jdk\src\javax\swing\text\html\HTMLDocument.java 768 777
Returns true if StyleConstants.NameAttribute is equal to the tag that is passed in as a parameter
Returns true if there is a match, false otherwise
#
jdk\src\javax\swing\text\html\HTMLWriter.java 686 695
Returns true if the StyleConstants.NameAttribute is equal to the tag that is passed in as a parameter
*
#
jdk\src\javax\swing\text\html\HTMLDocument.java 4119 4125
Gets the name of the element
Returns the name, null if none
#
jdk\src\javax\swing\text\html\HTMLDocument.java 4162 4168
Gets the name of the element
Returns the name, null if none
*
#
jdk\src\javax\swing\text\html\StyleSheet.java 788 797
Checks whether a given attribute is defined
Returns true if the attribute is defined
#
jdk\src\javax\swing\text\html\StyleSheet.java 844 853
Checks whether a given attribute is defined
Returns true if the attribute is defined
*
#
jdk\src\javax\swing\text\html\StyleSheet.java 806 819
Gets the value of an attribute
Returns the attribute value
#
jdk\src\javax\swing\text\html\StyleSheet.java 862 875
Gets the value of an attribute
Returns the attribute value
*
#
jdk\src\javax\swing\tree\FixedHeightLayoutCache.java 1538 1542
Determines the next object by invoking updateNextIndex and if not succesful findNextValidParent
#
jdk\src\javax\swing\tree\VariableHeightLayoutCache.java 1707 1711
Determines the next object by invoking updateNextIndex and if not succesful findNextValidParent
*
#
jdk\src\javax\xml\bind\helpers\AbstractMarshallerImpl.java 399 407
#
jdk\src\javax\xml\bind\helpers\AbstractUnmarshallerImpl.java 258 266
Allow an application to register a validation event handler
The validation event handler will be called by the JAXB Provider if any validation errors are encountered during calls to any of the unmarshal methods
If the client application does not register a validation event handler before invoking the unmarshal methods, then all validation events will be silently ignored and may result in unexpected behaviour
handler is the validation event handler
Throws JAXBException if an error was encountered while setting the event handler
*
#
jdk\src\javax\xml\crypto\dsig\TransformException.java 124 129
Prints this TransformException , its backtrace and the cause's backtrace to the standard error stream
#
jdk\src\javax\xml\crypto\dsig\XMLSignatureException.java 121 126
Prints this XMLSignatureException , its backtrace and the cause's backtrace to the standard error stream
*
#
jdk\src\javax\xml\crypto\dsig\TransformException.java 137 142
Prints this TransformException , its backtrace and the cause's backtrace to the specified print stream
s is PrintStream to use for output
#
jdk\src\javax\xml\crypto\dsig\XMLSignatureException.java 134 139
Prints this XMLSignatureException , its backtrace and the cause's backtrace to the specified print stream
*
#
jdk\src\javax\xml\crypto\dsig\TransformException.java 150 155
Prints this TransformException , its backtrace and the cause's backtrace to the specified print writer
s is PrintWriter to use for output
#
jdk\src\javax\xml\crypto\dsig\XMLSignatureException.java 147 152
Prints this XMLSignatureException , its backtrace and the cause's backtrace to the specified print writer
s is PrintWriter to use for output
*
#
jdk\src\javax\xml\datatype\FactoryFinder.java 100 130
Attempt to load a class using the class loader supplied
If that fails and fall back is enabled, the current class loader is tried
If the class loader supplied is null , first try using the context class loader followed by the current class loader
Use bootstrap classLoader if cl = null and useBSClsLoader is true
#
jdk\src\javax\xml\stream\FactoryFinder.java 101 131
Attempt to load a class using the class loader supplied
If that fails and fall back is enabled, the current class loader is tried
If the class loader supplied is null , first try using the context class loader followed by the current class loader
Use bootstrap classLoader if cl = null and useBSClsLoader is true
#
jdk\src\javax\xml\transform\FactoryFinder.java 103 133
Attempt to load a class using the class loader supplied
If that fails and fall back is enabled, the current class loader is tried
If the class loader supplied is null , first try using the context class loader followed by the current class loader
Use bootstrap classLoader if cl = null and useBSClsLoader is true
#
jdk\src\javax\xml\parsers\FactoryFinder.java 100 130
Attempt to load a class using the class loader supplied
If that fails and fall back is enabled, the current class loader is tried
If the class loader supplied is null , first try using the context class loader followed by the current class loader
Use bootstrap classLoader if cl = null and useBSClsLoader is true
*
#
jdk\src\javax\xml\datatype\FactoryFinder.java 173 208
Create an instance of a class
Delegates to method getProviderClass() in order to load the class
#
jdk\src\javax\xml\stream\FactoryFinder.java 174 209
Create an instance of a class
Delegates to method getProviderClass() in order to load the class
#
jdk\src\javax\xml\parsers\FactoryFinder.java 174 207
Create an instance of a class
Delegates to method getProviderClass() in order to load the class
#
jdk\src\javax\xml\transform\FactoryFinder.java 152 188
Create an instance of a class
Delegates to method getProviderClass() in order to load the class
*
#
jdk\src\javax\xml\datatype\FactoryFinder.java 222 279
Finds the implementation Class object in the specified order
Main entry point
Returns Class object of factory, never null
Use null to mean no fallback
#
jdk\src\javax\xml\parsers\FactoryFinder.java 221 278
Finds the implementation Class object in the specified order
Main entry point
Returns Class object of factory, never null
Use null to mean no fallback
#
jdk\src\javax\xml\transform\FactoryFinder.java 203 262
Finds the implementation Class object in the specified order
Main entry point
Returns Class object of factory, never null
Use null to mean no fallback
*
#
jdk\src\javax\xml\soap\AttachmentPart.java 369 374
Gets the value of the MIME header whose name is "Content-Location"
Returns a String giving the value of the "Content-Location" header or null if there is none
#
jdk\src\javax\xml\soap\SOAPPart.java 102 107
Retrieves the value of the MIME header whose name is "Content-Location"
Returns a String giving the value of the MIME header whose name is "Content-Location"
*
#
jdk\src\javax\xml\soap\FactoryFinder.java 203 228
Loads the class, provided that the calling thread has an access to the class being loaded
If this is the specified default factory class and it is restricted by package.access we get a SecurityException and can do a Class.forName() on it so it will be loaded by the bootstrap class loader
#
jdk\src\javax\xml\ws\spi\FactoryFinder.java 167 188
Loads the class, provided that the calling thread has an access to the class being loaded
*
#
jdk\src\javax\xml\validation\SchemaFactoryFinder.java 80 84
Conditional debug printing
msg is to print
#
jdk\src\javax\xml\xpath\XPathFactoryFinder.java 75 79
Conditional debug printing
msg is to print
*
#
jdk\src\javax\xml\validation\SchemaFactoryFinder.java 244 268
Create class using appropriate ClassLoader
Returns Created class or null
#
jdk\src\javax\xml\xpath\XPathFactoryFinder.java 237 262
Create class using appropriate ClassLoader
Returns Created class or null
*
#
jdk\src\javax\xml\validation\SchemaFactoryFinder.java 382 395
Search the specified classloader for the given classname
Returns the source location of the resource, or null if it wasn't found
#
jdk\src\javax\xml\xpath\XPathFactoryFinder.java 374 387
Search the specified classloader for the given classname
Returns the source location of the resource, or null if it wasn't found
-
