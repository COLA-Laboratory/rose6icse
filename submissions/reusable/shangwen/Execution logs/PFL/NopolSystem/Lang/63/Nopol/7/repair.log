cd /tmp/Nopol_Defects4J_Lang_63;
export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en";
TZ="America/New_York"; export TZ;
export PATH="/home/wp/tool/jdk1.8.0_71/bin/:$PATH";
export JAVA_HOME="/home/wp/tool/jdk1.8.0_71/bin/";
time java -Xmx1g -Xms1g -cp /home/wp/RepairThemAll/script/../repair_tools/nopol.jar:/home/wp/tool/jdk1.8.0_71/bin//../lib/tools.jar fr.inria.lille.repair.Main \
	--mode repair \
	--type pre_then_cond \
	--bugid Lang-63 \
	--oracle angelic \
	--synthesis smt \
	--flocal gzoltar \
	--json \
	--solver z3 \
	--solver-path /home/wp/RepairThemAll/script/../libs/z3/build/z3 \
	--complianceLevel 3 \
	--source src/java/ \
	--classpath "target/classes/:target/tests/:/tmp/Nopol_Defects4J_Lang_63/target/classes/:/tmp/Nopol_Defects4J_Lang_63/target/tests/:/home/wp/RepairThemAll/script/../benchmarks/defects4j/framework/projects/Lang/lib/asm.jar:/home/wp/RepairThemAll/script/../benchmarks/defects4j/framework/projects/Lang/lib/easymock.jar:/home/wp/RepairThemAll/script/../benchmarks/defects4j/framework/projects/Lang/lib/commons-io.jar:/home/wp/RepairThemAll/script/../benchmarks/defects4j/framework/projects/Lang/lib/cglib.jar:/home/wp/RepairThemAll/script/../benchmarks/defects4j/framework/projects/lib/junit-4.11.jar:/home/wp/RepairThemAll/script/../repair_tools/nopol.jar";
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en
23:57:43.175 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Source files: [src/java]
23:57:43.186 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Classpath: [file:/tmp/Nopol_Defects4J_Lang_63/target/classes/, file:/tmp/Nopol_Defects4J_Lang_63/target/tests/, file:/tmp/Nopol_Defects4J_Lang_63/target/classes/, file:/tmp/Nopol_Defects4J_Lang_63/target/tests/, file:/home/wp/RepairThemAll/script/../benchmarks/defects4j/framework/projects/Lang/lib/asm.jar, file:/home/wp/RepairThemAll/script/../benchmarks/defects4j/framework/projects/Lang/lib/easymock.jar, file:/home/wp/RepairThemAll/script/../benchmarks/defects4j/framework/projects/Lang/lib/commons-io.jar, file:/home/wp/RepairThemAll/script/../benchmarks/defects4j/framework/projects/Lang/lib/cglib.jar, file:/home/wp/RepairThemAll/script/../benchmarks/defects4j/framework/projects/lib/junit-4.11.jar, file:/home/wp/RepairThemAll/script/../repair_tools/nopol.jar]
23:57:43.186 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Statement type: PRE_THEN_COND
23:57:43.187 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Args: [org.apache.commons.lang.ArrayUtilsAddTest, org.apache.commons.lang.ArrayUtilsAddTest, org.apache.commons.lang.ArrayUtilsRemoveTest, org.apache.commons.lang.ArrayUtilsRemoveTest, org.apache.commons.lang.ArrayUtilsTest, org.apache.commons.lang.ArrayUtilsTest, org.apache.commons.lang.BitFieldTest, org.apache.commons.lang.BitFieldTest, org.apache.commons.lang.BooleanUtilsTest, org.apache.commons.lang.BooleanUtilsTest, org.apache.commons.lang.CharEncodingTest, org.apache.commons.lang.CharEncodingTest, org.apache.commons.lang.CharRangeTest, org.apache.commons.lang.CharRangeTest, org.apache.commons.lang.CharSetTest, org.apache.commons.lang.CharSetTest, org.apache.commons.lang.CharSetUtilsTest, org.apache.commons.lang.CharSetUtilsTest, org.apache.commons.lang.CharUtilsTest, org.apache.commons.lang.CharUtilsTest, org.apache.commons.lang.ClassUtilsTest, org.apache.commons.lang.ClassUtilsTest, org.apache.commons.lang.EntitiesPerformanceTest, org.apache.commons.lang.EntitiesPerformanceTest, org.apache.commons.lang.EntitiesTest, org.apache.commons.lang.EntitiesTest, org.apache.commons.lang.IllegalClassExceptionTest, org.apache.commons.lang.IllegalClassExceptionTest, org.apache.commons.lang.IncompleteArgumentExceptionTest, org.apache.commons.lang.IncompleteArgumentExceptionTest, org.apache.commons.lang.IntHashMapTest, org.apache.commons.lang.IntHashMapTest, org.apache.commons.lang.LocaleUtilsTest, org.apache.commons.lang.LocaleUtilsTest, org.apache.commons.lang.NotImplementedExceptionTest, org.apache.commons.lang.NotImplementedExceptionTest, org.apache.commons.lang.NullArgumentExceptionTest, org.apache.commons.lang.NullArgumentExceptionTest, org.apache.commons.lang.NumberRangeTest, org.apache.commons.lang.NumberRangeTest, org.apache.commons.lang.NumberUtilsTest, org.apache.commons.lang.NumberUtilsTest, org.apache.commons.lang.ObjectUtilsTest, org.apache.commons.lang.ObjectUtilsTest, org.apache.commons.lang.RandomStringUtilsTest, org.apache.commons.lang.RandomStringUtilsTest, org.apache.commons.lang.SerializationUtilsTest, org.apache.commons.lang.SerializationUtilsTest, org.apache.commons.lang.StringEscapeUtilsTest, org.apache.commons.lang.StringEscapeUtilsTest, org.apache.commons.lang.StringUtilsEqualsIndexOfTest, org.apache.commons.lang.StringUtilsEqualsIndexOfTest, org.apache.commons.lang.StringUtilsIsTest, org.apache.commons.lang.StringUtilsIsTest, org.apache.commons.lang.StringUtilsSubstringTest, org.apache.commons.lang.StringUtilsSubstringTest, org.apache.commons.lang.StringUtilsTest, org.apache.commons.lang.StringUtilsTest, org.apache.commons.lang.StringUtilsTrimEmptyTest, org.apache.commons.lang.StringUtilsTrimEmptyTest, org.apache.commons.lang.SystemUtilsTest, org.apache.commons.lang.SystemUtilsTest, org.apache.commons.lang.UnhandledExceptionTest, org.apache.commons.lang.UnhandledExceptionTest, org.apache.commons.lang.ValidateTest, org.apache.commons.lang.ValidateTest, org.apache.commons.lang.WordUtilsTest, org.apache.commons.lang.WordUtilsTest, org.apache.commons.lang.builder.CompareToBuilderTest, org.apache.commons.lang.builder.CompareToBuilderTest, org.apache.commons.lang.builder.DefaultToStringStyleTest, org.apache.commons.lang.builder.DefaultToStringStyleTest, org.apache.commons.lang.builder.EqualsBuilderTest, org.apache.commons.lang.builder.EqualsBuilderTest, org.apache.commons.lang.builder.HashCodeBuilderAndEqualsBuilderTest, org.apache.commons.lang.builder.HashCodeBuilderAndEqualsBuilderTest, org.apache.commons.lang.builder.HashCodeBuilderTest, org.apache.commons.lang.builder.HashCodeBuilderTest, org.apache.commons.lang.builder.MultiLineToStringStyleTest, org.apache.commons.lang.builder.MultiLineToStringStyleTest, org.apache.commons.lang.builder.NoFieldNamesToStringStyleTest, org.apache.commons.lang.builder.NoFieldNamesToStringStyleTest, org.apache.commons.lang.builder.ReflectionToStringBuilderExcludeTest, org.apache.commons.lang.builder.ReflectionToStringBuilderExcludeTest, org.apache.commons.lang.builder.ShortPrefixToStringStyleTest, org.apache.commons.lang.builder.ShortPrefixToStringStyleTest, org.apache.commons.lang.builder.SimpleToStringStyleTest, org.apache.commons.lang.builder.SimpleToStringStyleTest, org.apache.commons.lang.builder.StandardToStringStyleTest, org.apache.commons.lang.builder.StandardToStringStyleTest, org.apache.commons.lang.builder.ToStringBuilderTest, org.apache.commons.lang.builder.ToStringBuilderTest, org.apache.commons.lang.builder.ToStringStyleTest, org.apache.commons.lang.builder.ToStringStyleTest, org.apache.commons.lang.enum.EnumTest, org.apache.commons.lang.enum.EnumTest, org.apache.commons.lang.enum.EnumUtilsTest, org.apache.commons.lang.enum.EnumUtilsTest, org.apache.commons.lang.enum.ValuedEnumTest, org.apache.commons.lang.enum.ValuedEnumTest, org.apache.commons.lang.enums.EnumEqualsTest, org.apache.commons.lang.enums.EnumEqualsTest, org.apache.commons.lang.enums.EnumTest, org.apache.commons.lang.enums.EnumTest, org.apache.commons.lang.enums.EnumUtilsTest, org.apache.commons.lang.enums.EnumUtilsTest, org.apache.commons.lang.enums.ValuedEnumTest, org.apache.commons.lang.enums.ValuedEnumTest, org.apache.commons.lang.exception.ExceptionUtilsTestCase, org.apache.commons.lang.exception.ExceptionUtilsTestCase, org.apache.commons.lang.exception.NestableDelegateTestCase, org.apache.commons.lang.exception.NestableDelegateTestCase, org.apache.commons.lang.exception.NestableErrorTestCase, org.apache.commons.lang.exception.NestableErrorTestCase, org.apache.commons.lang.exception.NestableExceptionTestCase, org.apache.commons.lang.exception.NestableExceptionTestCase, org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase, org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase, org.apache.commons.lang.math.DoubleRangeTest, org.apache.commons.lang.math.DoubleRangeTest, org.apache.commons.lang.math.FloatRangeTest, org.apache.commons.lang.math.FloatRangeTest, org.apache.commons.lang.math.FractionTest, org.apache.commons.lang.math.FractionTest, org.apache.commons.lang.math.IntRangeTest, org.apache.commons.lang.math.IntRangeTest, org.apache.commons.lang.math.LongRangeTest, org.apache.commons.lang.math.LongRangeTest, org.apache.commons.lang.math.NumberRangeTest, org.apache.commons.lang.math.NumberRangeTest, org.apache.commons.lang.math.NumberUtilsTest, org.apache.commons.lang.math.NumberUtilsTest, org.apache.commons.lang.math.RandomUtilsTest, org.apache.commons.lang.math.RandomUtilsTest, org.apache.commons.lang.math.RangeTest, org.apache.commons.lang.math.RangeTest, org.apache.commons.lang.mutable.MutableBooleanTest, org.apache.commons.lang.mutable.MutableBooleanTest, org.apache.commons.lang.mutable.MutableByteTest, org.apache.commons.lang.mutable.MutableByteTest, org.apache.commons.lang.mutable.MutableDoubleTest, org.apache.commons.lang.mutable.MutableDoubleTest, org.apache.commons.lang.mutable.MutableFloatTest, org.apache.commons.lang.mutable.MutableFloatTest, org.apache.commons.lang.mutable.MutableIntTest, org.apache.commons.lang.mutable.MutableIntTest, org.apache.commons.lang.mutable.MutableLongTest, org.apache.commons.lang.mutable.MutableLongTest, org.apache.commons.lang.mutable.MutableObjectTest, org.apache.commons.lang.mutable.MutableObjectTest, org.apache.commons.lang.mutable.MutableShortTest, org.apache.commons.lang.mutable.MutableShortTest, org.apache.commons.lang.text.CompositeFormatTest, org.apache.commons.lang.text.CompositeFormatTest, org.apache.commons.lang.text.StrBuilderAppendInsertTest, org.apache.commons.lang.text.StrBuilderAppendInsertTest, org.apache.commons.lang.text.StrBuilderTest, org.apache.commons.lang.text.StrBuilderTest, org.apache.commons.lang.text.StrLookupTest, org.apache.commons.lang.text.StrLookupTest, org.apache.commons.lang.text.StrMatcherTest, org.apache.commons.lang.text.StrMatcherTest, org.apache.commons.lang.text.StrSubstitutorTest, org.apache.commons.lang.text.StrSubstitutorTest, org.apache.commons.lang.text.StrTokenizerTest, org.apache.commons.lang.text.StrTokenizerTest, org.apache.commons.lang.time.DateFormatUtilsTest, org.apache.commons.lang.time.DateFormatUtilsTest, org.apache.commons.lang.time.DateUtilsTest, org.apache.commons.lang.time.DateUtilsTest, org.apache.commons.lang.time.DurationFormatUtilsTest, org.apache.commons.lang.time.DurationFormatUtilsTest, org.apache.commons.lang.time.FastDateFormatTest, org.apache.commons.lang.time.FastDateFormatTest, org.apache.commons.lang.time.StopWatchTest, org.apache.commons.lang.time.StopWatchTest]
23:57:43.189 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=true, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='/home/wp/RepairThemAll/script/../libs/z3/build/z3', projectSources=[src/java], projectClasspath='[Ljava.net.URL;@2a18f23c', projectTests=[org.apache.commons.lang.ArrayUtilsAddTest, org.apache.commons.lang.ArrayUtilsAddTest, org.apache.commons.lang.ArrayUtilsRemoveTest, org.apache.commons.lang.ArrayUtilsRemoveTest, org.apache.commons.lang.ArrayUtilsTest, org.apache.commons.lang.ArrayUtilsTest, org.apache.commons.lang.BitFieldTest, org.apache.commons.lang.BitFieldTest, org.apache.commons.lang.BooleanUtilsTest, org.apache.commons.lang.BooleanUtilsTest, org.apache.commons.lang.CharEncodingTest, org.apache.commons.lang.CharEncodingTest, org.apache.commons.lang.CharRangeTest, org.apache.commons.lang.CharRangeTest, org.apache.commons.lang.CharSetTest, org.apache.commons.lang.CharSetTest, org.apache.commons.lang.CharSetUtilsTest, org.apache.commons.lang.CharSetUtilsTest, org.apache.commons.lang.CharUtilsTest, org.apache.commons.lang.CharUtilsTest, org.apache.commons.lang.ClassUtilsTest, org.apache.commons.lang.ClassUtilsTest, org.apache.commons.lang.EntitiesPerformanceTest, org.apache.commons.lang.EntitiesPerformanceTest, org.apache.commons.lang.EntitiesTest, org.apache.commons.lang.EntitiesTest, org.apache.commons.lang.IllegalClassExceptionTest, org.apache.commons.lang.IllegalClassExceptionTest, org.apache.commons.lang.IncompleteArgumentExceptionTest, org.apache.commons.lang.IncompleteArgumentExceptionTest, org.apache.commons.lang.IntHashMapTest, org.apache.commons.lang.IntHashMapTest, org.apache.commons.lang.LocaleUtilsTest, org.apache.commons.lang.LocaleUtilsTest, org.apache.commons.lang.NotImplementedExceptionTest, org.apache.commons.lang.NotImplementedExceptionTest, org.apache.commons.lang.NullArgumentExceptionTest, org.apache.commons.lang.NullArgumentExceptionTest, org.apache.commons.lang.NumberRangeTest, org.apache.commons.lang.NumberRangeTest, org.apache.commons.lang.NumberUtilsTest, org.apache.commons.lang.NumberUtilsTest, org.apache.commons.lang.ObjectUtilsTest, org.apache.commons.lang.ObjectUtilsTest, org.apache.commons.lang.RandomStringUtilsTest, org.apache.commons.lang.RandomStringUtilsTest, org.apache.commons.lang.SerializationUtilsTest, org.apache.commons.lang.SerializationUtilsTest, org.apache.commons.lang.StringEscapeUtilsTest, org.apache.commons.lang.StringEscapeUtilsTest, org.apache.commons.lang.StringUtilsEqualsIndexOfTest, org.apache.commons.lang.StringUtilsEqualsIndexOfTest, org.apache.commons.lang.StringUtilsIsTest, org.apache.commons.lang.StringUtilsIsTest, org.apache.commons.lang.StringUtilsSubstringTest, org.apache.commons.lang.StringUtilsSubstringTest, org.apache.commons.lang.StringUtilsTest, org.apache.commons.lang.StringUtilsTest, org.apache.commons.lang.StringUtilsTrimEmptyTest, org.apache.commons.lang.StringUtilsTrimEmptyTest, org.apache.commons.lang.SystemUtilsTest, org.apache.commons.lang.SystemUtilsTest, org.apache.commons.lang.UnhandledExceptionTest, org.apache.commons.lang.UnhandledExceptionTest, org.apache.commons.lang.ValidateTest, org.apache.commons.lang.ValidateTest, org.apache.commons.lang.WordUtilsTest, org.apache.commons.lang.WordUtilsTest, org.apache.commons.lang.builder.CompareToBuilderTest, org.apache.commons.lang.builder.CompareToBuilderTest, org.apache.commons.lang.builder.DefaultToStringStyleTest, org.apache.commons.lang.builder.DefaultToStringStyleTest, org.apache.commons.lang.builder.EqualsBuilderTest, org.apache.commons.lang.builder.EqualsBuilderTest, org.apache.commons.lang.builder.HashCodeBuilderAndEqualsBuilderTest, org.apache.commons.lang.builder.HashCodeBuilderAndEqualsBuilderTest, org.apache.commons.lang.builder.HashCodeBuilderTest, org.apache.commons.lang.builder.HashCodeBuilderTest, org.apache.commons.lang.builder.MultiLineToStringStyleTest, org.apache.commons.lang.builder.MultiLineToStringStyleTest, org.apache.commons.lang.builder.NoFieldNamesToStringStyleTest, org.apache.commons.lang.builder.NoFieldNamesToStringStyleTest, org.apache.commons.lang.builder.ReflectionToStringBuilderExcludeTest, org.apache.commons.lang.builder.ReflectionToStringBuilderExcludeTest, org.apache.commons.lang.builder.ShortPrefixToStringStyleTest, org.apache.commons.lang.builder.ShortPrefixToStringStyleTest, org.apache.commons.lang.builder.SimpleToStringStyleTest, org.apache.commons.lang.builder.SimpleToStringStyleTest, org.apache.commons.lang.builder.StandardToStringStyleTest, org.apache.commons.lang.builder.StandardToStringStyleTest, org.apache.commons.lang.builder.ToStringBuilderTest, org.apache.commons.lang.builder.ToStringBuilderTest, org.apache.commons.lang.builder.ToStringStyleTest, org.apache.commons.lang.builder.ToStringStyleTest, org.apache.commons.lang.enum.EnumTest, org.apache.commons.lang.enum.EnumTest, org.apache.commons.lang.enum.EnumUtilsTest, org.apache.commons.lang.enum.EnumUtilsTest, org.apache.commons.lang.enum.ValuedEnumTest, org.apache.commons.lang.enum.ValuedEnumTest, org.apache.commons.lang.enums.EnumEqualsTest, org.apache.commons.lang.enums.EnumEqualsTest, org.apache.commons.lang.enums.EnumTest, org.apache.commons.lang.enums.EnumTest, org.apache.commons.lang.enums.EnumUtilsTest, org.apache.commons.lang.enums.EnumUtilsTest, org.apache.commons.lang.enums.ValuedEnumTest, org.apache.commons.lang.enums.ValuedEnumTest, org.apache.commons.lang.exception.ExceptionUtilsTestCase, org.apache.commons.lang.exception.ExceptionUtilsTestCase, org.apache.commons.lang.exception.NestableDelegateTestCase, org.apache.commons.lang.exception.NestableDelegateTestCase, org.apache.commons.lang.exception.NestableErrorTestCase, org.apache.commons.lang.exception.NestableErrorTestCase, org.apache.commons.lang.exception.NestableExceptionTestCase, org.apache.commons.lang.exception.NestableExceptionTestCase, org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase, org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase, org.apache.commons.lang.math.DoubleRangeTest, org.apache.commons.lang.math.DoubleRangeTest, org.apache.commons.lang.math.FloatRangeTest, org.apache.commons.lang.math.FloatRangeTest, org.apache.commons.lang.math.FractionTest, org.apache.commons.lang.math.FractionTest, org.apache.commons.lang.math.IntRangeTest, org.apache.commons.lang.math.IntRangeTest, org.apache.commons.lang.math.LongRangeTest, org.apache.commons.lang.math.LongRangeTest, org.apache.commons.lang.math.NumberRangeTest, org.apache.commons.lang.math.NumberRangeTest, org.apache.commons.lang.math.NumberUtilsTest, org.apache.commons.lang.math.NumberUtilsTest, org.apache.commons.lang.math.RandomUtilsTest, org.apache.commons.lang.math.RandomUtilsTest, org.apache.commons.lang.math.RangeTest, org.apache.commons.lang.math.RangeTest, org.apache.commons.lang.mutable.MutableBooleanTest, org.apache.commons.lang.mutable.MutableBooleanTest, org.apache.commons.lang.mutable.MutableByteTest, org.apache.commons.lang.mutable.MutableByteTest, org.apache.commons.lang.mutable.MutableDoubleTest, org.apache.commons.lang.mutable.MutableDoubleTest, org.apache.commons.lang.mutable.MutableFloatTest, org.apache.commons.lang.mutable.MutableFloatTest, org.apache.commons.lang.mutable.MutableIntTest, org.apache.commons.lang.mutable.MutableIntTest, org.apache.commons.lang.mutable.MutableLongTest, org.apache.commons.lang.mutable.MutableLongTest, org.apache.commons.lang.mutable.MutableObjectTest, org.apache.commons.lang.mutable.MutableObjectTest, org.apache.commons.lang.mutable.MutableShortTest, org.apache.commons.lang.mutable.MutableShortTest, org.apache.commons.lang.text.CompositeFormatTest, org.apache.commons.lang.text.CompositeFormatTest, org.apache.commons.lang.text.StrBuilderAppendInsertTest, org.apache.commons.lang.text.StrBuilderAppendInsertTest, org.apache.commons.lang.text.StrBuilderTest, org.apache.commons.lang.text.StrBuilderTest, org.apache.commons.lang.text.StrLookupTest, org.apache.commons.lang.text.StrLookupTest, org.apache.commons.lang.text.StrMatcherTest, org.apache.commons.lang.text.StrMatcherTest, org.apache.commons.lang.text.StrSubstitutorTest, org.apache.commons.lang.text.StrSubstitutorTest, org.apache.commons.lang.text.StrTokenizerTest, org.apache.commons.lang.text.StrTokenizerTest, org.apache.commons.lang.time.DateFormatUtilsTest, org.apache.commons.lang.time.DateFormatUtilsTest, org.apache.commons.lang.time.DateUtilsTest, org.apache.commons.lang.time.DateUtilsTest, org.apache.commons.lang.time.DurationFormatUtilsTest, org.apache.commons.lang.time.DurationFormatUtilsTest, org.apache.commons.lang.time.FastDateFormatTest, org.apache.commons.lang.time.FastDateFormatTest, org.apache.commons.lang.time.StopWatchTest, org.apache.commons.lang.time.StopWatchTest], complianceLevel=3, outputFolder=., json=true}
23:57:43.197 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Available processors (cores): 1
23:57:43.225 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Free memory: 957 MB
23:57:43.225 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Maximum memory: 989 MB
23:57:43.225 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Total memory available to JVM: 989 MB
23:57:43.226 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Java version: 1.8.0_71
23:57:43.227 [main] INFO  fr.inria.lille.repair.nopol.NoPol - JAVA_HOME: /home/wp/tool/jdk1.8.0_71/bin/
23:57:43.227 [main] INFO  fr.inria.lille.repair.nopol.NoPol - PATH: /home/wp/tool/jdk1.8.0_71/bin/:/home/wp/RepairThemAll/benchmarks/defects4j/framework/bin:/home/wp/tool/gradle-5.4.1/bin:/home/wp/tool/apache-maven-3.5.2/bin:/home/wp/tool/jdk1.7.0_80/bin:/home/wp/tool/apache-ant-1.9.14/bin:/home/wp/tool/jdk1.7.0_80/bin:/home/wp/tool/jdk1.7.0_80/jre/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games
After filtering ......
rootclassname is org.apache.commons.lang.time.DurationFormatUtils
line number is 439
23:58:19.077 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #1
23:58:19.079 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.DurationFormatUtils:439 which is executed by 1 tests
-1439815513
23:58:19.897 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
23:58:23.221 [pool-3-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
DurationFormatUtils.java:276: error: missing return statement
    }
    ^
23:58:23.631 [pool-3-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class DurationFormatUtils {
    public DurationFormatUtils() {
        super();
    }

    public static final java.lang.String ISO_EXTENDED_FORMAT_PATTERN = "'P'yyyy'Y'M'M'd'DT'H'H'm'M's.S'S'";

    public static java.lang.String formatDurationHMS(long durationMillis) {
        return org.apache.commons.lang.time.DurationFormatUtils.formatDuration(durationMillis, "H:mm:ss.SSS");
    }

    public static java.lang.String formatDurationISO(long durationMillis) {
        return org.apache.commons.lang.time.DurationFormatUtils.formatDuration(durationMillis, org.apache.commons.lang.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN, false);
    }

    public static java.lang.String formatDuration(long durationMillis, java.lang.String format) {
        return org.apache.commons.lang.time.DurationFormatUtils.formatDuration(durationMillis, format, true);
    }

    public static java.lang.String formatDuration(long durationMillis, java.lang.String format, boolean padWithZeros) {
        org.apache.commons.lang.time.DurationFormatUtils.Token[] tokens = org.apache.commons.lang.time.DurationFormatUtils.lexx(format);
        int days = 0;
        int hours = 0;
        int minutes = 0;
        int seconds = 0;
        int milliseconds = 0;
        if (org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.d)) {
            days = ((int) (durationMillis / org.apache.commons.lang.time.DateUtils.MILLIS_PER_DAY));
            durationMillis = durationMillis - (days * org.apache.commons.lang.time.DateUtils.MILLIS_PER_DAY);
        }
        if (org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.H)) {
            hours = ((int) (durationMillis / org.apache.commons.lang.time.DateUtils.MILLIS_PER_HOUR));
            durationMillis = durationMillis - (hours * org.apache.commons.lang.time.DateUtils.MILLIS_PER_HOUR);
        }
        if (org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.m)) {
            minutes = ((int) (durationMillis / org.apache.commons.lang.time.DateUtils.MILLIS_PER_MINUTE));
            durationMillis = durationMillis - (minutes * org.apache.commons.lang.time.DateUtils.MILLIS_PER_MINUTE);
        }
        if (org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.s)) {
            seconds = ((int) (durationMillis / org.apache.commons.lang.time.DateUtils.MILLIS_PER_SECOND));
            durationMillis = durationMillis - (seconds * org.apache.commons.lang.time.DateUtils.MILLIS_PER_SECOND);
        }
        if (org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.S)) {
            milliseconds = ((int) (durationMillis));
        }
        return org.apache.commons.lang.time.DurationFormatUtils.format(tokens, 0, 0, days, hours, minutes, seconds, milliseconds, padWithZeros);
    }

    public static java.lang.String formatDurationWords(long durationMillis, boolean suppressLeadingZeroElements, boolean suppressTrailingZeroElements) {
        java.lang.String duration = org.apache.commons.lang.time.DurationFormatUtils.formatDuration(durationMillis, "d' days 'H' hours 'm' minutes 's' seconds'");
        if (suppressLeadingZeroElements) {
            duration = " " + duration;
            java.lang.String tmp = org.apache.commons.lang.StringUtils.replaceOnce(duration, " 0 days", "");
            if (tmp.length() != duration.length()) {
                duration = tmp;
                tmp = org.apache.commons.lang.StringUtils.replaceOnce(duration, " 0 hours", "");
                if (tmp.length() != duration.length()) {
                    duration = tmp;
                    tmp = org.apache.commons.lang.StringUtils.replaceOnce(duration, " 0 minutes", "");
                    duration = tmp;
                    if (tmp.length() != duration.length()) {
                        duration = org.apache.commons.lang.StringUtils.replaceOnce(tmp, " 0 seconds", "");
                    }
                }
            }
            if (duration.length() != 0) {
                duration = duration.substring(1);
            }
        }
        if (suppressTrailingZeroElements) {
            java.lang.String tmp = org.apache.commons.lang.StringUtils.replaceOnce(duration, " 0 seconds", "");
            if (tmp.length() != duration.length()) {
                duration = tmp;
                tmp = org.apache.commons.lang.StringUtils.replaceOnce(duration, " 0 minutes", "");
                if (tmp.length() != duration.length()) {
                    duration = tmp;
                    tmp = org.apache.commons.lang.StringUtils.replaceOnce(duration, " 0 hours", "");
                    if (tmp.length() != duration.length()) {
                        duration = org.apache.commons.lang.StringUtils.replaceOnce(tmp, " 0 days", "");
                    }
                }
            }
        }
        duration = " " + duration;
        duration = org.apache.commons.lang.StringUtils.replaceOnce(duration, " 1 seconds", " 1 second");
        duration = org.apache.commons.lang.StringUtils.replaceOnce(duration, " 1 minutes", " 1 minute");
        duration = org.apache.commons.lang.StringUtils.replaceOnce(duration, " 1 hours", " 1 hour");
        duration = org.apache.commons.lang.StringUtils.replaceOnce(duration, " 1 days", " 1 day");
        return duration.trim();
    }

    public static java.lang.String formatPeriodISO(long startMillis, long endMillis) {
        return org.apache.commons.lang.time.DurationFormatUtils.formatPeriod(startMillis, endMillis, org.apache.commons.lang.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN, false, java.util.TimeZone.getDefault());
    }

    public static java.lang.String formatPeriod(long startMillis, long endMillis, java.lang.String format) {
        return org.apache.commons.lang.time.DurationFormatUtils.formatPeriod(startMillis, endMillis, format, true, java.util.TimeZone.getDefault());
    }

    public static java.lang.String formatPeriod(long startMillis, long endMillis, java.lang.String format, boolean padWithZeros, java.util.TimeZone timezone) {
        long millis = endMillis - startMillis;
        if (millis < (28 * org.apache.commons.lang.time.DateUtils.MILLIS_PER_DAY)) {
            return org.apache.commons.lang.time.DurationFormatUtils.formatDuration(millis, format, padWithZeros);
        }
        org.apache.commons.lang.time.DurationFormatUtils.Token[] tokens = org.apache.commons.lang.time.DurationFormatUtils.lexx(format);
        java.util.Calendar start = java.util.Calendar.getInstance(timezone);
        start.setTime(new java.util.Date(startMillis));
        java.util.Calendar end = java.util.Calendar.getInstance(timezone);
        end.setTime(new java.util.Date(endMillis));
        int milliseconds = end.get(java.util.Calendar.MILLISECOND) - start.get(java.util.Calendar.MILLISECOND);
        int seconds = end.get(java.util.Calendar.SECOND) - start.get(java.util.Calendar.SECOND);
        int minutes = end.get(java.util.Calendar.MINUTE) - start.get(java.util.Calendar.MINUTE);
        int hours = end.get(java.util.Calendar.HOUR_OF_DAY) - start.get(java.util.Calendar.HOUR_OF_DAY);
        int days = end.get(java.util.Calendar.DAY_OF_MONTH) - start.get(java.util.Calendar.DAY_OF_MONTH);
        int months = end.get(java.util.Calendar.MONTH) - start.get(java.util.Calendar.MONTH);
        int years = end.get(java.util.Calendar.YEAR) - start.get(java.util.Calendar.YEAR);
        while (milliseconds < 0) {
            milliseconds += 1000;
            seconds -= 1;
        } 
        while (seconds < 0) {
            seconds += 60;
            minutes -= 1;
        } 
        while (minutes < 0) {
            minutes += 60;
            hours -= 1;
        } 
        while (hours < 0) {
            hours += 24;
            days -= 1;
        } 
        while (days < 0) {
            days += 31;
            months -= 1;
        } 
        while (months < 0) {
            months += 12;
            years -= 1;
        } 
        milliseconds -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.MILLISECOND, milliseconds);
        seconds -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.SECOND, seconds);
        minutes -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.MINUTE, minutes);
        hours -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.HOUR_OF_DAY, hours);
        days -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.DAY_OF_MONTH, days);
        months -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.MONTH, months);
        years -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.YEAR, years);
        if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.y)) {
            if (org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.M)) {
                months += 12 * years;
                years = 0;
            } else {
                days += 365 * years;
                years = 0;
            }
        }
        if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.M)) {
            days += end.get(java.util.Calendar.DAY_OF_YEAR) - start.get(java.util.Calendar.DAY_OF_YEAR);
            months = 0;
        }
        if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.d)) {
            hours += 24 * days;
            days = 0;
        }
        if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.H)) {
            minutes += 60 * hours;
            hours = 0;
        }
        if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.m)) {
            seconds += 60 * minutes;
            minutes = 0;
        }
        if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.s)) {
            milliseconds += 1000 * seconds;
            seconds = 0;
        }
        return org.apache.commons.lang.time.DurationFormatUtils.format(tokens, years, months, days, hours, minutes, seconds, milliseconds, padWithZeros);
    }

    static java.lang.String format(org.apache.commons.lang.time.DurationFormatUtils.Token[] tokens, int years, int months, int days, int hours, int minutes, int seconds, int milliseconds, boolean padWithZeros) {
        java.lang.StringBuffer buffer = new java.lang.StringBuffer();
        boolean lastOutputSeconds = false;
        int sz = tokens.length;
        for (int i = 0; i < sz; i++) {
            org.apache.commons.lang.time.DurationFormatUtils.Token token = tokens[i];
            java.lang.Object value = token.getValue();
            int count = token.getCount();
            if (value instanceof java.lang.StringBuffer) {
                buffer.append(value.toString());
            } else {
                if (value == org.apache.commons.lang.time.DurationFormatUtils.y) {
                    buffer.append(padWithZeros ? org.apache.commons.lang.StringUtils.leftPad(java.lang.Integer.toString(years), count, '0') : java.lang.Integer.toString(years));
                    lastOutputSeconds = false;
                } else
                    if (value == org.apache.commons.lang.time.DurationFormatUtils.M) {
                        buffer.append(padWithZeros ? org.apache.commons.lang.StringUtils.leftPad(java.lang.Integer.toString(months), count, '0') : java.lang.Integer.toString(months));
                        lastOutputSeconds = false;
                    } else
                        if (value == org.apache.commons.lang.time.DurationFormatUtils.d) {
                            buffer.append(padWithZeros ? org.apache.commons.lang.StringUtils.leftPad(java.lang.Integer.toString(days), count, '0') : java.lang.Integer.toString(days));
                            lastOutputSeconds = false;
                        } else
                            if (value == org.apache.commons.lang.time.DurationFormatUtils.H) {
                                buffer.append(padWithZeros ? org.apache.commons.lang.StringUtils.leftPad(java.lang.Integer.toString(hours), count, '0') : java.lang.Integer.toString(hours));
                                lastOutputSeconds = false;
                            } else
                                if (value == org.apache.commons.lang.time.DurationFormatUtils.m) {
                                    buffer.append(padWithZeros ? org.apache.commons.lang.StringUtils.leftPad(java.lang.Integer.toString(minutes), count, '0') : java.lang.Integer.toString(minutes));
                                    lastOutputSeconds = false;
                                } else
                                    if (value == org.apache.commons.lang.time.DurationFormatUtils.s) {
                                        buffer.append(padWithZeros ? org.apache.commons.lang.StringUtils.leftPad(java.lang.Integer.toString(seconds), count, '0') : java.lang.Integer.toString(seconds));
                                        lastOutputSeconds = true;
                                    } else
                                        if (value == org.apache.commons.lang.time.DurationFormatUtils.S) {
                                            if (lastOutputSeconds) {
                                                milliseconds += 1000;
                                                java.lang.String str = (padWithZeros) ? org.apache.commons.lang.StringUtils.leftPad(java.lang.Integer.toString(milliseconds), count, '0') : java.lang.Integer.toString(milliseconds);
                                                buffer.append(str.substring(1));
                                            } else {
                                                buffer.append(padWithZeros ? org.apache.commons.lang.StringUtils.leftPad(java.lang.Integer.toString(milliseconds), count, '0') : java.lang.Integer.toString(milliseconds));
                                            }
                                            lastOutputSeconds = false;
                                        }






            }
        }
        return buffer.toString();
    }

    static int reduceAndCorrect(java.util.Calendar start, java.util.Calendar end, int field, int difference) {
        end.add(field, (-1) * difference);
        int endValue = end.get(field);
        int startValue = start.get(field);
        if (endValue < startValue) {
            int newdiff = startValue - endValue;
            end.add(field, newdiff);
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(0).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.apache.commons.lang.time.DurationFormatUtils.d",org.apache.commons.lang.time.DurationFormatUtils.d);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("endValue",endValue);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("newdiff",newdiff);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("start",start);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.apache.commons.lang.time.DurationFormatUtils.y",org.apache.commons.lang.time.DurationFormatUtils.y);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.apache.commons.lang.time.DurationFormatUtils.s",org.apache.commons.lang.time.DurationFormatUtils.s);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.apache.commons.lang.time.DurationFormatUtils.S",org.apache.commons.lang.time.DurationFormatUtils.S);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.apache.commons.lang.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN",org.apache.commons.lang.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("field",field);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.apache.commons.lang.time.DurationFormatUtils.M",org.apache.commons.lang.time.DurationFormatUtils.M);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.apache.commons.lang.time.DurationFormatUtils.m",org.apache.commons.lang.time.DurationFormatUtils.m);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("difference",difference);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("end",end);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("startValue",startValue);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.apache.commons.lang.time.DurationFormatUtils.H",org.apache.commons.lang.time.DurationFormatUtils.H);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectionEnds();
            }
            if (runtimeAngelicValue)
                return newdiff;

        } else {
            return 0;
        }
    }

    static final java.lang.Object y = "y";

    static final java.lang.Object M = "M";

    static final java.lang.Object d = "d";

    static final java.lang.Object H = "H";

    static final java.lang.Object m = "m";

    static final java.lang.Object s = "s";

    static final java.lang.Object S = "S";

    static org.apache.commons.lang.time.DurationFormatUtils.Token[] lexx(java.lang.String format) {
        char[] array = format.toCharArray();
        java.util.ArrayList list = new java.util.ArrayList(array.length);
        boolean inLiteral = false;
        java.lang.StringBuffer buffer = null;
        org.apache.commons.lang.time.DurationFormatUtils.Token previous = null;
        int sz = array.length;
        for (int i = 0; i < sz; i++) {
            char ch = array[i];
            if (inLiteral && (ch != '\'')) {
                buffer.append(ch);
                continue;
            }
            java.lang.Object value = null;
            switch (ch) {
                case '\'' :
                    if (inLiteral) {
                        buffer = null;
                        inLiteral = false;
                    } else {
                        buffer = new java.lang.StringBuffer();
                        list.add(new org.apache.commons.lang.time.DurationFormatUtils.Token(buffer));
                        inLiteral = true;
                    }
                    break;
                case 'y' :
                    value = org.apache.commons.lang.time.DurationFormatUtils.y;
                    break;
                case 'M' :
                    value = org.apache.commons.lang.time.DurationFormatUtils.M;
                    break;
                case 'd' :
                    value = org.apache.commons.lang.time.DurationFormatUtils.d;
                    break;
                case 'H' :
                    value = org.apache.commons.lang.time.DurationFormatUtils.H;
                    break;
                case 'm' :
                    value = org.apache.commons.lang.time.DurationFormatUtils.m;
                    break;
                case 's' :
                    value = org.apache.commons.lang.time.DurationFormatUtils.s;
                    break;
                case 'S' :
                    value = org.apache.commons.lang.time.DurationFormatUtils.S;
                    break;
                default :
                    if (buffer == null) {
                        buffer = new java.lang.StringBuffer();
                        list.add(new org.apache.commons.lang.time.DurationFormatUtils.Token(buffer));
                    }
                    buffer.append(ch);
            }
            if (value != null) {
                if ((previous != null) && (previous.getValue() == value)) {
                    previous.increment();
                } else {
                    org.apache.commons.lang.time.DurationFormatUtils.Token token = new org.apache.commons.lang.time.DurationFormatUtils.Token(value);
                    list.add(token);
                    previous = token;
                }
                buffer = null;
            }
        }
        return ((org.apache.commons.lang.time.DurationFormatUtils.Token[]) (list.toArray(new org.apache.commons.lang.time.DurationFormatUtils.Token[0])));
    }

    static class Token {
        static boolean containsTokenWithValue(org.apache.commons.lang.time.DurationFormatUtils.Token[] tokens, java.lang.Object value) {
            int sz = tokens.length;
            for (int i = 0; i < sz; i++) {
                if (tokens[i].getValue() == value) {
                    return true;
                }
            }
            return false;
        }

        private java.lang.Object value;

        private int count;

        Token(java.lang.Object value) {
            this.value = value;
            this.count = 1;
        }

        Token(java.lang.Object value, int count) {
            this.value = value;
            this.count = count;
        }

        void increment() {
            count++;
        }

        int getCount() {
            return count;
        }

        java.lang.Object getValue() {
            return value;
        }

        public boolean equals(java.lang.Object obj2) {
            if (obj2 instanceof org.apache.commons.lang.time.DurationFormatUtils.Token) {
                org.apache.commons.lang.time.DurationFormatUtils.Token tok2 = ((org.apache.commons.lang.time.DurationFormatUtils.Token) (obj2));
                if (this.value.getClass() != tok2.value.getClass()) {
                    return false;
                }
                if (this.count != tok2.count) {
                    return false;
                }
                if (this.value instanceof java.lang.StringBuffer) {
                    return this.value.toString().equals(tok2.value.toString());
                } else
                    if (this.value instanceof java.lang.Number) {
                        return this.value.equals(tok2.value);
                    } else {
                        return this.value == tok2.value;
                    }

            } else {
                return false;
            }
        }

        public int hashCode() {
            return this.value.hashCode();
        }

        public java.lang.String toString() {
            return org.apache.commons.lang.StringUtils.repeat(this.value.toString(), this.count);
        }
    }
}
23:58:23.637 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
After filtering ......
rootclassname is org.apache.commons.lang.time.DurationFormatUtils
line number is 438
23:58:23.638 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #2
23:58:23.638 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.DurationFormatUtils:438 which is executed by 1 tests
-1439815513
23:58:23.884 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
23:58:26.044 [pool-5-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 1. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.time.DurationFormatUtils:438.
After filtering ......
rootclassname is org.apache.commons.lang.time.DurationFormatUtils
line number is 437
23:58:26.045 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #3
23:58:26.045 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.DurationFormatUtils:437 which is executed by 1 tests
-1439815513
After filtering ......
rootclassname is org.apache.commons.lang.time.DurationFormatUtils
line number is 312
23:58:26.395 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #4
23:58:26.395 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.DurationFormatUtils:312 which is executed by 1 tests
-1439815513
23:58:26.703 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
23:58:27.731 [pool-11-thread-1] DEBUG tests.output - Failing tests with false: 
[testJiraLang281(org.apache.commons.lang.time.DurationFormatUtilsTest): expected:<[09]> but was:<[10]>]
23:58:27.731 [pool-11-thread-1] DEBUG tests.output - Failing tests with true: 
[testJiraLang281(org.apache.commons.lang.time.DurationFormatUtilsTest): expected:<[09]> but was:<[-2]>]
23:58:27.731 [pool-11-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.time.DurationFormatUtils:312.
After filtering ......
rootclassname is org.apache.commons.lang.time.DurationFormatUtils
line number is 306
23:58:27.732 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #5
23:58:27.732 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.DurationFormatUtils:306 which is executed by 1 tests
-1439815513
23:58:27.934 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
00:02:32.361 [pool-15-thread-1] DEBUG xxl.java.junit.TestSuiteExecution - Timeout after 200 seconds. Infinite loop?
00:02:42.702 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
After filtering ......
rootclassname is org.apache.commons.lang.time.DurationFormatUtils
line number is 441
00:02:46.999 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #6
00:02:46.999 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.DurationFormatUtils:441 which is executed by 3 tests
java.util.concurrent.ExecutionException: java.lang.OutOfMemoryError: Java heap space
	at java.util.concurrent.FutureTask.report(FutureTask.java:122)
	at java.util.concurrent.FutureTask.get(FutureTask.java:206)
	at fr.inria.lille.repair.Main.main(Main.java:106)
Caused by: java.lang.OutOfMemoryError: Java heap space
	at java.util.Arrays.copyOfRange(Arrays.java:3664)
	at java.lang.String.<init>(String.java:207)
	at java.lang.String.substring(String.java:1969)
	at org.eclipse.jdt.internal.compiler.batch.ClasspathJar.addToPackageCache(ClasspathJar.java:227)
	at org.eclipse.jdt.internal.compiler.batch.ClasspathJar.getModulesDeclaringPackage(ClasspathJar.java:244)
	at org.eclipse.jdt.internal.compiler.batch.ClasspathLocation.isPackage(ClasspathLocation.java:186)
	at org.eclipse.jdt.internal.compiler.batch.ClasspathJar.findClass(ClasspathJar.java:117)
	at org.eclipse.jdt.internal.compiler.batch.FileSystem.internalFindClass(FileSystem.java:453)
	at org.eclipse.jdt.internal.compiler.batch.FileSystem.findClass(FileSystem.java:395)
	at org.eclipse.jdt.internal.compiler.batch.FileSystem.findType(FileSystem.java:545)
	at org.eclipse.jdt.internal.compiler.env.IModuleAwareNameEnvironment.findType(IModuleAwareNameEnvironment.java:100)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createPackage(LookupEnvironment.java:1112)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.buildTypeBindings(CompilationUnitScope.java:132)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.buildTypeBindings(LookupEnvironment.java:463)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:845)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at spoon.support.compiler.jdt.TreeBuilderCompiler.buildUnits(TreeBuilderCompiler.java:59)
	at spoon.support.compiler.jdt.JDTBatchCompiler.getUnits(JDTBatchCompiler.java:255)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnits(JDTBasedSpoonCompiler.java:403)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:362)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:330)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:113)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:96)
	at fr.inria.lille.commons.spoon.util.SpoonModelLibrary.modelFor(SpoonModelLibrary.java:53)
	at fr.inria.lille.commons.spoon.SpoonedFile.<init>(SpoonedFile.java:61)
	at fr.inria.lille.commons.spoon.SpoonedClass.<init>(SpoonedClass.java:14)
	at fr.inria.lille.commons.spoon.SpoonedProject.forked(SpoonedProject.java:47)
	at fr.inria.lille.repair.nopol.NoPol.runOnStatement(NoPol.java:290)
	at fr.inria.lille.repair.nopol.NoPol.solveWithMultipleBuild(NoPol.java:281)
	at fr.inria.lille.repair.nopol.NoPol.build(NoPol.java:163)
	at fr.inria.lille.repair.Main$1.call(Main.java:101)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)

Usage: java -jar nopol.jar
                          [(-m|--mode) <repair|ranking>] (-e|--type) <condition|precondition|pre_then_cond|loop|arithmetic> [(-o|--oracle) <angelic|symbolic>] [(-y|--synthesis) <smt|dynamoth>] [(-l|--solver) <z3|cvc4>] [(-p|--solver-path) <solverPath>] (-s|--source) source1:source2:...:sourceN  (-c|--classpath) <classpath> [(-t|--test) test1:test2:...:testN ] [--complianceLevel <complianceLevel>] [--maxTime <maxTime>] [--bugid <bugid>] [--maxTimeType <maxTimeType>] [(-z|--flocal) < cocospoon|dumb|gzoltar>] [--output <outputFolder>] [--json[:<outputJson>]]

  [(-m|--mode) <repair|ranking>]
        Define the mode of execution. (default: repair)

  (-e|--type) <condition|precondition|pre_then_cond|loop|arithmetic>
        The repair type (example fixing only conditions, or adding
        precondition). REQUIRED OPTION (default: condition)

  [(-o|--oracle) <angelic|symbolic>]
        Define the oracle (only used with repair mode). (default: angelic)

  [(-y|--synthesis) <smt|dynamoth>]
        Define the patch synthesis. (default: smt)

  [(-l|--solver) <z3|cvc4>]
        Define the solver (only used with smt synthesis). (default: z3)

  [(-p|--solver-path) <solverPath>]
        Define the solver binary path (only used with smt synthesis).

  (-s|--source) source1:source2:...:sourceN 
        Define the path to the source code of the project.

  (-c|--classpath) <classpath>
        Define the classpath of the project.

  [(-t|--test) test1:test2:...:testN ]
        Define the tests of the project (both failing and passing),
        fully-qualified, separated with ':' (even if the classpath contains
        other tests, only those are considered.

  [--complianceLevel <complianceLevel>]
        The compliance level of the project. (default: 7)

  [--maxTime <maxTime>]
        The maximum time execution in minute for the whole execution of
        Nopol.(default: 10)

  [--bugid <bugid>]
        The id of the bug being excuted

  [--maxTimeType <maxTimeType>]
        The maximum time execution in minute for one type of patch. (default: 5)

  [(-z|--flocal) < cocospoon|dumb|gzoltar>]
        Define the fault localizer to be used. (default: gzoltar)

  [--output <outputFolder>]
        Define the location where the patches will be saved. (default: .)

  [--json[:<outputJson>]]
        Output a json file in the current working directory.

Command exited with non-zero status 255
1405.82user 5.55system 51:35.80elapsed 45%CPU (0avgtext+0avgdata 1191580maxresident)k
717880inputs+9208outputs (25765major+829962minor)pagefaults 0swaps


Node: ubuntu



Date: Mon Jul 29 00:49:17 EDT 2019

