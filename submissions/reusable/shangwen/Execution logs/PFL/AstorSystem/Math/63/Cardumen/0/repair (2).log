cd /tmp/Cardumen_Defects4J_Math_63;
export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en";
TZ="America/New_York"; export TZ;
export PATH="/data/tool/jdk1.8.0_71/bin:$PATH";
export JAVA_HOME="/data/tool/jdk1.8.0_71/bin";
time java -Xmx1g -Xms1g -cp /data/RepairThemAll/script/../libs/jtestex7.jar:/data/RepairThemAll/script/../repair_tools/astor.jar fr.inria.main.evolution.AstorMain \
	-mode cardumen \
	-benchmark Defects4J \
	-location . \
	-id Math-63 \
	-failing org.apache.commons.math.util.MathUtilsTest \
	-jvm4testexecution /data/tool/jdk1.7.0_80/bin \
	-jvm4evosuitetestexecution /data/tool/jdk1.7.0_80/bin \
	-maxgen 1000000 \
	-maxtime 120 \
	-stopfirst true \
	-seed 0 \
	-scope local \
	-population 1 \
	-javacompliancelevel 5 \
	-srcjavafolder src/main/java/ \
	-srctestfolder src/test/java/ \
	-binjavafolder target/classes/ \
	-bintestfolder target/test-classes/ \
	-parameters x:x:maxCombinationVariableLimit:true:maxVarCombination:1000 \
	-dependencies /tmp/Cardumen_Defects4J_Math_63/target/classes/:/tmp/Cardumen_Defects4J_Math_63/target/test-classes/:/data/RepairThemAll/script/../benchmarks/defects4j/framework/projects/lib/junit-4.11.jar;
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en
Aug 03, 2019 5:36:01 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:01 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:01 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:01 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:01 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:01 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:01 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:01 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:01 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:01 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:01 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:01 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:01 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:01 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:01 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:01 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:01 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:01 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:01 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:01 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:01 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:01 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:01 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:01 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:01 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:01 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:01 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:01 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:01 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:01 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:01 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:01 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:01 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:01 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:01 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:01 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:01 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:01 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:01 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:01 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:01 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:01 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:01 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:01 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:01 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:01 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:01 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:01 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:01 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:01 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:01 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:01 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:01 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:01 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:01 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:01 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:01 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:01 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:01 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:01 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:01 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Aug 03, 2019 5:36:02 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
[INFO ] fr.inria.astor.core.setup.ProjectConfiguration.getVersionJDK(ProjectConfiguration.java:282) - Version of the JVM used: 1.7.0_80
[INFO ] fr.inria.main.AbstractMain.processArguments(AbstractMain.java:388) - Java version of the JDK used to run tests: 1.7.0_80
[INFO ] fr.inria.main.AbstractMain.processArguments(AbstractMain.java:389) - The compliance of the JVM is:  7
[INFO ] fr.inria.main.AbstractMain.processArguments(AbstractMain.java:667) - command line arguments: [-mode  cardumen  -benchmark  Defects4J  -location  .  -id  Math-63  -failing  org.apache.commons.math.util.MathUtilsTest  -jvm4testexecution  /data/tool/jdk1.7.0_80/bin  -jvm4evosuitetestexecution  /data/tool/jdk1.7.0_80/bin  -maxgen  1000000  -maxtime  120  -stopfirst  true  -seed  0  -scope  local  -population  1  -javacompliancelevel  5  -srcjavafolder  src/main/java/  -srctestfolder  src/test/java/  -binjavafolder  target/classes/  -bintestfolder  target/test-classes/  -parameters  x:x:maxCombinationVariableLimit:true:maxVarCombination:1000  -dependencies  /tmp/Cardumen_Defects4J_Math_63/target/classes/:/tmp/Cardumen_Defects4J_Math_63/target/test-classes/:/data/RepairThemAll/script/../benchmarks/defects4j/framework/projects/lib/junit-4.11.jar]
[INFO ] fr.inria.main.evolution.AstorMain.execute(AstorMain.java:287) - Running Astor on a JDK at /data/tool/jdk1.8.0_71/jre
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:967) - Source folders: [/tmp/Cardumen_Defects4J_Math_63/./src/main/java]
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:986) - Source Test folders: [/tmp/Cardumen_Defects4J_Math_63/./src/test/java]
[INFO ] fr.inria.main.evolution.AstorMain.createEngine(AstorMain.java:187) - [Candidate [className=org.apache.commons.math.util.MathUtils, methodName=null, lineNumber=417, susp=1.0]]
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:707) - 
---- Creating spoon model
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initModel(AstorCoreEngine.java:806) - Creating model,  Code location from working folder: /tmp/Cardumen_Defects4J_Math_63/./src/main/java
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:66) - building model: /tmp/Cardumen_Defects4J_Math_63/./src/main/java, compliance level: 5
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:79) - Classpath (Dependencies) for building SpoonModel: [/tmp/Cardumen_Defects4J_Math_63/target/classes/, /tmp/Cardumen_Defects4J_Math_63/target/test-classes/, /data/RepairThemAll/script/../benchmarks/defects4j/framework/projects/lib/junit-4.11.jar]
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:711) - 
---- Initial suspicious size: 1
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:127) - Total suspicious from FL: 1,  5
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:136) - Total ModPoint created: 5
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createInitialPopulation(ProgramVariantFactory.java:82) - Creating program variant #1, [Variant id: 1, #gens: 5, #ops: 0, parent:-]
[INFO ] fr.inria.astor.core.solutionsearch.spaces.ingredients.scopes.ExpressionTypeIngredientSpace.defineSpace(ExpressionTypeIngredientSpace.java:121) - Ingredient search space info : number keys 17 , number values 321 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:66) - ----------------------------
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:67) - ---Configuration properties:---Execution values
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:benchmark= Defects4J
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:lastJUnitVersion= ./examples/libs/junit-4.11.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:alternativecompliancelevel= 4
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoredTestCases= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:workingDirectory= /tmp/Cardumen_Defects4J_Math_63/./output_astor
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:manipulatesuper= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:validation= process
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4testexecution= /data/tool/jdk1.7.0_80/bin
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:operatorspace= r-expression
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:disablelog= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:binjavafolder= target/classes/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:synthesis_depth= 3
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltartestpackagetoexclude= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfitnessinitialpopulation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuiteresultfolder= evosuite
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:flthreshold= 0.1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:regressionforfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:collectonlyusedmethod= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:preservelinenumbers= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax2= 152044
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ingredienttransformstrategy= name-probability-based
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax1= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probagenmutation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nomodificationconvergence= 100
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:diff_type= relative
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:targetelementprocessor= expression
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srctestfolder= src/test/java/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forceExecuteRegression= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:clusteringfilename= clustering.csv
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:failing= org.apache.commons.math.util.MathUtilsTest
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logtestexecution= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_buggy_class= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:numberExecutions= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumbersolutions= 1000000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_affected_by_op= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:population= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:considerzerovaluesusp= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxCombinationVariableLimit= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:loglevel= INFO
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savesolution= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:javacompliancelevel= 5
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:x= x
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:uniqueoptogen= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltarpackagetonotinstrument= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:projectIdentifier= Math-63
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:modificationpointnavigation= weight
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:stopfirst= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:multipointmodification= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:elementsToMutate= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jsonoutputname= astor_output
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoDSE= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bintestfolder= target/test-classes/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:testbystep= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:version-location= ./math-version/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:reintroduce= PARENTS:ORIGINAL
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:executorjar= ./lib/jtestex7.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxGeneration= 1000000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:max_synthesis_step= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxVarCombination= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxtime= 120
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitejar= ./lib/evosuite-master-1.0.4-SNAPSHOT.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvmversion= 1.7.0_80
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:commandTrunk= 50000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:faultlocalization= gzoltar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetmodel= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxsuspcandidates= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mode= cardumen
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:learningdir= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4evosuitetestexecution= /data/tool/jdk1.7.0_80/bin
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:filterfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mutationrate= 1 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pathToMVNRepository= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resourcesfolder= /src/main/resources:/src/test/resources:
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:timezone= America/Los_Angeles
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:runjava7code= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoRunOnBuggyClass= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:compiler= fr.inria.astor.core.manipulation.bytecode.compiler.SpoonClassCompiler
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:limitbysuspicious= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logsattemps= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:dependenciespath= /tmp/Cardumen_Defects4J_Math_63/target/classes/:/tmp/Cardumen_Defects4J_Math_63/target/test-classes/:/data/RepairThemAll/script/../benchmarks/defects4j/framework/projects/lib/junit-4.11.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logpatternlayout= [%-5p] %l - %m%n
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:packageToInstrument= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfaultlocalization= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:scope= local
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:transformingredient= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:fitnessfunction= fr.inria.astor.core.solutionsearch.population.TestCaseFitnessFunction
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumvariablesperingredient= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:parsesourcefromoriginal= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pvariantfoldername= variant-
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savespoonmodelondisk= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srcjavafolder= src/main/java/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:populationcontroller= fr.inria.astor.core.solutionsearch.population.TestCaseBasedFitnessPopulationController
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoreflakyinfl= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:cleantemplates= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:applyCrossover= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxmodificationpoints= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:duplicateingredientsinspace= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:metid= 0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:saveall= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:seed= 0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savecompletepatched= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetoperations= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:processoutputinfile= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:location= .
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probabilistictransformation= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:overridemaxtime= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ingredientstrategy= name-probability-based
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:outputjsonresult= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:allpoints= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bugId= 280
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitetimeout= 120
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nrPlaceholders= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forcesubprocesskilling= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:71) - ----------------------------
[INFO ] fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.startEvolution(EvolutionarySearchEngine.java:40) - 
----Starting Solution Search
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.processCreatedVariant(AstorCoreEngine.java:448) - -Found Solution, child variant #6
[ERROR] fr.inria.astor.core.solutionsearch.AstorCoreEngine.validateReversedOriginalVariant(AstorCoreEngine.java:356) - Error variant :6 the model was not the same from the original after this generation (see Diff in debug level)
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:173) - Time Repair Loop (s): 108.379
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:175) - generationsexecuted: 3
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.printFinalStatus(AstorCoreEngine.java:244) - 
----SUMMARY_EXECUTION---
[INFO ] fr.inria.astor.core.ingredientbased.IngredientBasedEvolutionaryRepairApproachImpl.printFinalStatus(IngredientBasedEvolutionaryRepairApproachImpl.java:123) - Total mod points: 5
[INFO ] fr.inria.astor.core.solutionsearch.spaces.ingredients.scopes.ExpressionTypeIngredientSpace.toJSON(ExpressionTypeIngredientSpace.java:233) - Storing ing JSON at /tmp/Cardumen_Defects4J_Math_63/./output_astor/AstorMain-Math-63//src/ingredients.json
[INFO ] fr.inria.astor.core.stats.IngredientStats.toJSON(IngredientStats.java:253) - Storing ing JSON at /tmp/Cardumen_Defects4J_Math_63/./output_astor/AstorMain-Math-63//ingredientSpaceSize.json
[INFO ] fr.inria.astor.core.stats.IngredientStats.toJSON(IngredientStats.java:254) - ingredientSpaceSize:{"allAttempts":3,"space":[{"a":121,"v":2},{"a":120,"v":1}]}
[INFO ] fr.inria.astor.core.stats.IngredientStats.toJSON(IngredientStats.java:253) - Storing ing JSON at /tmp/Cardumen_Defects4J_Math_63/./output_astor/AstorMain-Math-63//combinationsTemplatesingredientSpaceSize.json
[INFO ] fr.inria.astor.core.stats.IngredientStats.toJSON(IngredientStats.java:254) - combinationsTemplatesingredientSpaceSize:{"allAttempts":9,"space":[{"a":1,"v":5},{"a":5,"v":4}]}
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:191) - number of variants that pass the compile is 2

[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:192) - number of variants that fail the compile is 0

[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:194) - 
 --SOLUTIONS DESCRIPTION--

 ----
ProgramVariant 6
 
time(sec)= 107
operation: ExpressionReplaceOperator
location= org.apache.commons.math.util.MathUtils
line= 417
lineSuspiciousness= 1
lineSuspiciousness= 0
original statement= (java.lang.Double.isNaN(x))
buggy kind= CtInvocationImpl|CtBinaryOperatorImpl
fixed statement= (x < 0.5)
Patch kind= CtBinaryOperatorImpl|CtBinaryOperatorImpl
generation= 3
ingredientScope= -
ingredientParent= _double_0 < 0.5
validation=|true|0|2282|[]|
diffpatch=--- /tmp/Cardumen_Defects4J_Math_63/src/main/java/org/apache/commons/math/util/MathUtilsjava
+++ /tmp/Cardumen_Defects4J_Math_63/src/main/java/org/apache/commons/math/util/MathUtilsjava
@@ -179,7 +179,7 @@
 	}
 
 	public static boolean equals(double x, double y) {
-		return ((java.lang.Double.isNaN(x)) && (java.lang.Double.isNaN(y))) || (x == y);
+		return ((x < 0.5) && (java.lang.Double.isNaN(y))) || (x == y);
 	}
 
 	public static boolean equalsIncludingNaN(double x, double y) {


diffpatchoriginal=--- /tmp/Cardumen_Defects4J_Math_63/src/main/java/org/apache/commons/math/util/MathUtilsjava
+++ /tmp/Cardumen_Defects4J_Math_63/src/main/java/org/apache/commons/math/util/MathUtilsjava
@@ -414,8 +414,7 @@
 
 
 	public static boolean equals(double x, double y) {
-		return ((java.lang.Double.isNaN(x)) && (java.lang.Double.isNaN(y))) || (x == y);
-	}
+		return (
 
 
 
@@ -425,9 +424,6 @@
 
 
 
-	public static boolean equalsIncludingNaN(double x, double y) {
-		return ((java.lang.Double.isNaN(x)) && (java.lang.Double.isNaN(y))) || (org.apache.commons.math.util.MathUtils.equals(x, y, 1));
-	}
 
 
 
@@ -438,9 +434,6 @@
 
 
 
-	public static boolean equals(double x, double y, double eps) {
-		return (org.apache.commons.math.util.MathUtils.equals(x, y, 1)) || ((org.apache.commons.math.util.FastMath.abs((y - x))) <= eps);
-	}
 
 
 
@@ -452,9 +445,6 @@
 
 
 
-	public static boolean equalsIncludingNaN(double x, double y, double eps) {
-		return (org.apache.commons.math.util.MathUtils.equalsIncludingNaN(x, y)) || ((org.apache.commons.math.util.FastMath.abs((y - x))) <= eps);
-	}
 
 
 
@@ -473,26 +463,13 @@
 
 
 
-	public static boolean equals(double x, double y, int maxUlps) {
 
 
-		assert (maxUlps > 0) && (maxUlps < (org.apache.commons.math.util.MathUtils.NAN_GAP));
 
-		long xInt = java.lang.Double.doubleToLongBits(x);
-		long yInt = java.lang.Double.doubleToLongBits(y);
 
 
-		if (xInt < 0) {
-			xInt = (org.apache.commons.math.util.MathUtils.SGN_MASK) - xInt;
-		}
-		if (yInt < 0) {
-			yInt = (org.apache.commons.math.util.MathUtils.SGN_MASK) - yInt;
-		}
 
-		final boolean isEqual = (org.apache.commons.math.util.FastMath.abs((xInt - yInt))) <= maxUlps;
 
-		return (isEqual && (!(java.lang.Double.isNaN(x)))) && (!(java.lang.Double.isNaN(y)));
-	}
 
 
 
@@ -505,9 +482,6 @@
 
 
 
-	public static boolean equalsIncludingNaN(double x, double y, int maxUlps) {
-		return ((java.lang.Double.isNaN(x)) && (java.lang.Double.isNaN(y))) || (org.apache.commons.math.util.MathUtils.equals(x, y, maxUlps));
-	}
 
 
 
@@ -519,20 +493,6 @@
 
 
 
-	public static boolean equals(double[] x, double[] y) {
-		if ((x == null) || (y == null)) {
-			return !((x == null) ^ (y == null));
-		}
-		if ((x.length) != (y.length)) {
-			return false;
-		}
-		for (int i = 0; i < (x.length); ++i) {
-			if (!(org.apache.commons.math.util.MathUtils.equals(x[i], y[i]))) {
-				return false;
-			}
-		}
-		return true;
-	}
 
 
 
@@ -544,20 +504,6 @@
 
 
 
-	public static boolean equalsIncludingNaN(double[] x, double[] y) {
-		if ((x == null) || (y == null)) {
-			return !((x == null) ^ (y == null));
-		}
-		if ((x.length) != (y.length)) {
-			return false;
-		}
-		for (int i = 0; i < (x.length); ++i) {
-			if (!(org.apache.commons.math.util.MathUtils.equalsIncludingNaN(x[i], y[i]))) {
-				return false;
-			}
-		}
-		return true;
-	}
 
 
 
@@ -581,18 +527,6 @@
 
 
 
-	public static long factorial(final int n) {
-		if (n < 0) {
-			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(
-			org.apache.commons.math.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, 
-			n);
-		}
-		if (n > 20) {
-			throw new java.lang.ArithmeticException(
-			"factorial value is too large to fit in a long");
-		}
-		return org.apache.commons.math.util.MathUtils.FACTORIALS[n];
-	}
 
 
 
@@ -614,17 +548,6 @@
 
 
 
-	public static double factorialDouble(final int n) {
-		if (n < 0) {
-			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(
-			org.apache.commons.math.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, 
-			n);
-		}
-		if (n < 21) {
-			return org.apache.commons.math.util.MathUtils.factorial(n);
-		}
-		return org.apache.commons.math.util.FastMath.floor(((org.apache.commons.math.util.FastMath.exp(org.apache.commons.math.util.MathUtils.factorialLog(n))) + 0.5));
-	}
 
 
 
@@ -639,21 +562,6 @@
 
 
 
-	public static double factorialLog(final int n) {
-		if (n < 0) {
-			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(
-			org.apache.commons.math.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, 
-			n);
-		}
-		if (n < 21) {
-			return org.apache.commons.math.util.FastMath.log(org.apache.commons.math.util.MathUtils.factorial(n));
-		}
-		double logSum = 0;
-		for (int i = 2; i <= n; i++) {
-			logSum += org.apache.commons.math.util.FastMath.log(i);
-		}
-		return logSum;
-	}
 
 
 
@@ -684,65 +592,23 @@
 
 
 
-	public static int gcd(final int p, final int q) {
-		int u = p;
-		int v = q;
-		if ((u == 0) || (v == 0)) {
-			if ((u == (java.lang.Integer.MIN_VALUE)) || (v == (java.lang.Integer.MIN_VALUE))) {
-				throw org.apache.commons.math.MathRuntimeException.createArithmeticException(
-				org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, 
-				p, q);
-			}
-			return (org.apache.commons.math.util.FastMath.abs(u)) + (org.apache.commons.math.util.FastMath.abs(v));
-		}
 
 
 
 
 
-		if (u > 0) {
-			u = -u;
-		}
-		if (v > 0) {
-			v = -v;
-		}
 
-		int k = 0;
-		while ((((u & 1) == 0) && ((v & 1) == 0)) && (k < 31)) {
 
-			u /= 2;
-			v /= 2;
-			k++;
-		} 
-		if (k == 31) {
-			throw org.apache.commons.math.MathRuntimeException.createArithmeticException(
-			org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, 
-			p, q);
-		}
 
 
-		int t = ((u & 1) == 1) ? v : -(u / 2);
 
 
-		do {
 
 
-			while ((t & 1) == 0) {
-				t /= 2;
-			} 
 
-			if (t > 0) {
-				u = -t;
-			}else {
-				v = t;
-			}
 
-			t = (v - u) / 2;
 
 
-		} while (t != 0 );
-		return (-u) * (1 << k);
-	}
 
 
 
@@ -773,65 +639,23 @@
 
 
 
-	public static long gcd(final long p, final long q) {
-		long u = p;
-		long v = q;
-		if ((u == 0) || (v == 0)) {
-			if ((u == (java.lang.Long.MIN_VALUE)) || (v == (java.lang.Long.MIN_VALUE))) {
-				throw org.apache.commons.math.MathRuntimeException.createArithmeticException(
-				org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_64_BITS, 
-				p, q);
-			}
-			return (org.apache.commons.math.util.FastMath.abs(u)) + (org.apache.commons.math.util.FastMath.abs(v));
-		}
 
 
 
 
 
-		if (u > 0) {
-			u = -u;
-		}
-		if (v > 0) {
-			v = -v;
-		}
 
-		int k = 0;
-		while ((((u & 1) == 0) && ((v & 1) == 0)) && (k < 63)) {
 
-			u /= 2;
-			v /= 2;
-			k++;
-		} 
-		if (k == 63) {
-			throw org.apache.commons.math.MathRuntimeException.createArithmeticException(
-			org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_64_BITS, 
-			p, q);
-		}
 
 
-		long t = ((u & 1) == 1) ? v : -(u / 2);
 
 
-		do {
 
 
-			while ((t & 1) == 0) {
-				t /= 2;
-			} 
 
-			if (t > 0) {
-				u = -t;
-			}else {
-				v = t;
-			}
 
-			t = (v - u) / 2;
 
 
-		} while (t != 0 );
-		return (-u) * (1L << k);
-	}
 
 
 
@@ -839,9 +663,6 @@
 
 
 
-	public static int hash(double value) {
-		return new java.lang.Double(value).hashCode();
-	}
 
 
 
@@ -850,9 +671,6 @@
 
 
 
-	public static int hash(double[] value) {
-		return java.util.Arrays.hashCode(value);
-	}
 
 
 
@@ -861,9 +679,6 @@
 
 
 
-	public static byte indicator(final byte x) {
-		return x >= (org.apache.commons.math.util.MathUtils.ZB) ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;
-	}
 
 
 
@@ -873,12 +688,6 @@
 
 
 
-	public static double indicator(final double x) {
-		if (java.lang.Double.isNaN(x)) {
-			return java.lang.Double.NaN;
-		}
-		return x >= 0.0 ? 1.0 : -1.0;
-	}
 
 
 
@@ -887,12 +696,6 @@
 
 
 
-	public static float indicator(final float x) {
-		if (java.lang.Float.isNaN(x)) {
-			return java.lang.Float.NaN;
-		}
-		return x >= 0.0F ? 1.0F : -1.0F;
-	}
 
 
 
@@ -900,9 +703,6 @@
 
 
 
-	public static int indicator(final int x) {
-		return x >= 0 ? 1 : -1;
-	}
 
 
 
@@ -910,9 +710,6 @@
 
 
 
-	public static long indicator(final long x) {
-		return x >= 0L ? 1L : -1L;
-	}
 
 
 
@@ -921,9 +718,6 @@
 
 
 
-	public static short indicator(final short x) {
-		return x >= (org.apache.commons.math.util.MathUtils.ZS) ? org.apache.commons.math.util.MathUtils.PS : org.apache.commons.math.util.MathUtils.NS;
-	}
 
 
 
@@ -948,18 +742,6 @@
 
 
 
-	public static int lcm(int a, int b) {
-		if ((a == 0) || (b == 0)) {
-			return 0;
-		}
-		int lcm = org.apache.commons.math.util.FastMath.abs(org.apache.commons.math.util.MathUtils.mulAndCheck((a / (org.apache.commons.math.util.MathUtils.gcd(a, b))), b));
-		if (lcm == (java.lang.Integer.MIN_VALUE)) {
-			throw org.apache.commons.math.MathRuntimeException.createArithmeticException(
-			org.apache.commons.math.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS, 
-			a, b);
-		}
-		return lcm;
-	}
 
 
 
@@ -983,18 +765,6 @@
 
 
 
-	public static long lcm(long a, long b) {
-		if ((a == 0) || (b == 0)) {
-			return 0;
-		}
-		long lcm = org.apache.commons.math.util.FastMath.abs(org.apache.commons.math.util.MathUtils.mulAndCheck((a / (org.apache.commons.math.util.MathUtils.gcd(a, b))), b));
-		if (lcm == (java.lang.Long.MIN_VALUE)) {
-			throw org.apache.commons.math.MathRuntimeException.createArithmeticException(
-			org.apache.commons.math.exception.util.LocalizedFormats.LCM_OVERFLOW_64_BITS, 
-			a, b);
-		}
-		return lcm;
-	}
 
 
 
@@ -1012,9 +782,6 @@
 
 
 
-	public static double log(double base, double x) {
-		return (org.apache.commons.math.util.FastMath.log(x)) / (org.apache.commons.math.util.FastMath.log(base));
-	}
 
 
 
@@ -1026,13 +793,6 @@
 
 
 
-	public static int mulAndCheck(int x, int y) {
-		long m = ((long) (x)) * ((long) (y));
-		if ((m < (java.lang.Integer.MIN_VALUE)) || (m > (java.lang.Integer.MAX_VALUE))) {
-			throw new java.lang.ArithmeticException("overflow: mul");
-		}
-		return ((int) (m));
-	}
 
 
 
@@ -1044,50 +804,16 @@
 
 
 
-	public static long mulAndCheck(long a, long b) {
-		long ret;
-		java.lang.String msg = "overflow: multiply";
-		if (a > b) {
 
-			ret = org.apache.commons.math.util.MathUtils.mulAndCheck(b, a);
-		}else {
-			if (a < 0) {
-				if (b < 0) {
 
-					if (a >= ((java.lang.Long.MAX_VALUE) / b)) {
-						ret = a * b;
-					}else {
-						throw new java.lang.ArithmeticException(msg);
-					}
-				}else 					if (b > 0) {
 
-						if (((java.lang.Long.MIN_VALUE) / b) <= a) {
-							ret = a * b;
-						}else {
-							throw new java.lang.ArithmeticException(msg);
 
-						}
-					}else {
 
-						ret = 0;
-					}
-			}else 				if (a > 0) {
 
 
 
 
-					if (a <= ((java.lang.Long.MAX_VALUE) / b)) {
-						ret = a * b;
-					}else {
-						throw new java.lang.ArithmeticException(msg);
-					}
-				}else {
 
-					ret = 0;
-				}
-		}
-		return ret;
-	}
 
 
 
@@ -1098,23 +824,13 @@
 
 
 
-	public static double scalb(final double d, final int scaleFactor) {
 
 
-		if (((d == 0) || (java.lang.Double.isNaN(d))) || (java.lang.Double.isInfinite(d))) {
-			return d;
-		}
 
 
-		final long bits = java.lang.Double.doubleToLongBits(d);
-		final long exponent = bits & 9218868437227405312L;
-		final long rest = bits & -9218868437227405313L;
 
 
-		final long newBits = rest | (exponent + (((long) (scaleFactor)) << 52));
-		return java.lang.Double.longBitsToDouble(newBits);
 
-	}
 
 
 
@@ -1135,9 +851,6 @@
 
 
 
-	public static double normalizeAngle(double a, double center) {
-		return a - ((org.apache.commons.math.util.MathUtils.TWO_PI) * (org.apache.commons.math.util.FastMath.floor((((a + (org.apache.commons.math.util.FastMath.PI)) - center) / (org.apache.commons.math.util.MathUtils.TWO_PI)))));
-	}
 
 
 
@@ -1160,40 +873,6 @@
 
 
 
-	public static double[] normalizeArray(double[] values, double normalizedSum) throws 
-	java.lang.ArithmeticException, java.lang.IllegalArgumentException {
-		if (java.lang.Double.isInfinite(normalizedSum)) {
-			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(
-			org.apache.commons.math.exception.util.LocalizedFormats.NORMALIZE_INFINITE);
-		}
-		if (java.lang.Double.isNaN(normalizedSum)) {
-			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(
-			org.apache.commons.math.exception.util.LocalizedFormats.NORMALIZE_NAN);
-		}
-		double sum = 0.0;
-		final int len = values.length;
-		double[] out = new double[len];
-		for (int i = 0; i < len; i++) {
-			if (java.lang.Double.isInfinite(values[i])) {
-				throw org.apache.commons.math.MathRuntimeException.createArithmeticException(
-				org.apache.commons.math.exception.util.LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);
-			}
-			if (!(java.lang.Double.isNaN(values[i]))) {
-				sum += values[i];
-			}
-		}
-		if (sum == 0) {
-			throw org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.ARRAY_SUMS_TO_ZERO);
-		}
-		for (int i = 0; i < len; i++) {
-			if (java.lang.Double.isNaN(values[i])) {
-				out[i] = java.lang.Double.NaN;
-			}else {
-				out[i] = ((values[i]) * normalizedSum) / sum;
-			}
-		}
-		return out;
-	}
 
 
 
@@ -1204,9 +883,6 @@
 
 
 
-	public static double round(double x, int scale) {
-		return org.apache.commons.math.util.MathUtils.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP);
-	}
 
 
 
@@ -1220,20 +896,7 @@
 
 
 
-	public static double round(double x, int scale, int roundingMethod) {
-		try {
-			return new java.math.BigDecimal(
-			java.lang.Double.toString(x)).setScale(
-			scale, roundingMethod).doubleValue();
 
-		} catch (java.lang.NumberFormatException ex) {
-			if (java.lang.Double.isInfinite(x)) {
-				return x;
-			}else {
-				return java.lang.Double.NaN;
-			}
-		}
-	}
 
 
 
@@ -1244,9 +907,6 @@
 
 
 
-	public static float round(float x, int scale) {
-		return org.apache.commons.math.util.MathUtils.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP);
-	}
 
 
 
@@ -1260,11 +920,6 @@
 
 
 
-	public static float round(float x, int scale, int roundingMethod) {
-		float sign = org.apache.commons.math.util.MathUtils.indicator(x);
-		float factor = ((float) (org.apache.commons.math.util.FastMath.pow(10.0F, scale))) * sign;
-		return ((float) (org.apache.commons.math.util.MathUtils.roundUnscaled((x * factor), sign, roundingMethod))) / factor;
-	}
 
 
 
@@ -1278,41 +933,386 @@
 
 
 
-	private static double roundUnscaled(double unscaled, double sign, 
-	int roundingMethod) {
-		switch (roundingMethod) {
-			case java.math.BigDecimal.ROUND_CEILING :
-				if (sign == (-1)) {
-					unscaled = org.apache.commons.math.util.FastMath.floor(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));
-				}else {
-					unscaled = org.apache.commons.math.util.FastMath.ceil(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));
-				}
-				break;
-			case java.math.BigDecimal.ROUND_DOWN :
-				unscaled = org.apache.commons.math.util.FastMath.floor(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));
-				break;
-			case java.math.BigDecimal.ROUND_FLOOR :
-				if (sign == (-1)) {
-					unscaled = org.apache.commons.math.util.FastMath.ceil(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));
-				}else {
-					unscaled = org.apache.commons.math.util.FastMath.floor(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));
-				}
-				break;
-			case java.math.BigDecimal.ROUND_HALF_DOWN : 				{
-					unscaled = org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY);
-					double fraction = unscaled - (org.apache.commons.math.util.FastMath.floor(unscaled));
-					if (fraction > 0.5) {
-						unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);
-					}else {
-						unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);
-					}
-					break;
-				}
-			case java.math.BigDecimal.ROUND_HALF_EVEN : 				{
-					double fraction = unscaled - (org.apache.commons.math.util.FastMath.floor(unscaled));
-					if (fraction > 0.5) {
-						unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);
-					}else 						if (fraction < 0.5) {
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+		(x < 0.5) && (java.lang.Double.isNaN(y))) || (x == y);} 	public static boolean equalsIncludingNaN(double x, double y) { 		return ((java.lang.Double.isNaN(x)) && (java.lang.Double.isNaN(y))) || (org.apache.commons.math.util.MathUtils.equals(x, y, 1));} 	public static boolean equals(double x, double y, double eps) { 		return (org.apache.commons.math.util.MathUtils.equals(x, y, 1)) || ((org.apache.commons.math.util.FastMath.abs((y - x))) <= eps);} 	public static boolean equalsIncludingNaN(double x, double y, double eps) { 		return (org.apache.commons.math.util.MathUtils.equalsIncludingNaN(x, y)) || ((org.apache.commons.math.util.FastMath.abs((y - x))) <= eps);} 	public static boolean equals(double x, double y, int maxUlps) { 		assert (maxUlps > 0) && (maxUlps < (org.apache.commons.math.util.MathUtils.NAN_GAP)); 		long xInt = java.lang.Double.doubleToLongBits(x); 		long yInt = java.lang.Double.doubleToLongBits(y); 		if (xInt < 0) { 			xInt = (org.apache.commons.math.util.MathUtils.SGN_MASK) - xInt;} 		if (yInt < 0) { 			yInt = (org.apache.commons.math.util.MathUtils.SGN_MASK) - yInt;} 		final boolean isEqual = (org.apache.commons.math.util.FastMath.abs((xInt - yInt))) <= maxUlps; 		return (isEqual && (!(java.lang.Double.isNaN(x)))) && (!(java.lang.Double.isNaN(y)));} 	public static boolean equalsIncludingNaN(double x, double y, int maxUlps) { 		return ((java.lang.Double.isNaN(x)) && (java.lang.Double.isNaN(y))) || (org.apache.commons.math.util.MathUtils.equals(x, y, maxUlps));} 	public static boolean equals(double[] x, double[] y) { 		if ((x == null) || (y == null)) { 			return !((x == null) ^ (y == null));} 		if ((x.length) != (y.length)) { 			return false;} 		for (int i = 0; i < (x.length); ++i) { 			if (!(org.apache.commons.math.util.MathUtils.equals(x[i], y[i]))) { 				return false;}} 		return true;} 	public static boolean equalsIncludingNaN(double[] x, double[] y) { 		if ((x == null) || (y == null)) { 			return !((x == null) ^ (y == null));} 		if ((x.length) != (y.length)) { 			return false;} 		for (int i = 0; i < (x.length); ++i) { 			if (!(org.apache.commons.math.util.MathUtils.equalsIncludingNaN(x[i], y[i]))) { 				return false;}} 		return true;} 	public static long factorial(final int n) { 		if (n < 0) { 			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, n);} 		if (n > 20) { 			throw new java.lang.ArithmeticException("factorial value is too large to fit in a long");} 		return org.apache.commons.math.util.MathUtils.FACTORIALS[n];} 	public static double factorialDouble(final int n) { 		if (n < 0) { 			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, n);} 		if (n < 21) { 			return org.apache.commons.math.util.MathUtils.factorial(n);} 		return org.apache.commons.math.util.FastMath.floor(((org.apache.commons.math.util.FastMath.exp(org.apache.commons.math.util.MathUtils.factorialLog(n))) + 0.5));} 	public static double factorialLog(final int n) { 		if (n < 0) { 			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, n);} 		if (n < 21) { 			return org.apache.commons.math.util.FastMath.log(org.apache.commons.math.util.MathUtils.factorial(n));} 		double logSum = 0; 		for (int i = 2; i <= n; i++) { 			logSum += org.apache.commons.math.util.FastMath.log(i);} 		return logSum;} 	public static int gcd(final int p, final int q) { 		int u = p; 		int v = q; 		if ((u == 0) || (v == 0)) { 			if ((u == (java.lang.Integer.MIN_VALUE)) || (v == (java.lang.Integer.MIN_VALUE))) { 				throw org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, p, q);} 			return (org.apache.commons.math.util.FastMath.abs(u)) + (org.apache.commons.math.util.FastMath.abs(v));} 		if (u > 0) { 			u = -u;} 		if (v > 0) { 			v = -v;} 		int k = 0; 		while ((((u & 1) == 0) && ((v & 1) == 0)) && (k < 31)) { 			u /= 2; 			v /= 2; 			k++;} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, p, q);} 		int t = ((u & 1) == 1) ? v : -(u / 2); 		do { 			while ((t & 1) == 0) { 				t /= 2;} 			if (t > 0) { 				u = -t;}else { 				v = t;} 			t = (v - u) / 2;} while (t != 0 ); 		return (-u) * (1 << k);} 	public static long gcd(final long p, final long q) { 		long u = p; 		long v = q; 		if ((u == 0) || (v == 0)) { 			if ((u == (java.lang.Long.MIN_VALUE)) || (v == (java.lang.Long.MIN_VALUE))) { 				throw org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_64_BITS, p, q);} 			return (org.apache.commons.math.util.FastMath.abs(u)) + (org.apache.commons.math.util.FastMath.abs(v));} 		if (u > 0) { 			u = -u;} 		if (v > 0) { 			v = -v;} 		int k = 0; 		while ((((u & 1) == 0) && ((v & 1) == 0)) && (k < 63)) { 			u /= 2; 			v /= 2; 			k++;} 		if (k == 63) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_64_BITS, p, q);} 		long t = ((u & 1) == 1) ? v : -(u / 2); 		do { 			while ((t & 1) == 0) { 				t /= 2;} 			if (t > 0) { 				u = -t;}else { 				v = t;} 			t = (v - u) / 2;} while (t != 0 ); 		return (-u) * (1L << k);} 	public static int hash(double value) { 		return new java.lang.Double(value).hashCode();} 	public static int hash(double[] value) { 		return java.util.Arrays.hashCode(value);} 	public static byte indicator(final byte x) { 		return x >= (org.apache.commons.math.util.MathUtils.ZB) ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;} 	public static double indicator(final double x) { 		if (java.lang.Double.isNaN(x)) { 			return java.lang.Double.NaN;} 		return x >= 0.0 ? 1.0 : -1.0;} 	public static float indicator(final float x) { 		if (java.lang.Float.isNaN(x)) { 			return java.lang.Float.NaN;} 		return x >= 0.0F ? 1.0F : -1.0F;} 	public static int indicator(final int x) { 		return x >= 0 ? 1 : -1;} 	public static long indicator(final long x) { 		return x >= 0L ? 1L : -1L;} 	public static short indicator(final short x) { 		return x >= (org.apache.commons.math.util.MathUtils.ZS) ? org.apache.commons.math.util.MathUtils.PS : org.apache.commons.math.util.MathUtils.NS;} 	public static int lcm(int a, int b) { 		if ((a == 0) || (b == 0)) { 			return 0;} 		int lcm = org.apache.commons.math.util.FastMath.abs(org.apache.commons.math.util.MathUtils.mulAndCheck((a / (org.apache.commons.math.util.MathUtils.gcd(a, b))), b)); 		if (lcm == (java.lang.Integer.MIN_VALUE)) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS, a, b);} 		return lcm;} 	public static long lcm(long a, long b) { 		if ((a == 0) || (b == 0)) { 			return 0;} 		long lcm = org.apache.commons.math.util.FastMath.abs(org.apache.commons.math.util.MathUtils.mulAndCheck((a / (org.apache.commons.math.util.MathUtils.gcd(a, b))), b)); 		if (lcm == (java.lang.Long.MIN_VALUE)) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.LCM_OVERFLOW_64_BITS, a, b);} 		return lcm;} 	public static double log(double base, double x) { 		return (org.apache.commons.math.util.FastMath.log(x)) / (org.apache.commons.math.util.FastMath.log(base));} 	public static int mulAndCheck(int x, int y) { 		long m = ((long) (x)) * ((long) (y)); 		if ((m < (java.lang.Integer.MIN_VALUE)) || (m > (java.lang.Integer.MAX_VALUE))) { 			throw new java.lang.ArithmeticException("overflow: mul");} 		return ((int) (m));} 	public static long mulAndCheck(long a, long b) { 		long ret; 		java.lang.String msg = "overflow: multiply"; 		if (a > b) { 			ret = org.apache.commons.math.util.MathUtils.mulAndCheck(b, a);}else { 			if (a < 0) { 				if (b < 0) { 					if (a >= ((java.lang.Long.MAX_VALUE) / b)) { 						ret = a * b;}else { 						throw new java.lang.ArithmeticException(msg);}}else 					if (b > 0) { 						if (((java.lang.Long.MIN_VALUE) / b) <= a) { 							ret = a * b;}else { 							throw new java.lang.ArithmeticException(msg);}}else { 						ret = 0;}}else 				if (a > 0) { 					if (a <= ((java.lang.Long.MAX_VALUE) / b)) { 						ret = a * b;}else { 						throw new java.lang.ArithmeticException(msg);}}else { 					ret = 0;}} 		return ret;} 	public static double scalb(final double d, final int scaleFactor) { 		if (((d == 0) || (java.lang.Double.isNaN(d))) || (java.lang.Double.isInfinite(d))) { 			return d;} 		final long bits = java.lang.Double.doubleToLongBits(d); 		final long exponent = bits & 9218868437227405312L; 		final long rest = bits & -9218868437227405313L; 		final long newBits = rest | (exponent + (((long) (scaleFactor)) << 52)); 		return java.lang.Double.longBitsToDouble(newBits);} 	public static double normalizeAngle(double a, double center) { 		return a - ((org.apache.commons.math.util.MathUtils.TWO_PI) * (org.apache.commons.math.util.FastMath.floor((((a + (org.apache.commons.math.util.FastMath.PI)) - center) / (org.apache.commons.math.util.MathUtils.TWO_PI)))));} 	public static double[] normalizeArray(double[] values, double normalizedSum) throws java.lang.ArithmeticException, java.lang.IllegalArgumentException { 		if (java.lang.Double.isInfinite(normalizedSum)) { 			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.NORMALIZE_INFINITE);} 		if (java.lang.Double.isNaN(normalizedSum)) { 			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.NORMALIZE_NAN);} 		double sum = 0.0; 		final int len = values.length; 		double[] out = new double[len]; 		for (int i = 0; i < len; i++) { 			if (java.lang.Double.isInfinite(values[i])) { 				throw org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);} 			if (!(java.lang.Double.isNaN(values[i]))) { 				sum += values[i];}} 		if (sum == 0) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.ARRAY_SUMS_TO_ZERO);} 		for (int i = 0; i < len; i++) { 			if (java.lang.Double.isNaN(values[i])) { 				out[i] = java.lang.Double.NaN;}else { 				out[i] = ((values[i]) * normalizedSum) / sum;}} 		return out;} 	public static double round(double x, int scale) { 		return org.apache.commons.math.util.MathUtils.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP);} 	public static double round(double x, int scale, int roundingMethod) { 		try { 			return new java.math.BigDecimal(java.lang.Double.toString(x)).setScale(scale, roundingMethod).doubleValue();} catch (java.lang.NumberFormatException ex) { 			if (java.lang.Double.isInfinite(x)) { 				return x;}else { 				return java.lang.Double.NaN;}}} 	public static float round(float x, int scale) { 		return org.apache.commons.math.util.MathUtils.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP);} 	public static float round(float x, int scale, int roundingMethod) { 		float sign = org.apache.commons.math.util.MathUtils.indicator(x); 		float factor = ((float) (org.apache.commons.math.util.FastMath.pow(10.0F, scale))) * sign; 		return ((float) (org.apache.commons.math.util.MathUtils.roundUnscaled((x * factor), sign, roundingMethod))) / factor;} 	private static double roundUnscaled(double unscaled, double sign, int roundingMethod) { 		switch (roundingMethod) { 			case java.math.BigDecimal.ROUND_CEILING : 				if (sign == (-1)) { 					unscaled = org.apache.commons.math.util.FastMath.floor(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));}else { 					unscaled = org.apache.commons.math.util.FastMath.ceil(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));} 				break; 			case java.math.BigDecimal.ROUND_DOWN : 				unscaled = org.apache.commons.math.util.FastMath.floor(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY)); 				break; 			case java.math.BigDecimal.ROUND_FLOOR : 				if (sign == (-1)) { 					unscaled = org.apache.commons.math.util.FastMath.ceil(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));}else { 					unscaled = org.apache.commons.math.util.FastMath.floor(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));} 				break; 			case java.math.BigDecimal.ROUND_HALF_DOWN : 				{ 					unscaled = org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY); 					double fraction = unscaled - (org.apache.commons.math.util.FastMath.floor(unscaled)); 					if (fraction > 0.5) { 						unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);}else { 						unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);} 					break;} 			case java.math.BigDecimal.ROUND_HALF_EVEN : 				{ 					double fraction = unscaled - (org.apache.commons.math.util.FastMath.floor(unscaled)); 					if (fraction > 0.5) { 						unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);}else 						if (fraction < 0.5) {
 							unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);
 						}else {
 



Astor Output:

General stats:
EXECUTION_IDENTIFIER=Math-63
TOTAL_TIME=108.379
NR_GENERATIONS=3
NR_RIGHT_COMPILATIONS=3
NR_FAILLING_COMPILATIONS=null
NR_ERRONEOUS_VARIANCES=null
NR_FAILING_VALIDATION_PROCESS=null
OUTPUT_STATUS=STOP_BY_PATCH_FOUND

Patch stats:

Patch 1
VARIANT_ID=6
TIME=107
VALIDATION=|true|0|2282|[]|
GENERATION=3
FOLDER_SOLUTION_CODE=/tmp/Cardumen_Defects4J_Math_63/./output_astor/AstorMain-Math-63//src//variant-6
--Patch Hunk #1
OPERATOR=ExpressionReplaceOperator

LOCATION=org.apache.commons.math.util.MathUtils

PATH=/tmp/Cardumen_Defects4J_Math_63/src/main/java/org/apache/commons/math/util/MathUtils.java

MODIFIED_FILE_PATH=/tmp/Cardumen_Defects4J_Math_63/./output_astor/AstorMain-Math-63//src//variant-6/org/apache/commons/math/util/MathUtils.java

LINE=417

SUSPICIOUNESS=1

MP_RANKING=0

ORIGINAL_CODE=(java.lang.Double.isNaN(x))

BUGGY_CODE_TYPE=CtInvocationImpl|CtBinaryOperatorImpl

PATCH_HUNK_CODE=(x < 0.5)

PATCH_HUNK_TYPE=CtBinaryOperatorImpl|CtBinaryOperatorImpl

INGREDIENT_SCOPE=-

INGREDIENT_PARENT=_double_0 < 0.5

PATCH_DIFF_ORIG=--- /tmp/Cardumen_Defects4J_Math_63/src/main/java/org/apache/commons/math/util/MathUtilsjava
+++ /tmp/Cardumen_Defects4J_Math_63/src/main/java/org/apache/commons/math/util/MathUtilsjava
@@ -414,8 +414,7 @@
 
 
 	public static boolean equals(double x, double y) {
-		return ((java.lang.Double.isNaN(x)) && (java.lang.Double.isNaN(y))) || (x == y);
-	}
+		return (
 
 
 
@@ -425,9 +424,6 @@
 
 
 
-	public static boolean equalsIncludingNaN(double x, double y) {
-		return ((java.lang.Double.isNaN(x)) && (java.lang.Double.isNaN(y))) || (org.apache.commons.math.util.MathUtils.equals(x, y, 1));
-	}
 
 
 
@@ -438,9 +434,6 @@
 
 
 
-	public static boolean equals(double x, double y, double eps) {
-		return (org.apache.commons.math.util.MathUtils.equals(x, y, 1)) || ((org.apache.commons.math.util.FastMath.abs((y - x))) <= eps);
-	}
 
 
 
@@ -452,9 +445,6 @@
 
 
 
-	public static boolean equalsIncludingNaN(double x, double y, double eps) {
-		return (org.apache.commons.math.util.MathUtils.equalsIncludingNaN(x, y)) || ((org.apache.commons.math.util.FastMath.abs((y - x))) <= eps);
-	}
 
 
 
@@ -473,26 +463,13 @@
 
 
 
-	public static boolean equals(double x, double y, int maxUlps) {
 
 
-		assert (maxUlps > 0) && (maxUlps < (org.apache.commons.math.util.MathUtils.NAN_GAP));
 
-		long xInt = java.lang.Double.doubleToLongBits(x);
-		long yInt = java.lang.Double.doubleToLongBits(y);
 
 
-		if (xInt < 0) {
-			xInt = (org.apache.commons.math.util.MathUtils.SGN_MASK) - xInt;
-		}
-		if (yInt < 0) {
-			yInt = (org.apache.commons.math.util.MathUtils.SGN_MASK) - yInt;
-		}
 
-		final boolean isEqual = (org.apache.commons.math.util.FastMath.abs((xInt - yInt))) <= maxUlps;
 
-		return (isEqual && (!(java.lang.Double.isNaN(x)))) && (!(java.lang.Double.isNaN(y)));
-	}
 
 
 
@@ -505,9 +482,6 @@
 
 
 
-	public static boolean equalsIncludingNaN(double x, double y, int maxUlps) {
-		return ((java.lang.Double.isNaN(x)) && (java.lang.Double.isNaN(y))) || (org.apache.commons.math.util.MathUtils.equals(x, y, maxUlps));
-	}
 
 
 
@@ -519,20 +493,6 @@
 
 
 
-	public static boolean equals(double[] x, double[] y) {
-		if ((x == null) || (y == null)) {
-			return !((x == null) ^ (y == null));
-		}
-		if ((x.length) != (y.length)) {
-			return false;
-		}
-		for (int i = 0; i < (x.length); ++i) {
-			if (!(org.apache.commons.math.util.MathUtils.equals(x[i], y[i]))) {
-				return false;
-			}
-		}
-		return true;
-	}
 
 
 
@@ -544,20 +504,6 @@
 
 
 
-	public static boolean equalsIncludingNaN(double[] x, double[] y) {
-		if ((x == null) || (y == null)) {
-			return !((x == null) ^ (y == null));
-		}
-		if ((x.length) != (y.length)) {
-			return false;
-		}
-		for (int i = 0; i < (x.length); ++i) {
-			if (!(org.apache.commons.math.util.MathUtils.equalsIncludingNaN(x[i], y[i]))) {
-				return false;
-			}
-		}
-		return true;
-	}
 
 
 
@@ -581,18 +527,6 @@
 
 
 
-	public static long factorial(final int n) {
-		if (n < 0) {
-			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(
-			org.apache.commons.math.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, 
-			n);
-		}
-		if (n > 20) {
-			throw new java.lang.ArithmeticException(
-			"factorial value is too large to fit in a long");
-		}
-		return org.apache.commons.math.util.MathUtils.FACTORIALS[n];
-	}
 
 
 
@@ -614,17 +548,6 @@
 
 
 
-	public static double factorialDouble(final int n) {
-		if (n < 0) {
-			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(
-			org.apache.commons.math.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, 
-			n);
-		}
-		if (n < 21) {
-			return org.apache.commons.math.util.MathUtils.factorial(n);
-		}
-		return org.apache.commons.math.util.FastMath.floor(((org.apache.commons.math.util.FastMath.exp(org.apache.commons.math.util.MathUtils.factorialLog(n))) + 0.5));
-	}
 
 
 
@@ -639,21 +562,6 @@
 
 
 
-	public static double factorialLog(final int n) {
-		if (n < 0) {
-			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(
-			org.apache.commons.math.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, 
-			n);
-		}
-		if (n < 21) {
-			return org.apache.commons.math.util.FastMath.log(org.apache.commons.math.util.MathUtils.factorial(n));
-		}
-		double logSum = 0;
-		for (int i = 2; i <= n; i++) {
-			logSum += org.apache.commons.math.util.FastMath.log(i);
-		}
-		return logSum;
-	}
 
 
 
@@ -684,65 +592,23 @@
 
 
 
-	public static int gcd(final int p, final int q) {
-		int u = p;
-		int v = q;
-		if ((u == 0) || (v == 0)) {
-			if ((u == (java.lang.Integer.MIN_VALUE)) || (v == (java.lang.Integer.MIN_VALUE))) {
-				throw org.apache.commons.math.MathRuntimeException.createArithmeticException(
-				org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, 
-				p, q);
-			}
-			return (org.apache.commons.math.util.FastMath.abs(u)) + (org.apache.commons.math.util.FastMath.abs(v));
-		}
 
 
 
 
 
-		if (u > 0) {
-			u = -u;
-		}
-		if (v > 0) {
-			v = -v;
-		}
 
-		int k = 0;
-		while ((((u & 1) == 0) && ((v & 1) == 0)) && (k < 31)) {
 
-			u /= 2;
-			v /= 2;
-			k++;
-		} 
-		if (k == 31) {
-			throw org.apache.commons.math.MathRuntimeException.createArithmeticException(
-			org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, 
-			p, q);
-		}
 
 
-		int t = ((u & 1) == 1) ? v : -(u / 2);
 
 
-		do {
 
 
-			while ((t & 1) == 0) {
-				t /= 2;
-			} 
 
-			if (t > 0) {
-				u = -t;
-			}else {
-				v = t;
-			}
 
-			t = (v - u) / 2;
 
 
-		} while (t != 0 );
-		return (-u) * (1 << k);
-	}
 
 
 
@@ -773,65 +639,23 @@
 
 
 
-	public static long gcd(final long p, final long q) {
-		long u = p;
-		long v = q;
-		if ((u == 0) || (v == 0)) {
-			if ((u == (java.lang.Long.MIN_VALUE)) || (v == (java.lang.Long.MIN_VALUE))) {
-				throw org.apache.commons.math.MathRuntimeException.createArithmeticException(
-				org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_64_BITS, 
-				p, q);
-			}
-			return (org.apache.commons.math.util.FastMath.abs(u)) + (org.apache.commons.math.util.FastMath.abs(v));
-		}
 
 
 
 
 
-		if (u > 0) {
-			u = -u;
-		}
-		if (v > 0) {
-			v = -v;
-		}
 
-		int k = 0;
-		while ((((u & 1) == 0) && ((v & 1) == 0)) && (k < 63)) {
 
-			u /= 2;
-			v /= 2;
-			k++;
-		} 
-		if (k == 63) {
-			throw org.apache.commons.math.MathRuntimeException.createArithmeticException(
-			org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_64_BITS, 
-			p, q);
-		}
 
 
-		long t = ((u & 1) == 1) ? v : -(u / 2);
 
 
-		do {
 
 
-			while ((t & 1) == 0) {
-				t /= 2;
-			} 
 
-			if (t > 0) {
-				u = -t;
-			}else {
-				v = t;
-			}
 
-			t = (v - u) / 2;
 
 
-		} while (t != 0 );
-		return (-u) * (1L << k);
-	}
 
 
 
@@ -839,9 +663,6 @@
 
 
 
-	public static int hash(double value) {
-		return new java.lang.Double(value).hashCode();
-	}
 
 
 
@@ -850,9 +671,6 @@
 
 
 
-	public static int hash(double[] value) {
-		return java.util.Arrays.hashCode(value);
-	}
 
 
 
@@ -861,9 +679,6 @@
 
 
 
-	public static byte indicator(final byte x) {
-		return x >= (org.apache.commons.math.util.MathUtils.ZB) ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;
-	}
 
 
 
@@ -873,12 +688,6 @@
 
 
 
-	public static double indicator(final double x) {
-		if (java.lang.Double.isNaN(x)) {
-			return java.lang.Double.NaN;
-		}
-		return x >= 0.0 ? 1.0 : -1.0;
-	}
 
 
 
@@ -887,12 +696,6 @@
 
 
 
-	public static float indicator(final float x) {
-		if (java.lang.Float.isNaN(x)) {
-			return java.lang.Float.NaN;
-		}
-		return x >= 0.0F ? 1.0F : -1.0F;
-	}
 
 
 
@@ -900,9 +703,6 @@
 
 
 
-	public static int indicator(final int x) {
-		return x >= 0 ? 1 : -1;
-	}
 
 
 
@@ -910,9 +710,6 @@
 
 
 
-	public static long indicator(final long x) {
-		return x >= 0L ? 1L : -1L;
-	}
 
 
 
@@ -921,9 +718,6 @@
 
 
 
-	public static short indicator(final short x) {
-		return x >= (org.apache.commons.math.util.MathUtils.ZS) ? org.apache.commons.math.util.MathUtils.PS : org.apache.commons.math.util.MathUtils.NS;
-	}
 
 
 
@@ -948,18 +742,6 @@
 
 
 
-	public static int lcm(int a, int b) {
-		if ((a == 0) || (b == 0)) {
-			return 0;
-		}
-		int lcm = org.apache.commons.math.util.FastMath.abs(org.apache.commons.math.util.MathUtils.mulAndCheck((a / (org.apache.commons.math.util.MathUtils.gcd(a, b))), b));
-		if (lcm == (java.lang.Integer.MIN_VALUE)) {
-			throw org.apache.commons.math.MathRuntimeException.createArithmeticException(
-			org.apache.commons.math.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS, 
-			a, b);
-		}
-		return lcm;
-	}
 
 
 
@@ -983,18 +765,6 @@
 
 
 
-	public static long lcm(long a, long b) {
-		if ((a == 0) || (b == 0)) {
-			return 0;
-		}
-		long lcm = org.apache.commons.math.util.FastMath.abs(org.apache.commons.math.util.MathUtils.mulAndCheck((a / (org.apache.commons.math.util.MathUtils.gcd(a, b))), b));
-		if (lcm == (java.lang.Long.MIN_VALUE)) {
-			throw org.apache.commons.math.MathRuntimeException.createArithmeticException(
-			org.apache.commons.math.exception.util.LocalizedFormats.LCM_OVERFLOW_64_BITS, 
-			a, b);
-		}
-		return lcm;
-	}
 
 
 
@@ -1012,9 +782,6 @@
 
 
 
-	public static double log(double base, double x) {
-		return (org.apache.commons.math.util.FastMath.log(x)) / (org.apache.commons.math.util.FastMath.log(base));
-	}
 
 
 
@@ -1026,13 +793,6 @@
 
 
 
-	public static int mulAndCheck(int x, int y) {
-		long m = ((long) (x)) * ((long) (y));
-		if ((m < (java.lang.Integer.MIN_VALUE)) || (m > (java.lang.Integer.MAX_VALUE))) {
-			throw new java.lang.ArithmeticException("overflow: mul");
-		}
-		return ((int) (m));
-	}
 
 
 
@@ -1044,50 +804,16 @@
 
 
 
-	public static long mulAndCheck(long a, long b) {
-		long ret;
-		java.lang.String msg = "overflow: multiply";
-		if (a > b) {
 
-			ret = org.apache.commons.math.util.MathUtils.mulAndCheck(b, a);
-		}else {
-			if (a < 0) {
-				if (b < 0) {
 
-					if (a >= ((java.lang.Long.MAX_VALUE) / b)) {
-						ret = a * b;
-					}else {
-						throw new java.lang.ArithmeticException(msg);
-					}
-				}else 					if (b > 0) {
 
-						if (((java.lang.Long.MIN_VALUE) / b) <= a) {
-							ret = a * b;
-						}else {
-							throw new java.lang.ArithmeticException(msg);
 
-						}
-					}else {
 
-						ret = 0;
-					}
-			}else 				if (a > 0) {
 
 
 
 
-					if (a <= ((java.lang.Long.MAX_VALUE) / b)) {
-						ret = a * b;
-					}else {
-						throw new java.lang.ArithmeticException(msg);
-					}
-				}else {
 
-					ret = 0;
-				}
-		}
-		return ret;
-	}
 
 
 
@@ -1098,23 +824,13 @@
 
 
 
-	public static double scalb(final double d, final int scaleFactor) {
 
 
-		if (((d == 0) || (java.lang.Double.isNaN(d))) || (java.lang.Double.isInfinite(d))) {
-			return d;
-		}
 
 
-		final long bits = java.lang.Double.doubleToLongBits(d);
-		final long exponent = bits & 9218868437227405312L;
-		final long rest = bits & -9218868437227405313L;
 
 
-		final long newBits = rest | (exponent + (((long) (scaleFactor)) << 52));
-		return java.lang.Double.longBitsToDouble(newBits);
 
-	}
 
 
 
@@ -1135,9 +851,6 @@
 
 
 
-	public static double normalizeAngle(double a, double center) {
-		return a - ((org.apache.commons.math.util.MathUtils.TWO_PI) * (org.apache.commons.math.util.FastMath.floor((((a + (org.apache.commons.math.util.FastMath.PI)) - center) / (org.apache.commons.math.util.MathUtils.TWO_PI)))));
-	}
 
 
 
@@ -1160,40 +873,6 @@
 
 
 
-	public static double[] normalizeArray(double[] values, double normalizedSum) throws 
-	java.lang.ArithmeticException, java.lang.IllegalArgumentException {
-		if (java.lang.Double.isInfinite(normalizedSum)) {
-			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(
-			org.apache.commons.math.exception.util.LocalizedFormats.NORMALIZE_INFINITE);
-		}
-		if (java.lang.Double.isNaN(normalizedSum)) {
-			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(
-			org.apache.commons.math.exception.util.LocalizedFormats.NORMALIZE_NAN);
-		}
-		double sum = 0.0;
-		final int len = values.length;
-		double[] out = new double[len];
-		for (int i = 0; i < len; i++) {
-			if (java.lang.Double.isInfinite(values[i])) {
-				throw org.apache.commons.math.MathRuntimeException.createArithmeticException(
-				org.apache.commons.math.exception.util.LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);
-			}
-			if (!(java.lang.Double.isNaN(values[i]))) {
-				sum += values[i];
-			}
-		}
-		if (sum == 0) {
-			throw org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.ARRAY_SUMS_TO_ZERO);
-		}
-		for (int i = 0; i < len; i++) {
-			if (java.lang.Double.isNaN(values[i])) {
-				out[i] = java.lang.Double.NaN;
-			}else {
-				out[i] = ((values[i]) * normalizedSum) / sum;
-			}
-		}
-		return out;
-	}
 
 
 
@@ -1204,9 +883,6 @@
 
 
 
-	public static double round(double x, int scale) {
-		return org.apache.commons.math.util.MathUtils.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP);
-	}
 
 
 
@@ -1220,20 +896,7 @@
 
 
 
-	public static double round(double x, int scale, int roundingMethod) {
-		try {
-			return new java.math.BigDecimal(
-			java.lang.Double.toString(x)).setScale(
-			scale, roundingMethod).doubleValue();
 
-		} catch (java.lang.NumberFormatException ex) {
-			if (java.lang.Double.isInfinite(x)) {
-				return x;
-			}else {
-				return java.lang.Double.NaN;
-			}
-		}
-	}
 
 
 
@@ -1244,9 +907,6 @@
 
 
 
-	public static float round(float x, int scale) {
-		return org.apache.commons.math.util.MathUtils.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP);
-	}
 
 
 
@@ -1260,11 +920,6 @@
 
 
 
-	public static float round(float x, int scale, int roundingMethod) {
-		float sign = org.apache.commons.math.util.MathUtils.indicator(x);
-		float factor = ((float) (org.apache.commons.math.util.FastMath.pow(10.0F, scale))) * sign;
-		return ((float) (org.apache.commons.math.util.MathUtils.roundUnscaled((x * factor), sign, roundingMethod))) / factor;
-	}
 
 
 
@@ -1278,41 +933,386 @@
 
 
 
-	private static double roundUnscaled(double unscaled, double sign, 
-	int roundingMethod) {
-		switch (roundingMethod) {
-			case java.math.BigDecimal.ROUND_CEILING :
-				if (sign == (-1)) {
-					unscaled = org.apache.commons.math.util.FastMath.floor(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));
-				}else {
-					unscaled = org.apache.commons.math.util.FastMath.ceil(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));
-				}
-				break;
-			case java.math.BigDecimal.ROUND_DOWN :
-				unscaled = org.apache.commons.math.util.FastMath.floor(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));
-				break;
-			case java.math.BigDecimal.ROUND_FLOOR :
-				if (sign == (-1)) {
-					unscaled = org.apache.commons.math.util.FastMath.ceil(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));
-				}else {
-					unscaled = org.apache.commons.math.util.FastMath.floor(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));
-				}
-				break;
-			case java.math.BigDecimal.ROUND_HALF_DOWN : 				{
-					unscaled = org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY);
-					double fraction = unscaled - (org.apache.commons.math.util.FastMath.floor(unscaled));
-					if (fraction > 0.5) {
-						unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);
-					}else {
-						unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);
-					}
-					break;
-				}
-			case java.math.BigDecimal.ROUND_HALF_EVEN : 				{
-					double fraction = unscaled - (org.apache.commons.math.util.FastMath.floor(unscaled));
-					if (fraction > 0.5) {
-						unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);
-					}else 						if (fraction < 0.5) {
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+		(x < 0.5) && (java.lang.Double.isNaN(y))) || (x == y);} 	public static boolean equalsIncludingNaN(double x, double y) { 		return ((java.lang.Double.isNaN(x)) && (java.lang.Double.isNaN(y))) || (org.apache.commons.math.util.MathUtils.equals(x, y, 1));} 	public static boolean equals(double x, double y, double eps) { 		return (org.apache.commons.math.util.MathUtils.equals(x, y, 1)) || ((org.apache.commons.math.util.FastMath.abs((y - x))) <= eps);} 	public static boolean equalsIncludingNaN(double x, double y, double eps) { 		return (org.apache.commons.math.util.MathUtils.equalsIncludingNaN(x, y)) || ((org.apache.commons.math.util.FastMath.abs((y - x))) <= eps);} 	public static boolean equals(double x, double y, int maxUlps) { 		assert (maxUlps > 0) && (maxUlps < (org.apache.commons.math.util.MathUtils.NAN_GAP)); 		long xInt = java.lang.Double.doubleToLongBits(x); 		long yInt = java.lang.Double.doubleToLongBits(y); 		if (xInt < 0) { 			xInt = (org.apache.commons.math.util.MathUtils.SGN_MASK) - xInt;} 		if (yInt < 0) { 			yInt = (org.apache.commons.math.util.MathUtils.SGN_MASK) - yInt;} 		final boolean isEqual = (org.apache.commons.math.util.FastMath.abs((xInt - yInt))) <= maxUlps; 		return (isEqual && (!(java.lang.Double.isNaN(x)))) && (!(java.lang.Double.isNaN(y)));} 	public static boolean equalsIncludingNaN(double x, double y, int maxUlps) { 		return ((java.lang.Double.isNaN(x)) && (java.lang.Double.isNaN(y))) || (org.apache.commons.math.util.MathUtils.equals(x, y, maxUlps));} 	public static boolean equals(double[] x, double[] y) { 		if ((x == null) || (y == null)) { 			return !((x == null) ^ (y == null));} 		if ((x.length) != (y.length)) { 			return false;} 		for (int i = 0; i < (x.length); ++i) { 			if (!(org.apache.commons.math.util.MathUtils.equals(x[i], y[i]))) { 				return false;}} 		return true;} 	public static boolean equalsIncludingNaN(double[] x, double[] y) { 		if ((x == null) || (y == null)) { 			return !((x == null) ^ (y == null));} 		if ((x.length) != (y.length)) { 			return false;} 		for (int i = 0; i < (x.length); ++i) { 			if (!(org.apache.commons.math.util.MathUtils.equalsIncludingNaN(x[i], y[i]))) { 				return false;}} 		return true;} 	public static long factorial(final int n) { 		if (n < 0) { 			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, n);} 		if (n > 20) { 			throw new java.lang.ArithmeticException("factorial value is too large to fit in a long");} 		return org.apache.commons.math.util.MathUtils.FACTORIALS[n];} 	public static double factorialDouble(final int n) { 		if (n < 0) { 			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, n);} 		if (n < 21) { 			return org.apache.commons.math.util.MathUtils.factorial(n);} 		return org.apache.commons.math.util.FastMath.floor(((org.apache.commons.math.util.FastMath.exp(org.apache.commons.math.util.MathUtils.factorialLog(n))) + 0.5));} 	public static double factorialLog(final int n) { 		if (n < 0) { 			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, n);} 		if (n < 21) { 			return org.apache.commons.math.util.FastMath.log(org.apache.commons.math.util.MathUtils.factorial(n));} 		double logSum = 0; 		for (int i = 2; i <= n; i++) { 			logSum += org.apache.commons.math.util.FastMath.log(i);} 		return logSum;} 	public static int gcd(final int p, final int q) { 		int u = p; 		int v = q; 		if ((u == 0) || (v == 0)) { 			if ((u == (java.lang.Integer.MIN_VALUE)) || (v == (java.lang.Integer.MIN_VALUE))) { 				throw org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, p, q);} 			return (org.apache.commons.math.util.FastMath.abs(u)) + (org.apache.commons.math.util.FastMath.abs(v));} 		if (u > 0) { 			u = -u;} 		if (v > 0) { 			v = -v;} 		int k = 0; 		while ((((u & 1) == 0) && ((v & 1) == 0)) && (k < 31)) { 			u /= 2; 			v /= 2; 			k++;} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, p, q);} 		int t = ((u & 1) == 1) ? v : -(u / 2); 		do { 			while ((t & 1) == 0) { 				t /= 2;} 			if (t > 0) { 				u = -t;}else { 				v = t;} 			t = (v - u) / 2;} while (t != 0 ); 		return (-u) * (1 << k);} 	public static long gcd(final long p, final long q) { 		long u = p; 		long v = q; 		if ((u == 0) || (v == 0)) { 			if ((u == (java.lang.Long.MIN_VALUE)) || (v == (java.lang.Long.MIN_VALUE))) { 				throw org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_64_BITS, p, q);} 			return (org.apache.commons.math.util.FastMath.abs(u)) + (org.apache.commons.math.util.FastMath.abs(v));} 		if (u > 0) { 			u = -u;} 		if (v > 0) { 			v = -v;} 		int k = 0; 		while ((((u & 1) == 0) && ((v & 1) == 0)) && (k < 63)) { 			u /= 2; 			v /= 2; 			k++;} 		if (k == 63) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_64_BITS, p, q);} 		long t = ((u & 1) == 1) ? v : -(u / 2); 		do { 			while ((t & 1) == 0) { 				t /= 2;} 			if (t > 0) { 				u = -t;}else { 				v = t;} 			t = (v - u) / 2;} while (t != 0 ); 		return (-u) * (1L << k);} 	public static int hash(double value) { 		return new java.lang.Double(value).hashCode();} 	public static int hash(double[] value) { 		return java.util.Arrays.hashCode(value);} 	public static byte indicator(final byte x) { 		return x >= (org.apache.commons.math.util.MathUtils.ZB) ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;} 	public static double indicator(final double x) { 		if (java.lang.Double.isNaN(x)) { 			return java.lang.Double.NaN;} 		return x >= 0.0 ? 1.0 : -1.0;} 	public static float indicator(final float x) { 		if (java.lang.Float.isNaN(x)) { 			return java.lang.Float.NaN;} 		return x >= 0.0F ? 1.0F : -1.0F;} 	public static int indicator(final int x) { 		return x >= 0 ? 1 : -1;} 	public static long indicator(final long x) { 		return x >= 0L ? 1L : -1L;} 	public static short indicator(final short x) { 		return x >= (org.apache.commons.math.util.MathUtils.ZS) ? org.apache.commons.math.util.MathUtils.PS : org.apache.commons.math.util.MathUtils.NS;} 	public static int lcm(int a, int b) { 		if ((a == 0) || (b == 0)) { 			return 0;} 		int lcm = org.apache.commons.math.util.FastMath.abs(org.apache.commons.math.util.MathUtils.mulAndCheck((a / (org.apache.commons.math.util.MathUtils.gcd(a, b))), b)); 		if (lcm == (java.lang.Integer.MIN_VALUE)) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS, a, b);} 		return lcm;} 	public static long lcm(long a, long b) { 		if ((a == 0) || (b == 0)) { 			return 0;} 		long lcm = org.apache.commons.math.util.FastMath.abs(org.apache.commons.math.util.MathUtils.mulAndCheck((a / (org.apache.commons.math.util.MathUtils.gcd(a, b))), b)); 		if (lcm == (java.lang.Long.MIN_VALUE)) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.LCM_OVERFLOW_64_BITS, a, b);} 		return lcm;} 	public static double log(double base, double x) { 		return (org.apache.commons.math.util.FastMath.log(x)) / (org.apache.commons.math.util.FastMath.log(base));} 	public static int mulAndCheck(int x, int y) { 		long m = ((long) (x)) * ((long) (y)); 		if ((m < (java.lang.Integer.MIN_VALUE)) || (m > (java.lang.Integer.MAX_VALUE))) { 			throw new java.lang.ArithmeticException("overflow: mul");} 		return ((int) (m));} 	public static long mulAndCheck(long a, long b) { 		long ret; 		java.lang.String msg = "overflow: multiply"; 		if (a > b) { 			ret = org.apache.commons.math.util.MathUtils.mulAndCheck(b, a);}else { 			if (a < 0) { 				if (b < 0) { 					if (a >= ((java.lang.Long.MAX_VALUE) / b)) { 						ret = a * b;}else { 						throw new java.lang.ArithmeticException(msg);}}else 					if (b > 0) { 						if (((java.lang.Long.MIN_VALUE) / b) <= a) { 							ret = a * b;}else { 							throw new java.lang.ArithmeticException(msg);}}else { 						ret = 0;}}else 				if (a > 0) { 					if (a <= ((java.lang.Long.MAX_VALUE) / b)) { 						ret = a * b;}else { 						throw new java.lang.ArithmeticException(msg);}}else { 					ret = 0;}} 		return ret;} 	public static double scalb(final double d, final int scaleFactor) { 		if (((d == 0) || (java.lang.Double.isNaN(d))) || (java.lang.Double.isInfinite(d))) { 			return d;} 		final long bits = java.lang.Double.doubleToLongBits(d); 		final long exponent = bits & 9218868437227405312L; 		final long rest = bits & -9218868437227405313L; 		final long newBits = rest | (exponent + (((long) (scaleFactor)) << 52)); 		return java.lang.Double.longBitsToDouble(newBits);} 	public static double normalizeAngle(double a, double center) { 		return a - ((org.apache.commons.math.util.MathUtils.TWO_PI) * (org.apache.commons.math.util.FastMath.floor((((a + (org.apache.commons.math.util.FastMath.PI)) - center) / (org.apache.commons.math.util.MathUtils.TWO_PI)))));} 	public static double[] normalizeArray(double[] values, double normalizedSum) throws java.lang.ArithmeticException, java.lang.IllegalArgumentException { 		if (java.lang.Double.isInfinite(normalizedSum)) { 			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.NORMALIZE_INFINITE);} 		if (java.lang.Double.isNaN(normalizedSum)) { 			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.NORMALIZE_NAN);} 		double sum = 0.0; 		final int len = values.length; 		double[] out = new double[len]; 		for (int i = 0; i < len; i++) { 			if (java.lang.Double.isInfinite(values[i])) { 				throw org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);} 			if (!(java.lang.Double.isNaN(values[i]))) { 				sum += values[i];}} 		if (sum == 0) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.ARRAY_SUMS_TO_ZERO);} 		for (int i = 0; i < len; i++) { 			if (java.lang.Double.isNaN(values[i])) { 				out[i] = java.lang.Double.NaN;}else { 				out[i] = ((values[i]) * normalizedSum) / sum;}} 		return out;} 	public static double round(double x, int scale) { 		return org.apache.commons.math.util.MathUtils.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP);} 	public static double round(double x, int scale, int roundingMethod) { 		try { 			return new java.math.BigDecimal(java.lang.Double.toString(x)).setScale(scale, roundingMethod).doubleValue();} catch (java.lang.NumberFormatException ex) { 			if (java.lang.Double.isInfinite(x)) { 				return x;}else { 				return java.lang.Double.NaN;}}} 	public static float round(float x, int scale) { 		return org.apache.commons.math.util.MathUtils.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP);} 	public static float round(float x, int scale, int roundingMethod) { 		float sign = org.apache.commons.math.util.MathUtils.indicator(x); 		float factor = ((float) (org.apache.commons.math.util.FastMath.pow(10.0F, scale))) * sign; 		return ((float) (org.apache.commons.math.util.MathUtils.roundUnscaled((x * factor), sign, roundingMethod))) / factor;} 	private static double roundUnscaled(double unscaled, double sign, int roundingMethod) { 		switch (roundingMethod) { 			case java.math.BigDecimal.ROUND_CEILING : 				if (sign == (-1)) { 					unscaled = org.apache.commons.math.util.FastMath.floor(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));}else { 					unscaled = org.apache.commons.math.util.FastMath.ceil(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));} 				break; 			case java.math.BigDecimal.ROUND_DOWN : 				unscaled = org.apache.commons.math.util.FastMath.floor(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY)); 				break; 			case java.math.BigDecimal.ROUND_FLOOR : 				if (sign == (-1)) { 					unscaled = org.apache.commons.math.util.FastMath.ceil(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));}else { 					unscaled = org.apache.commons.math.util.FastMath.floor(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));} 				break; 			case java.math.BigDecimal.ROUND_HALF_DOWN : 				{ 					unscaled = org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY); 					double fraction = unscaled - (org.apache.commons.math.util.FastMath.floor(unscaled)); 					if (fraction > 0.5) { 						unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);}else { 						unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);} 					break;} 			case java.math.BigDecimal.ROUND_HALF_EVEN : 				{ 					double fraction = unscaled - (org.apache.commons.math.util.FastMath.floor(unscaled)); 					if (fraction > 0.5) { 						unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);}else 						if (fraction < 0.5) {
 							unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);
 						}else {
 



[INFO ] fr.inria.main.evolution.AstorMain.run(AstorMain.java:271) - Time Total(s): 293.904
100.56user 2.85system 4:57.11elapsed 34%CPU (0avgtext+0avgdata 612496maxresident)k
120728inputs+28248outputs (119major+447877minor)pagefaults 0swaps


Node: ubuntu



Date: Sat Aug  3 05:40:57 EDT 2019

