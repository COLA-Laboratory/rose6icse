cd /tmp/Nopol_Defects4J_Chart_2;
export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en";
TZ="America/New_York"; export TZ;
export PATH="/home/wp/tool/jdk1.8.0_71/bin/:$PATH";
export JAVA_HOME="/home/wp/tool/jdk1.8.0_71/bin/";
time java -Xmx1g -Xms1g -cp /home/wp/RepairThemAll/script/../repair_tools/nopol.jar:/home/wp/tool/jdk1.8.0_71/bin//../lib/tools.jar fr.inria.lille.repair.Main \
	--mode repair \
	--type pre_then_cond \
	--bugid Chart-2 \
	--oracle angelic \
	--synthesis smt \
	--flocal gzoltar \
	--json \
	--solver z3 \
	--solver-path /home/wp/RepairThemAll/script/../libs/z3/build/z3 \
	--complianceLevel 4 \
	--source source/ \
	--classpath "build/:build-tests/:/tmp/Nopol_Defects4J_Chart_2/build/:/tmp/Nopol_Defects4J_Chart_2/build-tests/:/tmp/Nopol_Defects4J_Chart_2/lib/junit.jar:/tmp/Nopol_Defects4J_Chart_2/lib/servlet.jar:/tmp/Nopol_Defects4J_Chart_2/lib/iText-2.1.4.jar:/home/wp/RepairThemAll/script/../benchmarks/defects4j/framework/projects/lib/junit-4.11.jar:/home/wp/RepairThemAll/script/../repair_tools/nopol.jar";
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en
04:24:53.344 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Source files: [source]
04:24:53.358 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Classpath: [file:/tmp/Nopol_Defects4J_Chart_2/build/, file:/tmp/Nopol_Defects4J_Chart_2/build-tests/, file:/tmp/Nopol_Defects4J_Chart_2/build/, file:/tmp/Nopol_Defects4J_Chart_2/build-tests/, file:/tmp/Nopol_Defects4J_Chart_2/lib/junit.jar, file:/tmp/Nopol_Defects4J_Chart_2/lib/servlet.jar, file:/tmp/Nopol_Defects4J_Chart_2/lib/iText-2.1.4.jar, file:/home/wp/RepairThemAll/script/../benchmarks/defects4j/framework/projects/lib/junit-4.11.jar, file:/home/wp/RepairThemAll/script/../repair_tools/nopol.jar]
04:24:53.364 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Statement type: PRE_THEN_COND
04:24:53.364 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Args: [org.jfree.chart.annotations.junit.AnnotationsPackageTests, org.jfree.chart.annotations.junit.AnnotationsPackageTests, org.jfree.chart.annotations.junit.CategoryLineAnnotationTests, org.jfree.chart.annotations.junit.CategoryLineAnnotationTests, org.jfree.chart.annotations.junit.CategoryPointerAnnotationTests, org.jfree.chart.annotations.junit.CategoryPointerAnnotationTests, org.jfree.chart.annotations.junit.CategoryTextAnnotationTests, org.jfree.chart.annotations.junit.CategoryTextAnnotationTests, org.jfree.chart.annotations.junit.TextAnnotationTests, org.jfree.chart.annotations.junit.TextAnnotationTests, org.jfree.chart.annotations.junit.XYBoxAnnotationTests, org.jfree.chart.annotations.junit.XYBoxAnnotationTests, org.jfree.chart.annotations.junit.XYDrawableAnnotationTests, org.jfree.chart.annotations.junit.XYDrawableAnnotationTests, org.jfree.chart.annotations.junit.XYImageAnnotationTests, org.jfree.chart.annotations.junit.XYImageAnnotationTests, org.jfree.chart.annotations.junit.XYLineAnnotationTests, org.jfree.chart.annotations.junit.XYLineAnnotationTests, org.jfree.chart.annotations.junit.XYPointerAnnotationTests, org.jfree.chart.annotations.junit.XYPointerAnnotationTests, org.jfree.chart.annotations.junit.XYPolygonAnnotationTests, org.jfree.chart.annotations.junit.XYPolygonAnnotationTests, org.jfree.chart.annotations.junit.XYShapeAnnotationTests, org.jfree.chart.annotations.junit.XYShapeAnnotationTests, org.jfree.chart.annotations.junit.XYTextAnnotationTests, org.jfree.chart.annotations.junit.XYTextAnnotationTests, org.jfree.chart.annotations.junit.XYTitleAnnotationTests, org.jfree.chart.annotations.junit.XYTitleAnnotationTests, org.jfree.chart.axis.junit.AxisLocationTests, org.jfree.chart.axis.junit.AxisLocationTests, org.jfree.chart.axis.junit.AxisPackageTests, org.jfree.chart.axis.junit.AxisPackageTests, org.jfree.chart.axis.junit.AxisSpaceTests, org.jfree.chart.axis.junit.AxisSpaceTests, org.jfree.chart.axis.junit.AxisTests, org.jfree.chart.axis.junit.AxisTests, org.jfree.chart.axis.junit.CategoryAnchorTests, org.jfree.chart.axis.junit.CategoryAnchorTests, org.jfree.chart.axis.junit.CategoryAxis3DTests, org.jfree.chart.axis.junit.CategoryAxis3DTests, org.jfree.chart.axis.junit.CategoryAxisTests, org.jfree.chart.axis.junit.CategoryAxisTests, org.jfree.chart.axis.junit.CategoryLabelPositionTests, org.jfree.chart.axis.junit.CategoryLabelPositionTests, org.jfree.chart.axis.junit.CategoryLabelPositionsTests, org.jfree.chart.axis.junit.CategoryLabelPositionsTests, org.jfree.chart.axis.junit.CategoryLabelWidthTypeTests, org.jfree.chart.axis.junit.CategoryLabelWidthTypeTests, org.jfree.chart.axis.junit.CategoryTickTests, org.jfree.chart.axis.junit.CategoryTickTests, org.jfree.chart.axis.junit.CyclicNumberAxisTests, org.jfree.chart.axis.junit.CyclicNumberAxisTests, org.jfree.chart.axis.junit.DateAxisTests, org.jfree.chart.axis.junit.DateAxisTests, org.jfree.chart.axis.junit.DateTickMarkPositionTests, org.jfree.chart.axis.junit.DateTickMarkPositionTests, org.jfree.chart.axis.junit.DateTickTests, org.jfree.chart.axis.junit.DateTickTests, org.jfree.chart.axis.junit.DateTickUnitTests, org.jfree.chart.axis.junit.DateTickUnitTests, org.jfree.chart.axis.junit.ExtendedCategoryAxisTests, org.jfree.chart.axis.junit.ExtendedCategoryAxisTests, org.jfree.chart.axis.junit.LogAxisTests, org.jfree.chart.axis.junit.LogAxisTests, org.jfree.chart.axis.junit.LogarithmicAxisTests, org.jfree.chart.axis.junit.LogarithmicAxisTests, org.jfree.chart.axis.junit.MarkerAxisBandTests, org.jfree.chart.axis.junit.MarkerAxisBandTests, org.jfree.chart.axis.junit.ModuloAxisTests, org.jfree.chart.axis.junit.ModuloAxisTests, org.jfree.chart.axis.junit.MonthDateFormatTests, org.jfree.chart.axis.junit.MonthDateFormatTests, org.jfree.chart.axis.junit.NumberAxis3DTests, org.jfree.chart.axis.junit.NumberAxis3DTests, org.jfree.chart.axis.junit.NumberAxisTests, org.jfree.chart.axis.junit.NumberAxisTests, org.jfree.chart.axis.junit.NumberTickUnitTests, org.jfree.chart.axis.junit.NumberTickUnitTests, org.jfree.chart.axis.junit.PeriodAxisLabelInfoTests, org.jfree.chart.axis.junit.PeriodAxisLabelInfoTests, org.jfree.chart.axis.junit.PeriodAxisTests, org.jfree.chart.axis.junit.PeriodAxisTests, org.jfree.chart.axis.junit.QuarterDateFormatTests, org.jfree.chart.axis.junit.QuarterDateFormatTests, org.jfree.chart.axis.junit.SegmentedTimelineTests, org.jfree.chart.axis.junit.SegmentedTimelineTests, org.jfree.chart.axis.junit.SegmentedTimelineTests2, org.jfree.chart.axis.junit.SegmentedTimelineTests2, org.jfree.chart.axis.junit.StandardTickUnitSourceTests, org.jfree.chart.axis.junit.StandardTickUnitSourceTests, org.jfree.chart.axis.junit.SubCategoryAxisTests, org.jfree.chart.axis.junit.SubCategoryAxisTests, org.jfree.chart.axis.junit.SymbolAxisTests, org.jfree.chart.axis.junit.SymbolAxisTests, org.jfree.chart.axis.junit.TickUnitsTests, org.jfree.chart.axis.junit.TickUnitsTests, org.jfree.chart.axis.junit.ValueAxisTests, org.jfree.chart.axis.junit.ValueAxisTests, org.jfree.chart.block.junit.AbstractBlockTests, org.jfree.chart.block.junit.AbstractBlockTests, org.jfree.chart.block.junit.BlockBorderTests, org.jfree.chart.block.junit.BlockBorderTests, org.jfree.chart.block.junit.BlockContainerTests, org.jfree.chart.block.junit.BlockContainerTests, org.jfree.chart.block.junit.BlockPackageTests, org.jfree.chart.block.junit.BlockPackageTests, org.jfree.chart.block.junit.BorderArrangementTests, org.jfree.chart.block.junit.BorderArrangementTests, org.jfree.chart.block.junit.ColorBlockTests, org.jfree.chart.block.junit.ColorBlockTests, org.jfree.chart.block.junit.ColumnArrangementTests, org.jfree.chart.block.junit.ColumnArrangementTests, org.jfree.chart.block.junit.EmptyBlockTests, org.jfree.chart.block.junit.EmptyBlockTests, org.jfree.chart.block.junit.FlowArrangementTests, org.jfree.chart.block.junit.FlowArrangementTests, org.jfree.chart.block.junit.GridArrangementTests, org.jfree.chart.block.junit.GridArrangementTests, org.jfree.chart.block.junit.LabelBlockTests, org.jfree.chart.block.junit.LabelBlockTests, org.jfree.chart.block.junit.LineBorderTests, org.jfree.chart.block.junit.LineBorderTests, org.jfree.chart.block.junit.RectangleConstraintTests, org.jfree.chart.block.junit.RectangleConstraintTests, org.jfree.chart.entity.junit.CategoryItemEntityTests, org.jfree.chart.entity.junit.CategoryItemEntityTests, org.jfree.chart.entity.junit.CategoryLabelEntityTests, org.jfree.chart.entity.junit.CategoryLabelEntityTests, org.jfree.chart.entity.junit.EntityPackageTests, org.jfree.chart.entity.junit.EntityPackageTests, org.jfree.chart.entity.junit.LegendItemEntityTests, org.jfree.chart.entity.junit.LegendItemEntityTests, org.jfree.chart.entity.junit.PieSectionEntityTests, org.jfree.chart.entity.junit.PieSectionEntityTests, org.jfree.chart.entity.junit.StandardEntityCollectionTests, org.jfree.chart.entity.junit.StandardEntityCollectionTests, org.jfree.chart.entity.junit.TickLabelEntityTests, org.jfree.chart.entity.junit.TickLabelEntityTests, org.jfree.chart.entity.junit.XYItemEntityTests, org.jfree.chart.entity.junit.XYItemEntityTests, org.jfree.chart.imagemap.junit.DynamicDriveToolTipTagFragmentGeneratorTests, org.jfree.chart.imagemap.junit.DynamicDriveToolTipTagFragmentGeneratorTests, org.jfree.chart.imagemap.junit.ImageMapPackageTests, org.jfree.chart.imagemap.junit.ImageMapPackageTests, org.jfree.chart.imagemap.junit.ImageMapUtilitiesTests, org.jfree.chart.imagemap.junit.ImageMapUtilitiesTests, org.jfree.chart.imagemap.junit.OverLIBToolTipTagFragmentGeneratorTests, org.jfree.chart.imagemap.junit.OverLIBToolTipTagFragmentGeneratorTests, org.jfree.chart.imagemap.junit.StandardToolTipTagFragmentGeneratorTests, org.jfree.chart.imagemap.junit.StandardToolTipTagFragmentGeneratorTests, org.jfree.chart.imagemap.junit.StandardURLTagFragmentGeneratorTests, org.jfree.chart.imagemap.junit.StandardURLTagFragmentGeneratorTests, org.jfree.chart.junit.AreaChartTests, org.jfree.chart.junit.AreaChartTests, org.jfree.chart.junit.BarChart3DTests, org.jfree.chart.junit.BarChart3DTests, org.jfree.chart.junit.BarChartTests, org.jfree.chart.junit.BarChartTests, org.jfree.chart.junit.ChartPackageTests, org.jfree.chart.junit.ChartPackageTests, org.jfree.chart.junit.ChartPanelTests, org.jfree.chart.junit.ChartPanelTests, org.jfree.chart.junit.ChartRenderingInfoTests, org.jfree.chart.junit.ChartRenderingInfoTests, org.jfree.chart.junit.GanttChartTests, org.jfree.chart.junit.GanttChartTests, org.jfree.chart.junit.JFreeChartTests, org.jfree.chart.junit.JFreeChartTests, org.jfree.chart.junit.LegendItemCollectionTests, org.jfree.chart.junit.LegendItemCollectionTests, org.jfree.chart.junit.LegendItemTests, org.jfree.chart.junit.LegendItemTests, org.jfree.chart.junit.LineChart3DTests, org.jfree.chart.junit.LineChart3DTests, org.jfree.chart.junit.LineChartTests, org.jfree.chart.junit.LineChartTests, org.jfree.chart.junit.MeterChartTests, org.jfree.chart.junit.MeterChartTests, org.jfree.chart.junit.PieChart3DTests, org.jfree.chart.junit.PieChart3DTests, org.jfree.chart.junit.PieChartTests, org.jfree.chart.junit.PieChartTests, org.jfree.chart.junit.ScatterPlotTests, org.jfree.chart.junit.ScatterPlotTests, org.jfree.chart.junit.StackedAreaChartTests, org.jfree.chart.junit.StackedAreaChartTests, org.jfree.chart.junit.StackedBarChart3DTests, org.jfree.chart.junit.StackedBarChart3DTests, org.jfree.chart.junit.StackedBarChartTests, org.jfree.chart.junit.StackedBarChartTests, org.jfree.chart.junit.StandardChartThemeTests, org.jfree.chart.junit.StandardChartThemeTests, org.jfree.chart.junit.TimeSeriesChartTests, org.jfree.chart.junit.TimeSeriesChartTests, org.jfree.chart.junit.WaterfallChartTests, org.jfree.chart.junit.WaterfallChartTests, org.jfree.chart.junit.XYAreaChartTests, org.jfree.chart.junit.XYAreaChartTests, org.jfree.chart.junit.XYBarChartTests, org.jfree.chart.junit.XYBarChartTests, org.jfree.chart.junit.XYLineChartTests, org.jfree.chart.junit.XYLineChartTests, org.jfree.chart.junit.XYStepAreaChartTests, org.jfree.chart.junit.XYStepAreaChartTests, org.jfree.chart.junit.XYStepChartTests, org.jfree.chart.junit.XYStepChartTests, org.jfree.chart.labels.junit.BoxAndWhiskerToolTipGeneratorTests, org.jfree.chart.labels.junit.BoxAndWhiskerToolTipGeneratorTests, org.jfree.chart.labels.junit.BoxAndWhiskerXYToolTipGeneratorTests, org.jfree.chart.labels.junit.BoxAndWhiskerXYToolTipGeneratorTests, org.jfree.chart.labels.junit.BubbleXYItemLabelGeneratorTests, org.jfree.chart.labels.junit.BubbleXYItemLabelGeneratorTests, org.jfree.chart.labels.junit.CustomXYItemLabelGeneratorTests, org.jfree.chart.labels.junit.CustomXYItemLabelGeneratorTests, org.jfree.chart.labels.junit.HighLowItemLabelGeneratorTests, org.jfree.chart.labels.junit.HighLowItemLabelGeneratorTests, org.jfree.chart.labels.junit.IntervalCategoryItemLabelGeneratorTests, org.jfree.chart.labels.junit.IntervalCategoryItemLabelGeneratorTests, org.jfree.chart.labels.junit.IntervalCategoryToolTipGeneratorTests, org.jfree.chart.labels.junit.IntervalCategoryToolTipGeneratorTests, org.jfree.chart.labels.junit.ItemLabelAnchorTests, org.jfree.chart.labels.junit.ItemLabelAnchorTests, org.jfree.chart.labels.junit.ItemLabelPositionTests, org.jfree.chart.labels.junit.ItemLabelPositionTests, org.jfree.chart.labels.junit.LabelsPackageTests, org.jfree.chart.labels.junit.LabelsPackageTests, org.jfree.chart.labels.junit.MultipleXYSeriesLabelGeneratorTests, org.jfree.chart.labels.junit.MultipleXYSeriesLabelGeneratorTests, org.jfree.chart.labels.junit.StandardCategoryItemLabelGeneratorTests, org.jfree.chart.labels.junit.StandardCategoryItemLabelGeneratorTests, org.jfree.chart.labels.junit.StandardCategorySeriesLabelGeneratorTests, org.jfree.chart.labels.junit.StandardCategorySeriesLabelGeneratorTests, org.jfree.chart.labels.junit.StandardCategoryToolTipGeneratorTests, org.jfree.chart.labels.junit.StandardCategoryToolTipGeneratorTests, org.jfree.chart.labels.junit.StandardPieSectionLabelGeneratorTests, org.jfree.chart.labels.junit.StandardPieSectionLabelGeneratorTests, org.jfree.chart.labels.junit.StandardPieToolTipGeneratorTests, org.jfree.chart.labels.junit.StandardPieToolTipGeneratorTests, org.jfree.chart.labels.junit.StandardXYItemLabelGeneratorTests, org.jfree.chart.labels.junit.StandardXYItemLabelGeneratorTests, org.jfree.chart.labels.junit.StandardXYSeriesLabelGeneratorTests, org.jfree.chart.labels.junit.StandardXYSeriesLabelGeneratorTests, org.jfree.chart.labels.junit.StandardXYToolTipGeneratorTests, org.jfree.chart.labels.junit.StandardXYToolTipGeneratorTests, org.jfree.chart.labels.junit.StandardXYZToolTipGeneratorTests, org.jfree.chart.labels.junit.StandardXYZToolTipGeneratorTests, org.jfree.chart.labels.junit.SymbolicXYItemLabelGeneratorTests, org.jfree.chart.labels.junit.SymbolicXYItemLabelGeneratorTests, org.jfree.chart.needle.junit.ArrowNeedleTests, org.jfree.chart.needle.junit.ArrowNeedleTests, org.jfree.chart.needle.junit.LineNeedleTests, org.jfree.chart.needle.junit.LineNeedleTests, org.jfree.chart.needle.junit.LongNeedleTests, org.jfree.chart.needle.junit.LongNeedleTests, org.jfree.chart.needle.junit.MeterNeedleTests, org.jfree.chart.needle.junit.MeterNeedleTests, org.jfree.chart.needle.junit.MiddlePinNeedleTests, org.jfree.chart.needle.junit.MiddlePinNeedleTests, org.jfree.chart.needle.junit.NeedlePackageTests, org.jfree.chart.needle.junit.NeedlePackageTests, org.jfree.chart.needle.junit.PinNeedleTests, org.jfree.chart.needle.junit.PinNeedleTests, org.jfree.chart.needle.junit.PlumNeedleTests, org.jfree.chart.needle.junit.PlumNeedleTests, org.jfree.chart.needle.junit.PointerNeedleTests, org.jfree.chart.needle.junit.PointerNeedleTests, org.jfree.chart.needle.junit.ShipNeedleTests, org.jfree.chart.needle.junit.ShipNeedleTests, org.jfree.chart.needle.junit.WindNeedleTests, org.jfree.chart.needle.junit.WindNeedleTests, org.jfree.chart.plot.dial.junit.AbstractDialLayerTests, org.jfree.chart.plot.dial.junit.AbstractDialLayerTests, org.jfree.chart.plot.dial.junit.ArcDialFrameTests, org.jfree.chart.plot.dial.junit.ArcDialFrameTests, org.jfree.chart.plot.dial.junit.DialBackgroundTests, org.jfree.chart.plot.dial.junit.DialBackgroundTests, org.jfree.chart.plot.dial.junit.DialCapTests, org.jfree.chart.plot.dial.junit.DialCapTests, org.jfree.chart.plot.dial.junit.DialPackageTests, org.jfree.chart.plot.dial.junit.DialPackageTests, org.jfree.chart.plot.dial.junit.DialPlotTests, org.jfree.chart.plot.dial.junit.DialPlotTests, org.jfree.chart.plot.dial.junit.DialPointerTests, org.jfree.chart.plot.dial.junit.DialPointerTests, org.jfree.chart.plot.dial.junit.DialTextAnnotationTests, org.jfree.chart.plot.dial.junit.DialTextAnnotationTests, org.jfree.chart.plot.dial.junit.DialValueIndicatorTests, org.jfree.chart.plot.dial.junit.DialValueIndicatorTests, org.jfree.chart.plot.dial.junit.StandardDialFrameTests, org.jfree.chart.plot.dial.junit.StandardDialFrameTests, org.jfree.chart.plot.dial.junit.StandardDialRangeTests, org.jfree.chart.plot.dial.junit.StandardDialRangeTests, org.jfree.chart.plot.dial.junit.StandardDialScaleTests, org.jfree.chart.plot.dial.junit.StandardDialScaleTests, org.jfree.chart.plot.junit.CategoryMarkerTests, org.jfree.chart.plot.junit.CategoryMarkerTests, org.jfree.chart.plot.junit.CategoryPlotTests, org.jfree.chart.plot.junit.CategoryPlotTests, org.jfree.chart.plot.junit.CombinedDomainCategoryPlotTests, org.jfree.chart.plot.junit.CombinedDomainCategoryPlotTests, org.jfree.chart.plot.junit.CombinedDomainXYPlotTests, org.jfree.chart.plot.junit.CombinedDomainXYPlotTests, org.jfree.chart.plot.junit.CombinedRangeCategoryPlotTests, org.jfree.chart.plot.junit.CombinedRangeCategoryPlotTests, org.jfree.chart.plot.junit.CombinedRangeXYPlotTests, org.jfree.chart.plot.junit.CombinedRangeXYPlotTests, org.jfree.chart.plot.junit.CompassPlotTests, org.jfree.chart.plot.junit.CompassPlotTests, org.jfree.chart.plot.junit.DefaultDrawingSupplierTests, org.jfree.chart.plot.junit.DefaultDrawingSupplierTests, org.jfree.chart.plot.junit.FastScatterPlotTests, org.jfree.chart.plot.junit.FastScatterPlotTests, org.jfree.chart.plot.junit.IntervalMarkerTests, org.jfree.chart.plot.junit.IntervalMarkerTests, org.jfree.chart.plot.junit.MarkerTests, org.jfree.chart.plot.junit.MarkerTests, org.jfree.chart.plot.junit.MeterIntervalTests, org.jfree.chart.plot.junit.MeterIntervalTests, org.jfree.chart.plot.junit.MeterPlotTests, org.jfree.chart.plot.junit.MeterPlotTests, org.jfree.chart.plot.junit.MultiplePiePlotTests, org.jfree.chart.plot.junit.MultiplePiePlotTests, org.jfree.chart.plot.junit.PieLabelRecordTests, org.jfree.chart.plot.junit.PieLabelRecordTests, org.jfree.chart.plot.junit.PiePlot3DTests, org.jfree.chart.plot.junit.PiePlot3DTests, org.jfree.chart.plot.junit.PiePlotTests, org.jfree.chart.plot.junit.PiePlotTests, org.jfree.chart.plot.junit.PlotOrientationTests, org.jfree.chart.plot.junit.PlotOrientationTests, org.jfree.chart.plot.junit.PlotPackageTests, org.jfree.chart.plot.junit.PlotPackageTests, org.jfree.chart.plot.junit.PlotRenderingInfoTests, org.jfree.chart.plot.junit.PlotRenderingInfoTests, org.jfree.chart.plot.junit.PlotTests, org.jfree.chart.plot.junit.PlotTests, org.jfree.chart.plot.junit.PolarPlotTests, org.jfree.chart.plot.junit.PolarPlotTests, org.jfree.chart.plot.junit.RingPlotTests, org.jfree.chart.plot.junit.RingPlotTests, org.jfree.chart.plot.junit.SpiderWebPlotTests, org.jfree.chart.plot.junit.SpiderWebPlotTests, org.jfree.chart.plot.junit.ThermometerPlotTests, org.jfree.chart.plot.junit.ThermometerPlotTests, org.jfree.chart.plot.junit.ValueMarkerTests, org.jfree.chart.plot.junit.ValueMarkerTests, org.jfree.chart.plot.junit.XYPlotTests, org.jfree.chart.plot.junit.XYPlotTests, org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests, org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests, org.jfree.chart.renderer.category.junit.AreaRendererTests, org.jfree.chart.renderer.category.junit.AreaRendererTests, org.jfree.chart.renderer.category.junit.BarRenderer3DTests, org.jfree.chart.renderer.category.junit.BarRenderer3DTests, org.jfree.chart.renderer.category.junit.BarRendererTests, org.jfree.chart.renderer.category.junit.BarRendererTests, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests, org.jfree.chart.renderer.category.junit.CategoryStepRendererTests, org.jfree.chart.renderer.category.junit.CategoryStepRendererTests, org.jfree.chart.renderer.category.junit.DefaultCategoryItemRendererTests, org.jfree.chart.renderer.category.junit.DefaultCategoryItemRendererTests, org.jfree.chart.renderer.category.junit.GanttRendererTests, org.jfree.chart.renderer.category.junit.GanttRendererTests, org.jfree.chart.renderer.category.junit.GradientBarPainterTests, org.jfree.chart.renderer.category.junit.GradientBarPainterTests, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests, org.jfree.chart.renderer.category.junit.LevelRendererTests, org.jfree.chart.renderer.category.junit.LevelRendererTests, org.jfree.chart.renderer.category.junit.LineAndShapeRendererTests, org.jfree.chart.renderer.category.junit.LineAndShapeRendererTests, org.jfree.chart.renderer.category.junit.LineRenderer3DTests, org.jfree.chart.renderer.category.junit.LineRenderer3DTests, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests, org.jfree.chart.renderer.category.junit.RendererCategoryPackageTests, org.jfree.chart.renderer.category.junit.RendererCategoryPackageTests, org.jfree.chart.renderer.category.junit.ScatterRendererTests, org.jfree.chart.renderer.category.junit.ScatterRendererTests, org.jfree.chart.renderer.category.junit.StackedAreaRendererTests, org.jfree.chart.renderer.category.junit.StackedAreaRendererTests, org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests, org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests, org.jfree.chart.renderer.category.junit.StackedBarRendererTests, org.jfree.chart.renderer.category.junit.StackedBarRendererTests, org.jfree.chart.renderer.category.junit.StandardBarPainterTests, org.jfree.chart.renderer.category.junit.StandardBarPainterTests, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests, org.jfree.chart.renderer.category.junit.WaterfallBarRendererTests, org.jfree.chart.renderer.category.junit.WaterfallBarRendererTests, org.jfree.chart.renderer.junit.AbstractRendererTests, org.jfree.chart.renderer.junit.AbstractRendererTests, org.jfree.chart.renderer.junit.AreaRendererEndTypeTests, org.jfree.chart.renderer.junit.AreaRendererEndTypeTests, org.jfree.chart.renderer.junit.DefaultPolarItemRendererTests, org.jfree.chart.renderer.junit.DefaultPolarItemRendererTests, org.jfree.chart.renderer.junit.GrayPaintScaleTests, org.jfree.chart.renderer.junit.GrayPaintScaleTests, org.jfree.chart.renderer.junit.LookupPaintScaleTests, org.jfree.chart.renderer.junit.LookupPaintScaleTests, org.jfree.chart.renderer.junit.OutlierTests, org.jfree.chart.renderer.junit.OutlierTests, org.jfree.chart.renderer.junit.RendererPackageTests, org.jfree.chart.renderer.junit.RendererPackageTests, org.jfree.chart.renderer.junit.RendererUtilitiesTests, org.jfree.chart.renderer.junit.RendererUtilitiesTests, org.jfree.chart.renderer.xy.junit.AbstractXYItemRendererTests, org.jfree.chart.renderer.xy.junit.AbstractXYItemRendererTests, org.jfree.chart.renderer.xy.junit.CandlestickRendererTests, org.jfree.chart.renderer.xy.junit.CandlestickRendererTests, org.jfree.chart.renderer.xy.junit.ClusteredXYBarRendererTests, org.jfree.chart.renderer.xy.junit.ClusteredXYBarRendererTests, org.jfree.chart.renderer.xy.junit.DeviationRendererTests, org.jfree.chart.renderer.xy.junit.DeviationRendererTests, org.jfree.chart.renderer.xy.junit.GradientXYBarPainterTests, org.jfree.chart.renderer.xy.junit.GradientXYBarPainterTests, org.jfree.chart.renderer.xy.junit.HighLowRendererTests, org.jfree.chart.renderer.xy.junit.HighLowRendererTests, org.jfree.chart.renderer.xy.junit.RendererXYPackageTests, org.jfree.chart.renderer.xy.junit.RendererXYPackageTests, org.jfree.chart.renderer.xy.junit.StackedXYAreaRenderer2Tests, org.jfree.chart.renderer.xy.junit.StackedXYAreaRenderer2Tests, org.jfree.chart.renderer.xy.junit.StackedXYAreaRendererTests, org.jfree.chart.renderer.xy.junit.StackedXYAreaRendererTests, org.jfree.chart.renderer.xy.junit.StackedXYBarRendererTests, org.jfree.chart.renderer.xy.junit.StackedXYBarRendererTests, org.jfree.chart.renderer.xy.junit.StandardXYBarPainterTests, org.jfree.chart.renderer.xy.junit.StandardXYBarPainterTests, org.jfree.chart.renderer.xy.junit.StandardXYItemRendererTests, org.jfree.chart.renderer.xy.junit.StandardXYItemRendererTests, org.jfree.chart.renderer.xy.junit.VectorRendererTests, org.jfree.chart.renderer.xy.junit.VectorRendererTests, org.jfree.chart.renderer.xy.junit.WindItemRendererTests, org.jfree.chart.renderer.xy.junit.WindItemRendererTests, org.jfree.chart.renderer.xy.junit.XYAreaRenderer2Tests, org.jfree.chart.renderer.xy.junit.XYAreaRenderer2Tests, org.jfree.chart.renderer.xy.junit.XYAreaRendererTests, org.jfree.chart.renderer.xy.junit.XYAreaRendererTests, org.jfree.chart.renderer.xy.junit.XYBarRendererTests, org.jfree.chart.renderer.xy.junit.XYBarRendererTests, org.jfree.chart.renderer.xy.junit.XYBlockRendererTests, org.jfree.chart.renderer.xy.junit.XYBlockRendererTests, org.jfree.chart.renderer.xy.junit.XYBoxAndWhiskerRendererTests, org.jfree.chart.renderer.xy.junit.XYBoxAndWhiskerRendererTests, org.jfree.chart.renderer.xy.junit.XYBubbleRendererTests, org.jfree.chart.renderer.xy.junit.XYBubbleRendererTests, org.jfree.chart.renderer.xy.junit.XYDifferenceRendererTests, org.jfree.chart.renderer.xy.junit.XYDifferenceRendererTests, org.jfree.chart.renderer.xy.junit.XYDotRendererTests, org.jfree.chart.renderer.xy.junit.XYDotRendererTests, org.jfree.chart.renderer.xy.junit.XYErrorRendererTests, org.jfree.chart.renderer.xy.junit.XYErrorRendererTests, org.jfree.chart.renderer.xy.junit.XYLine3DRendererTests, org.jfree.chart.renderer.xy.junit.XYLine3DRendererTests, org.jfree.chart.renderer.xy.junit.XYLineAndShapeRendererTests, org.jfree.chart.renderer.xy.junit.XYLineAndShapeRendererTests, org.jfree.chart.renderer.xy.junit.XYShapeRendererTests, org.jfree.chart.renderer.xy.junit.XYShapeRendererTests, org.jfree.chart.renderer.xy.junit.XYSplineRendererTests, org.jfree.chart.renderer.xy.junit.XYSplineRendererTests, org.jfree.chart.renderer.xy.junit.XYStepAreaRendererTests, org.jfree.chart.renderer.xy.junit.XYStepAreaRendererTests, org.jfree.chart.renderer.xy.junit.XYStepRendererTests, org.jfree.chart.renderer.xy.junit.XYStepRendererTests, org.jfree.chart.renderer.xy.junit.YIntervalRendererTests, org.jfree.chart.renderer.xy.junit.YIntervalRendererTests, org.jfree.chart.title.junit.CompositeTitleTests, org.jfree.chart.title.junit.CompositeTitleTests, org.jfree.chart.title.junit.DateTitleTests, org.jfree.chart.title.junit.DateTitleTests, org.jfree.chart.title.junit.ImageTitleTests, org.jfree.chart.title.junit.ImageTitleTests, org.jfree.chart.title.junit.LegendGraphicTests, org.jfree.chart.title.junit.LegendGraphicTests, org.jfree.chart.title.junit.LegendTitleTests, org.jfree.chart.title.junit.LegendTitleTests, org.jfree.chart.title.junit.PaintScaleLegendTests, org.jfree.chart.title.junit.PaintScaleLegendTests, org.jfree.chart.title.junit.ShortTextTitleTests, org.jfree.chart.title.junit.ShortTextTitleTests, org.jfree.chart.title.junit.TextTitleTests, org.jfree.chart.title.junit.TextTitleTests, org.jfree.chart.title.junit.TitlePackageTests, org.jfree.chart.title.junit.TitlePackageTests, org.jfree.chart.title.junit.TitleTests, org.jfree.chart.title.junit.TitleTests, org.jfree.chart.urls.junit.CustomCategoryURLGeneratorTests, org.jfree.chart.urls.junit.CustomCategoryURLGeneratorTests, org.jfree.chart.urls.junit.CustomPieURLGeneratorTests, org.jfree.chart.urls.junit.CustomPieURLGeneratorTests, org.jfree.chart.urls.junit.CustomXYURLGeneratorTests, org.jfree.chart.urls.junit.CustomXYURLGeneratorTests, org.jfree.chart.urls.junit.StandardCategoryURLGeneratorTests, org.jfree.chart.urls.junit.StandardCategoryURLGeneratorTests, org.jfree.chart.urls.junit.StandardPieURLGeneratorTests, org.jfree.chart.urls.junit.StandardPieURLGeneratorTests, org.jfree.chart.urls.junit.StandardXYURLGeneratorTests, org.jfree.chart.urls.junit.StandardXYURLGeneratorTests, org.jfree.chart.urls.junit.TimeSeriesURLGeneratorTests, org.jfree.chart.urls.junit.TimeSeriesURLGeneratorTests, org.jfree.chart.urls.junit.UrlsPackageTests, org.jfree.chart.urls.junit.UrlsPackageTests, org.jfree.chart.util.junit.BooleanListTests, org.jfree.chart.util.junit.BooleanListTests, org.jfree.chart.util.junit.HashUtilitiesTests, org.jfree.chart.util.junit.HashUtilitiesTests, org.jfree.chart.util.junit.LineUtilitiesTests, org.jfree.chart.util.junit.LineUtilitiesTests, org.jfree.chart.util.junit.LogFormatTests, org.jfree.chart.util.junit.LogFormatTests, org.jfree.chart.util.junit.PaintListTests, org.jfree.chart.util.junit.PaintListTests, org.jfree.chart.util.junit.PaintMapTests, org.jfree.chart.util.junit.PaintMapTests, org.jfree.chart.util.junit.RelativeDateFormatTests, org.jfree.chart.util.junit.RelativeDateFormatTests, org.jfree.chart.util.junit.SerialUtilitiesTests, org.jfree.chart.util.junit.SerialUtilitiesTests, org.jfree.chart.util.junit.ShapeListTests, org.jfree.chart.util.junit.ShapeListTests, org.jfree.chart.util.junit.ShapeUtilitiesTests, org.jfree.chart.util.junit.ShapeUtilitiesTests, org.jfree.chart.util.junit.StrokeListTests, org.jfree.chart.util.junit.StrokeListTests, org.jfree.chart.util.junit.StrokeMapTests, org.jfree.chart.util.junit.StrokeMapTests, org.jfree.chart.util.junit.UtilPackageTests, org.jfree.chart.util.junit.UtilPackageTests, org.jfree.data.category.junit.CategoryToPieDatasetTests, org.jfree.data.category.junit.CategoryToPieDatasetTests, org.jfree.data.category.junit.DataCategoryPackageTests, org.jfree.data.category.junit.DataCategoryPackageTests, org.jfree.data.category.junit.DefaultCategoryDatasetTests, org.jfree.data.category.junit.DefaultCategoryDatasetTests, org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests, org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests, org.jfree.data.category.junit.SlidingCategoryDatasetTests, org.jfree.data.category.junit.SlidingCategoryDatasetTests, org.jfree.data.function.junit.DataFunctionPackageTests, org.jfree.data.function.junit.DataFunctionPackageTests, org.jfree.data.function.junit.LineFunction2DTests, org.jfree.data.function.junit.LineFunction2DTests, org.jfree.data.function.junit.NormalDistributionFunction2DTests, org.jfree.data.function.junit.NormalDistributionFunction2DTests, org.jfree.data.function.junit.PolynomialFunction2DTests, org.jfree.data.function.junit.PolynomialFunction2DTests, org.jfree.data.function.junit.PowerFunction2DTests, org.jfree.data.function.junit.PowerFunction2DTests, org.jfree.data.gantt.junit.DataGanttPackageTests, org.jfree.data.gantt.junit.DataGanttPackageTests, org.jfree.data.gantt.junit.SlidingGanttCategoryDatasetTests, org.jfree.data.gantt.junit.SlidingGanttCategoryDatasetTests, org.jfree.data.gantt.junit.TaskSeriesCollectionTests, org.jfree.data.gantt.junit.TaskSeriesCollectionTests, org.jfree.data.gantt.junit.TaskSeriesTests, org.jfree.data.gantt.junit.TaskSeriesTests, org.jfree.data.gantt.junit.TaskTests, org.jfree.data.gantt.junit.TaskTests, org.jfree.data.gantt.junit.XYTaskDatasetTests, org.jfree.data.gantt.junit.XYTaskDatasetTests, org.jfree.data.general.junit.DataGeneralPackageTests, org.jfree.data.general.junit.DataGeneralPackageTests, org.jfree.data.general.junit.DatasetGroupTests, org.jfree.data.general.junit.DatasetGroupTests, org.jfree.data.general.junit.DatasetUtilitiesTests, org.jfree.data.general.junit.DatasetUtilitiesTests, org.jfree.data.general.junit.DefaultHeatMapDatasetTests, org.jfree.data.general.junit.DefaultHeatMapDatasetTests, org.jfree.data.general.junit.DefaultKeyedValueDatasetTests, org.jfree.data.general.junit.DefaultKeyedValueDatasetTests, org.jfree.data.general.junit.DefaultKeyedValues2DDatasetTests, org.jfree.data.general.junit.DefaultKeyedValues2DDatasetTests, org.jfree.data.general.junit.DefaultKeyedValuesDatasetTests, org.jfree.data.general.junit.DefaultKeyedValuesDatasetTests, org.jfree.data.general.junit.DefaultPieDatasetTests, org.jfree.data.general.junit.DefaultPieDatasetTests, org.jfree.data.junit.ComparableObjectItemTests, org.jfree.data.junit.ComparableObjectItemTests, org.jfree.data.junit.ComparableObjectSeriesTests, org.jfree.data.junit.ComparableObjectSeriesTests, org.jfree.data.junit.DataPackageTests, org.jfree.data.junit.DataPackageTests, org.jfree.data.junit.DataUtilitiesTests, org.jfree.data.junit.DataUtilitiesTests, org.jfree.data.junit.DefaultKeyedValueTests, org.jfree.data.junit.DefaultKeyedValueTests, org.jfree.data.junit.DefaultKeyedValues2DTests, org.jfree.data.junit.DefaultKeyedValues2DTests, org.jfree.data.junit.DefaultKeyedValuesTests, org.jfree.data.junit.DefaultKeyedValuesTests, org.jfree.data.junit.DomainOrderTests, org.jfree.data.junit.DomainOrderTests, org.jfree.data.junit.KeyToGroupMapTests, org.jfree.data.junit.KeyToGroupMapTests, org.jfree.data.junit.KeyedObjectTests, org.jfree.data.junit.KeyedObjectTests, org.jfree.data.junit.KeyedObjects2DTests, org.jfree.data.junit.KeyedObjects2DTests, org.jfree.data.junit.KeyedObjectsTests, org.jfree.data.junit.KeyedObjectsTests, org.jfree.data.junit.RangeTests, org.jfree.data.junit.RangeTests, org.jfree.data.junit.RangeTypeTests, org.jfree.data.junit.RangeTypeTests, org.jfree.data.statistics.junit.BoxAndWhiskerCalculatorTests, org.jfree.data.statistics.junit.BoxAndWhiskerCalculatorTests, org.jfree.data.statistics.junit.BoxAndWhiskerItemTests, org.jfree.data.statistics.junit.BoxAndWhiskerItemTests, org.jfree.data.statistics.junit.DataStatisticsPackageTests, org.jfree.data.statistics.junit.DataStatisticsPackageTests, org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests, org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests, org.jfree.data.statistics.junit.DefaultBoxAndWhiskerXYDatasetTests, org.jfree.data.statistics.junit.DefaultBoxAndWhiskerXYDatasetTests, org.jfree.data.statistics.junit.DefaultMultiValueCategoryDatasetTests, org.jfree.data.statistics.junit.DefaultMultiValueCategoryDatasetTests, org.jfree.data.statistics.junit.DefaultStatisticalCategoryDatasetTests, org.jfree.data.statistics.junit.DefaultStatisticalCategoryDatasetTests, org.jfree.data.statistics.junit.HistogramBinTests, org.jfree.data.statistics.junit.HistogramBinTests, org.jfree.data.statistics.junit.HistogramDatasetTests, org.jfree.data.statistics.junit.HistogramDatasetTests, org.jfree.data.statistics.junit.MeanAndStandardDeviationTests, org.jfree.data.statistics.junit.MeanAndStandardDeviationTests, org.jfree.data.statistics.junit.RegressionTests, org.jfree.data.statistics.junit.RegressionTests, org.jfree.data.statistics.junit.SimpleHistogramBinTests, org.jfree.data.statistics.junit.SimpleHistogramBinTests, org.jfree.data.statistics.junit.SimpleHistogramDatasetTests, org.jfree.data.statistics.junit.SimpleHistogramDatasetTests, org.jfree.data.statistics.junit.StatisticsTests, org.jfree.data.statistics.junit.StatisticsTests, org.jfree.data.time.junit.DataTimePackageTests, org.jfree.data.time.junit.DataTimePackageTests, org.jfree.data.time.junit.DateRangeTests, org.jfree.data.time.junit.DateRangeTests, org.jfree.data.time.junit.DayTests, org.jfree.data.time.junit.DayTests, org.jfree.data.time.junit.FixedMillisecondTests, org.jfree.data.time.junit.FixedMillisecondTests, org.jfree.data.time.junit.HourTests, org.jfree.data.time.junit.HourTests, org.jfree.data.time.junit.MillisecondTests, org.jfree.data.time.junit.MillisecondTests, org.jfree.data.time.junit.MinuteTests, org.jfree.data.time.junit.MinuteTests, org.jfree.data.time.junit.MonthTests, org.jfree.data.time.junit.MonthTests, org.jfree.data.time.junit.MovingAverageTests, org.jfree.data.time.junit.MovingAverageTests, org.jfree.data.time.junit.QuarterTests, org.jfree.data.time.junit.QuarterTests, org.jfree.data.time.junit.SecondTests, org.jfree.data.time.junit.SecondTests, org.jfree.data.time.junit.SimpleTimePeriodTests, org.jfree.data.time.junit.SimpleTimePeriodTests, org.jfree.data.time.junit.TimePeriodAnchorTests, org.jfree.data.time.junit.TimePeriodAnchorTests, org.jfree.data.time.junit.TimePeriodValueTests, org.jfree.data.time.junit.TimePeriodValueTests, org.jfree.data.time.junit.TimePeriodValuesCollectionTests, org.jfree.data.time.junit.TimePeriodValuesCollectionTests, org.jfree.data.time.junit.TimePeriodValuesTests, org.jfree.data.time.junit.TimePeriodValuesTests, org.jfree.data.time.junit.TimeSeriesCollectionTests, org.jfree.data.time.junit.TimeSeriesCollectionTests, org.jfree.data.time.junit.TimeSeriesDataItemTests, org.jfree.data.time.junit.TimeSeriesDataItemTests, org.jfree.data.time.junit.TimeSeriesTests, org.jfree.data.time.junit.TimeSeriesTests, org.jfree.data.time.junit.TimeTableXYDatasetTests, org.jfree.data.time.junit.TimeTableXYDatasetTests, org.jfree.data.time.junit.WeekTests, org.jfree.data.time.junit.WeekTests, org.jfree.data.time.junit.YearTests, org.jfree.data.time.junit.YearTests, org.jfree.data.time.ohlc.junit.OHLCItemTests, org.jfree.data.time.ohlc.junit.OHLCItemTests, org.jfree.data.time.ohlc.junit.OHLCPackageTests, org.jfree.data.time.ohlc.junit.OHLCPackageTests, org.jfree.data.time.ohlc.junit.OHLCSeriesCollectionTests, org.jfree.data.time.ohlc.junit.OHLCSeriesCollectionTests, org.jfree.data.time.ohlc.junit.OHLCSeriesTests, org.jfree.data.time.ohlc.junit.OHLCSeriesTests, org.jfree.data.time.ohlc.junit.OHLCTests, org.jfree.data.time.ohlc.junit.OHLCTests, org.jfree.data.xy.junit.CategoryTableXYDatasetTests, org.jfree.data.xy.junit.CategoryTableXYDatasetTests, org.jfree.data.xy.junit.DataXYPackageTests, org.jfree.data.xy.junit.DataXYPackageTests, org.jfree.data.xy.junit.DefaultHighLowDatasetTests, org.jfree.data.xy.junit.DefaultHighLowDatasetTests, org.jfree.data.xy.junit.DefaultIntervalXYDatasetTests, org.jfree.data.xy.junit.DefaultIntervalXYDatasetTests, org.jfree.data.xy.junit.DefaultOHLCDatasetTests, org.jfree.data.xy.junit.DefaultOHLCDatasetTests, org.jfree.data.xy.junit.DefaultTableXYDatasetTests, org.jfree.data.xy.junit.DefaultTableXYDatasetTests, org.jfree.data.xy.junit.DefaultWindDatasetTests, org.jfree.data.xy.junit.DefaultWindDatasetTests, org.jfree.data.xy.junit.DefaultXYDatasetTests, org.jfree.data.xy.junit.DefaultXYDatasetTests, org.jfree.data.xy.junit.DefaultXYZDatasetTests, org.jfree.data.xy.junit.DefaultXYZDatasetTests, org.jfree.data.xy.junit.IntervalXYDelegateTests, org.jfree.data.xy.junit.IntervalXYDelegateTests, org.jfree.data.xy.junit.MatrixSeriesCollectionTests, org.jfree.data.xy.junit.MatrixSeriesCollectionTests, org.jfree.data.xy.junit.MatrixSeriesTests, org.jfree.data.xy.junit.MatrixSeriesTests, org.jfree.data.xy.junit.OHLCDataItemTests, org.jfree.data.xy.junit.OHLCDataItemTests, org.jfree.data.xy.junit.TableXYDatasetTests, org.jfree.data.xy.junit.TableXYDatasetTests, org.jfree.data.xy.junit.VectorDataItemTests, org.jfree.data.xy.junit.VectorDataItemTests, org.jfree.data.xy.junit.VectorSeriesCollectionTests, org.jfree.data.xy.junit.VectorSeriesCollectionTests, org.jfree.data.xy.junit.VectorSeriesTests, org.jfree.data.xy.junit.VectorSeriesTests, org.jfree.data.xy.junit.VectorTests, org.jfree.data.xy.junit.VectorTests, org.jfree.data.xy.junit.XIntervalDataItemTests, org.jfree.data.xy.junit.XIntervalDataItemTests, org.jfree.data.xy.junit.XIntervalSeriesCollectionTests, org.jfree.data.xy.junit.XIntervalSeriesCollectionTests, org.jfree.data.xy.junit.XIntervalSeriesTests, org.jfree.data.xy.junit.XIntervalSeriesTests, org.jfree.data.xy.junit.XYBarDatasetTests, org.jfree.data.xy.junit.XYBarDatasetTests, org.jfree.data.xy.junit.XYCoordinateTests, org.jfree.data.xy.junit.XYCoordinateTests, org.jfree.data.xy.junit.XYDataItemTests, org.jfree.data.xy.junit.XYDataItemTests, org.jfree.data.xy.junit.XYIntervalDataItemTests, org.jfree.data.xy.junit.XYIntervalDataItemTests, org.jfree.data.xy.junit.XYIntervalSeriesCollectionTests, org.jfree.data.xy.junit.XYIntervalSeriesCollectionTests, org.jfree.data.xy.junit.XYIntervalSeriesTests, org.jfree.data.xy.junit.XYIntervalSeriesTests, org.jfree.data.xy.junit.XYIntervalTests, org.jfree.data.xy.junit.XYIntervalTests, org.jfree.data.xy.junit.XYSeriesCollectionTests, org.jfree.data.xy.junit.XYSeriesCollectionTests, org.jfree.data.xy.junit.XYSeriesTests, org.jfree.data.xy.junit.XYSeriesTests, org.jfree.data.xy.junit.YIntervalDataItemTests, org.jfree.data.xy.junit.YIntervalDataItemTests, org.jfree.data.xy.junit.YIntervalSeriesCollectionTests, org.jfree.data.xy.junit.YIntervalSeriesCollectionTests, org.jfree.data.xy.junit.YIntervalSeriesTests, org.jfree.data.xy.junit.YIntervalSeriesTests, org.jfree.data.xy.junit.YIntervalTests, org.jfree.data.xy.junit.YIntervalTests, org.jfree.data.xy.junit.YWithXIntervalTests, org.jfree.data.xy.junit.YWithXIntervalTests]
04:24:53.382 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=true, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='/home/wp/RepairThemAll/script/../libs/z3/build/z3', projectSources=[source], projectClasspath='[Ljava.net.URL;@2a18f23c', projectTests=[org.jfree.chart.annotations.junit.AnnotationsPackageTests, org.jfree.chart.annotations.junit.AnnotationsPackageTests, org.jfree.chart.annotations.junit.CategoryLineAnnotationTests, org.jfree.chart.annotations.junit.CategoryLineAnnotationTests, org.jfree.chart.annotations.junit.CategoryPointerAnnotationTests, org.jfree.chart.annotations.junit.CategoryPointerAnnotationTests, org.jfree.chart.annotations.junit.CategoryTextAnnotationTests, org.jfree.chart.annotations.junit.CategoryTextAnnotationTests, org.jfree.chart.annotations.junit.TextAnnotationTests, org.jfree.chart.annotations.junit.TextAnnotationTests, org.jfree.chart.annotations.junit.XYBoxAnnotationTests, org.jfree.chart.annotations.junit.XYBoxAnnotationTests, org.jfree.chart.annotations.junit.XYDrawableAnnotationTests, org.jfree.chart.annotations.junit.XYDrawableAnnotationTests, org.jfree.chart.annotations.junit.XYImageAnnotationTests, org.jfree.chart.annotations.junit.XYImageAnnotationTests, org.jfree.chart.annotations.junit.XYLineAnnotationTests, org.jfree.chart.annotations.junit.XYLineAnnotationTests, org.jfree.chart.annotations.junit.XYPointerAnnotationTests, org.jfree.chart.annotations.junit.XYPointerAnnotationTests, org.jfree.chart.annotations.junit.XYPolygonAnnotationTests, org.jfree.chart.annotations.junit.XYPolygonAnnotationTests, org.jfree.chart.annotations.junit.XYShapeAnnotationTests, org.jfree.chart.annotations.junit.XYShapeAnnotationTests, org.jfree.chart.annotations.junit.XYTextAnnotationTests, org.jfree.chart.annotations.junit.XYTextAnnotationTests, org.jfree.chart.annotations.junit.XYTitleAnnotationTests, org.jfree.chart.annotations.junit.XYTitleAnnotationTests, org.jfree.chart.axis.junit.AxisLocationTests, org.jfree.chart.axis.junit.AxisLocationTests, org.jfree.chart.axis.junit.AxisPackageTests, org.jfree.chart.axis.junit.AxisPackageTests, org.jfree.chart.axis.junit.AxisSpaceTests, org.jfree.chart.axis.junit.AxisSpaceTests, org.jfree.chart.axis.junit.AxisTests, org.jfree.chart.axis.junit.AxisTests, org.jfree.chart.axis.junit.CategoryAnchorTests, org.jfree.chart.axis.junit.CategoryAnchorTests, org.jfree.chart.axis.junit.CategoryAxis3DTests, org.jfree.chart.axis.junit.CategoryAxis3DTests, org.jfree.chart.axis.junit.CategoryAxisTests, org.jfree.chart.axis.junit.CategoryAxisTests, org.jfree.chart.axis.junit.CategoryLabelPositionTests, org.jfree.chart.axis.junit.CategoryLabelPositionTests, org.jfree.chart.axis.junit.CategoryLabelPositionsTests, org.jfree.chart.axis.junit.CategoryLabelPositionsTests, org.jfree.chart.axis.junit.CategoryLabelWidthTypeTests, org.jfree.chart.axis.junit.CategoryLabelWidthTypeTests, org.jfree.chart.axis.junit.CategoryTickTests, org.jfree.chart.axis.junit.CategoryTickTests, org.jfree.chart.axis.junit.CyclicNumberAxisTests, org.jfree.chart.axis.junit.CyclicNumberAxisTests, org.jfree.chart.axis.junit.DateAxisTests, org.jfree.chart.axis.junit.DateAxisTests, org.jfree.chart.axis.junit.DateTickMarkPositionTests, org.jfree.chart.axis.junit.DateTickMarkPositionTests, org.jfree.chart.axis.junit.DateTickTests, org.jfree.chart.axis.junit.DateTickTests, org.jfree.chart.axis.junit.DateTickUnitTests, org.jfree.chart.axis.junit.DateTickUnitTests, org.jfree.chart.axis.junit.ExtendedCategoryAxisTests, org.jfree.chart.axis.junit.ExtendedCategoryAxisTests, org.jfree.chart.axis.junit.LogAxisTests, org.jfree.chart.axis.junit.LogAxisTests, org.jfree.chart.axis.junit.LogarithmicAxisTests, org.jfree.chart.axis.junit.LogarithmicAxisTests, org.jfree.chart.axis.junit.MarkerAxisBandTests, org.jfree.chart.axis.junit.MarkerAxisBandTests, org.jfree.chart.axis.junit.ModuloAxisTests, org.jfree.chart.axis.junit.ModuloAxisTests, org.jfree.chart.axis.junit.MonthDateFormatTests, org.jfree.chart.axis.junit.MonthDateFormatTests, org.jfree.chart.axis.junit.NumberAxis3DTests, org.jfree.chart.axis.junit.NumberAxis3DTests, org.jfree.chart.axis.junit.NumberAxisTests, org.jfree.chart.axis.junit.NumberAxisTests, org.jfree.chart.axis.junit.NumberTickUnitTests, org.jfree.chart.axis.junit.NumberTickUnitTests, org.jfree.chart.axis.junit.PeriodAxisLabelInfoTests, org.jfree.chart.axis.junit.PeriodAxisLabelInfoTests, org.jfree.chart.axis.junit.PeriodAxisTests, org.jfree.chart.axis.junit.PeriodAxisTests, org.jfree.chart.axis.junit.QuarterDateFormatTests, org.jfree.chart.axis.junit.QuarterDateFormatTests, org.jfree.chart.axis.junit.SegmentedTimelineTests, org.jfree.chart.axis.junit.SegmentedTimelineTests, org.jfree.chart.axis.junit.SegmentedTimelineTests2, org.jfree.chart.axis.junit.SegmentedTimelineTests2, org.jfree.chart.axis.junit.StandardTickUnitSourceTests, org.jfree.chart.axis.junit.StandardTickUnitSourceTests, org.jfree.chart.axis.junit.SubCategoryAxisTests, org.jfree.chart.axis.junit.SubCategoryAxisTests, org.jfree.chart.axis.junit.SymbolAxisTests, org.jfree.chart.axis.junit.SymbolAxisTests, org.jfree.chart.axis.junit.TickUnitsTests, org.jfree.chart.axis.junit.TickUnitsTests, org.jfree.chart.axis.junit.ValueAxisTests, org.jfree.chart.axis.junit.ValueAxisTests, org.jfree.chart.block.junit.AbstractBlockTests, org.jfree.chart.block.junit.AbstractBlockTests, org.jfree.chart.block.junit.BlockBorderTests, org.jfree.chart.block.junit.BlockBorderTests, org.jfree.chart.block.junit.BlockContainerTests, org.jfree.chart.block.junit.BlockContainerTests, org.jfree.chart.block.junit.BlockPackageTests, org.jfree.chart.block.junit.BlockPackageTests, org.jfree.chart.block.junit.BorderArrangementTests, org.jfree.chart.block.junit.BorderArrangementTests, org.jfree.chart.block.junit.ColorBlockTests, org.jfree.chart.block.junit.ColorBlockTests, org.jfree.chart.block.junit.ColumnArrangementTests, org.jfree.chart.block.junit.ColumnArrangementTests, org.jfree.chart.block.junit.EmptyBlockTests, org.jfree.chart.block.junit.EmptyBlockTests, org.jfree.chart.block.junit.FlowArrangementTests, org.jfree.chart.block.junit.FlowArrangementTests, org.jfree.chart.block.junit.GridArrangementTests, org.jfree.chart.block.junit.GridArrangementTests, org.jfree.chart.block.junit.LabelBlockTests, org.jfree.chart.block.junit.LabelBlockTests, org.jfree.chart.block.junit.LineBorderTests, org.jfree.chart.block.junit.LineBorderTests, org.jfree.chart.block.junit.RectangleConstraintTests, org.jfree.chart.block.junit.RectangleConstraintTests, org.jfree.chart.entity.junit.CategoryItemEntityTests, org.jfree.chart.entity.junit.CategoryItemEntityTests, org.jfree.chart.entity.junit.CategoryLabelEntityTests, org.jfree.chart.entity.junit.CategoryLabelEntityTests, org.jfree.chart.entity.junit.EntityPackageTests, org.jfree.chart.entity.junit.EntityPackageTests, org.jfree.chart.entity.junit.LegendItemEntityTests, org.jfree.chart.entity.junit.LegendItemEntityTests, org.jfree.chart.entity.junit.PieSectionEntityTests, org.jfree.chart.entity.junit.PieSectionEntityTests, org.jfree.chart.entity.junit.StandardEntityCollectionTests, org.jfree.chart.entity.junit.StandardEntityCollectionTests, org.jfree.chart.entity.junit.TickLabelEntityTests, org.jfree.chart.entity.junit.TickLabelEntityTests, org.jfree.chart.entity.junit.XYItemEntityTests, org.jfree.chart.entity.junit.XYItemEntityTests, org.jfree.chart.imagemap.junit.DynamicDriveToolTipTagFragmentGeneratorTests, org.jfree.chart.imagemap.junit.DynamicDriveToolTipTagFragmentGeneratorTests, org.jfree.chart.imagemap.junit.ImageMapPackageTests, org.jfree.chart.imagemap.junit.ImageMapPackageTests, org.jfree.chart.imagemap.junit.ImageMapUtilitiesTests, org.jfree.chart.imagemap.junit.ImageMapUtilitiesTests, org.jfree.chart.imagemap.junit.OverLIBToolTipTagFragmentGeneratorTests, org.jfree.chart.imagemap.junit.OverLIBToolTipTagFragmentGeneratorTests, org.jfree.chart.imagemap.junit.StandardToolTipTagFragmentGeneratorTests, org.jfree.chart.imagemap.junit.StandardToolTipTagFragmentGeneratorTests, org.jfree.chart.imagemap.junit.StandardURLTagFragmentGeneratorTests, org.jfree.chart.imagemap.junit.StandardURLTagFragmentGeneratorTests, org.jfree.chart.junit.AreaChartTests, org.jfree.chart.junit.AreaChartTests, org.jfree.chart.junit.BarChart3DTests, org.jfree.chart.junit.BarChart3DTests, org.jfree.chart.junit.BarChartTests, org.jfree.chart.junit.BarChartTests, org.jfree.chart.junit.ChartPackageTests, org.jfree.chart.junit.ChartPackageTests, org.jfree.chart.junit.ChartPanelTests, org.jfree.chart.junit.ChartPanelTests, org.jfree.chart.junit.ChartRenderingInfoTests, org.jfree.chart.junit.ChartRenderingInfoTests, org.jfree.chart.junit.GanttChartTests, org.jfree.chart.junit.GanttChartTests, org.jfree.chart.junit.JFreeChartTests, org.jfree.chart.junit.JFreeChartTests, org.jfree.chart.junit.LegendItemCollectionTests, org.jfree.chart.junit.LegendItemCollectionTests, org.jfree.chart.junit.LegendItemTests, org.jfree.chart.junit.LegendItemTests, org.jfree.chart.junit.LineChart3DTests, org.jfree.chart.junit.LineChart3DTests, org.jfree.chart.junit.LineChartTests, org.jfree.chart.junit.LineChartTests, org.jfree.chart.junit.MeterChartTests, org.jfree.chart.junit.MeterChartTests, org.jfree.chart.junit.PieChart3DTests, org.jfree.chart.junit.PieChart3DTests, org.jfree.chart.junit.PieChartTests, org.jfree.chart.junit.PieChartTests, org.jfree.chart.junit.ScatterPlotTests, org.jfree.chart.junit.ScatterPlotTests, org.jfree.chart.junit.StackedAreaChartTests, org.jfree.chart.junit.StackedAreaChartTests, org.jfree.chart.junit.StackedBarChart3DTests, org.jfree.chart.junit.StackedBarChart3DTests, org.jfree.chart.junit.StackedBarChartTests, org.jfree.chart.junit.StackedBarChartTests, org.jfree.chart.junit.StandardChartThemeTests, org.jfree.chart.junit.StandardChartThemeTests, org.jfree.chart.junit.TimeSeriesChartTests, org.jfree.chart.junit.TimeSeriesChartTests, org.jfree.chart.junit.WaterfallChartTests, org.jfree.chart.junit.WaterfallChartTests, org.jfree.chart.junit.XYAreaChartTests, org.jfree.chart.junit.XYAreaChartTests, org.jfree.chart.junit.XYBarChartTests, org.jfree.chart.junit.XYBarChartTests, org.jfree.chart.junit.XYLineChartTests, org.jfree.chart.junit.XYLineChartTests, org.jfree.chart.junit.XYStepAreaChartTests, org.jfree.chart.junit.XYStepAreaChartTests, org.jfree.chart.junit.XYStepChartTests, org.jfree.chart.junit.XYStepChartTests, org.jfree.chart.labels.junit.BoxAndWhiskerToolTipGeneratorTests, org.jfree.chart.labels.junit.BoxAndWhiskerToolTipGeneratorTests, org.jfree.chart.labels.junit.BoxAndWhiskerXYToolTipGeneratorTests, org.jfree.chart.labels.junit.BoxAndWhiskerXYToolTipGeneratorTests, org.jfree.chart.labels.junit.BubbleXYItemLabelGeneratorTests, org.jfree.chart.labels.junit.BubbleXYItemLabelGeneratorTests, org.jfree.chart.labels.junit.CustomXYItemLabelGeneratorTests, org.jfree.chart.labels.junit.CustomXYItemLabelGeneratorTests, org.jfree.chart.labels.junit.HighLowItemLabelGeneratorTests, org.jfree.chart.labels.junit.HighLowItemLabelGeneratorTests, org.jfree.chart.labels.junit.IntervalCategoryItemLabelGeneratorTests, org.jfree.chart.labels.junit.IntervalCategoryItemLabelGeneratorTests, org.jfree.chart.labels.junit.IntervalCategoryToolTipGeneratorTests, org.jfree.chart.labels.junit.IntervalCategoryToolTipGeneratorTests, org.jfree.chart.labels.junit.ItemLabelAnchorTests, org.jfree.chart.labels.junit.ItemLabelAnchorTests, org.jfree.chart.labels.junit.ItemLabelPositionTests, org.jfree.chart.labels.junit.ItemLabelPositionTests, org.jfree.chart.labels.junit.LabelsPackageTests, org.jfree.chart.labels.junit.LabelsPackageTests, org.jfree.chart.labels.junit.MultipleXYSeriesLabelGeneratorTests, org.jfree.chart.labels.junit.MultipleXYSeriesLabelGeneratorTests, org.jfree.chart.labels.junit.StandardCategoryItemLabelGeneratorTests, org.jfree.chart.labels.junit.StandardCategoryItemLabelGeneratorTests, org.jfree.chart.labels.junit.StandardCategorySeriesLabelGeneratorTests, org.jfree.chart.labels.junit.StandardCategorySeriesLabelGeneratorTests, org.jfree.chart.labels.junit.StandardCategoryToolTipGeneratorTests, org.jfree.chart.labels.junit.StandardCategoryToolTipGeneratorTests, org.jfree.chart.labels.junit.StandardPieSectionLabelGeneratorTests, org.jfree.chart.labels.junit.StandardPieSectionLabelGeneratorTests, org.jfree.chart.labels.junit.StandardPieToolTipGeneratorTests, org.jfree.chart.labels.junit.StandardPieToolTipGeneratorTests, org.jfree.chart.labels.junit.StandardXYItemLabelGeneratorTests, org.jfree.chart.labels.junit.StandardXYItemLabelGeneratorTests, org.jfree.chart.labels.junit.StandardXYSeriesLabelGeneratorTests, org.jfree.chart.labels.junit.StandardXYSeriesLabelGeneratorTests, org.jfree.chart.labels.junit.StandardXYToolTipGeneratorTests, org.jfree.chart.labels.junit.StandardXYToolTipGeneratorTests, org.jfree.chart.labels.junit.StandardXYZToolTipGeneratorTests, org.jfree.chart.labels.junit.StandardXYZToolTipGeneratorTests, org.jfree.chart.labels.junit.SymbolicXYItemLabelGeneratorTests, org.jfree.chart.labels.junit.SymbolicXYItemLabelGeneratorTests, org.jfree.chart.needle.junit.ArrowNeedleTests, org.jfree.chart.needle.junit.ArrowNeedleTests, org.jfree.chart.needle.junit.LineNeedleTests, org.jfree.chart.needle.junit.LineNeedleTests, org.jfree.chart.needle.junit.LongNeedleTests, org.jfree.chart.needle.junit.LongNeedleTests, org.jfree.chart.needle.junit.MeterNeedleTests, org.jfree.chart.needle.junit.MeterNeedleTests, org.jfree.chart.needle.junit.MiddlePinNeedleTests, org.jfree.chart.needle.junit.MiddlePinNeedleTests, org.jfree.chart.needle.junit.NeedlePackageTests, org.jfree.chart.needle.junit.NeedlePackageTests, org.jfree.chart.needle.junit.PinNeedleTests, org.jfree.chart.needle.junit.PinNeedleTests, org.jfree.chart.needle.junit.PlumNeedleTests, org.jfree.chart.needle.junit.PlumNeedleTests, org.jfree.chart.needle.junit.PointerNeedleTests, org.jfree.chart.needle.junit.PointerNeedleTests, org.jfree.chart.needle.junit.ShipNeedleTests, org.jfree.chart.needle.junit.ShipNeedleTests, org.jfree.chart.needle.junit.WindNeedleTests, org.jfree.chart.needle.junit.WindNeedleTests, org.jfree.chart.plot.dial.junit.AbstractDialLayerTests, org.jfree.chart.plot.dial.junit.AbstractDialLayerTests, org.jfree.chart.plot.dial.junit.ArcDialFrameTests, org.jfree.chart.plot.dial.junit.ArcDialFrameTests, org.jfree.chart.plot.dial.junit.DialBackgroundTests, org.jfree.chart.plot.dial.junit.DialBackgroundTests, org.jfree.chart.plot.dial.junit.DialCapTests, org.jfree.chart.plot.dial.junit.DialCapTests, org.jfree.chart.plot.dial.junit.DialPackageTests, org.jfree.chart.plot.dial.junit.DialPackageTests, org.jfree.chart.plot.dial.junit.DialPlotTests, org.jfree.chart.plot.dial.junit.DialPlotTests, org.jfree.chart.plot.dial.junit.DialPointerTests, org.jfree.chart.plot.dial.junit.DialPointerTests, org.jfree.chart.plot.dial.junit.DialTextAnnotationTests, org.jfree.chart.plot.dial.junit.DialTextAnnotationTests, org.jfree.chart.plot.dial.junit.DialValueIndicatorTests, org.jfree.chart.plot.dial.junit.DialValueIndicatorTests, org.jfree.chart.plot.dial.junit.StandardDialFrameTests, org.jfree.chart.plot.dial.junit.StandardDialFrameTests, org.jfree.chart.plot.dial.junit.StandardDialRangeTests, org.jfree.chart.plot.dial.junit.StandardDialRangeTests, org.jfree.chart.plot.dial.junit.StandardDialScaleTests, org.jfree.chart.plot.dial.junit.StandardDialScaleTests, org.jfree.chart.plot.junit.CategoryMarkerTests, org.jfree.chart.plot.junit.CategoryMarkerTests, org.jfree.chart.plot.junit.CategoryPlotTests, org.jfree.chart.plot.junit.CategoryPlotTests, org.jfree.chart.plot.junit.CombinedDomainCategoryPlotTests, org.jfree.chart.plot.junit.CombinedDomainCategoryPlotTests, org.jfree.chart.plot.junit.CombinedDomainXYPlotTests, org.jfree.chart.plot.junit.CombinedDomainXYPlotTests, org.jfree.chart.plot.junit.CombinedRangeCategoryPlotTests, org.jfree.chart.plot.junit.CombinedRangeCategoryPlotTests, org.jfree.chart.plot.junit.CombinedRangeXYPlotTests, org.jfree.chart.plot.junit.CombinedRangeXYPlotTests, org.jfree.chart.plot.junit.CompassPlotTests, org.jfree.chart.plot.junit.CompassPlotTests, org.jfree.chart.plot.junit.DefaultDrawingSupplierTests, org.jfree.chart.plot.junit.DefaultDrawingSupplierTests, org.jfree.chart.plot.junit.FastScatterPlotTests, org.jfree.chart.plot.junit.FastScatterPlotTests, org.jfree.chart.plot.junit.IntervalMarkerTests, org.jfree.chart.plot.junit.IntervalMarkerTests, org.jfree.chart.plot.junit.MarkerTests, org.jfree.chart.plot.junit.MarkerTests, org.jfree.chart.plot.junit.MeterIntervalTests, org.jfree.chart.plot.junit.MeterIntervalTests, org.jfree.chart.plot.junit.MeterPlotTests, org.jfree.chart.plot.junit.MeterPlotTests, org.jfree.chart.plot.junit.MultiplePiePlotTests, org.jfree.chart.plot.junit.MultiplePiePlotTests, org.jfree.chart.plot.junit.PieLabelRecordTests, org.jfree.chart.plot.junit.PieLabelRecordTests, org.jfree.chart.plot.junit.PiePlot3DTests, org.jfree.chart.plot.junit.PiePlot3DTests, org.jfree.chart.plot.junit.PiePlotTests, org.jfree.chart.plot.junit.PiePlotTests, org.jfree.chart.plot.junit.PlotOrientationTests, org.jfree.chart.plot.junit.PlotOrientationTests, org.jfree.chart.plot.junit.PlotPackageTests, org.jfree.chart.plot.junit.PlotPackageTests, org.jfree.chart.plot.junit.PlotRenderingInfoTests, org.jfree.chart.plot.junit.PlotRenderingInfoTests, org.jfree.chart.plot.junit.PlotTests, org.jfree.chart.plot.junit.PlotTests, org.jfree.chart.plot.junit.PolarPlotTests, org.jfree.chart.plot.junit.PolarPlotTests, org.jfree.chart.plot.junit.RingPlotTests, org.jfree.chart.plot.junit.RingPlotTests, org.jfree.chart.plot.junit.SpiderWebPlotTests, org.jfree.chart.plot.junit.SpiderWebPlotTests, org.jfree.chart.plot.junit.ThermometerPlotTests, org.jfree.chart.plot.junit.ThermometerPlotTests, org.jfree.chart.plot.junit.ValueMarkerTests, org.jfree.chart.plot.junit.ValueMarkerTests, org.jfree.chart.plot.junit.XYPlotTests, org.jfree.chart.plot.junit.XYPlotTests, org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests, org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests, org.jfree.chart.renderer.category.junit.AreaRendererTests, org.jfree.chart.renderer.category.junit.AreaRendererTests, org.jfree.chart.renderer.category.junit.BarRenderer3DTests, org.jfree.chart.renderer.category.junit.BarRenderer3DTests, org.jfree.chart.renderer.category.junit.BarRendererTests, org.jfree.chart.renderer.category.junit.BarRendererTests, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests, org.jfree.chart.renderer.category.junit.CategoryStepRendererTests, org.jfree.chart.renderer.category.junit.CategoryStepRendererTests, org.jfree.chart.renderer.category.junit.DefaultCategoryItemRendererTests, org.jfree.chart.renderer.category.junit.DefaultCategoryItemRendererTests, org.jfree.chart.renderer.category.junit.GanttRendererTests, org.jfree.chart.renderer.category.junit.GanttRendererTests, org.jfree.chart.renderer.category.junit.GradientBarPainterTests, org.jfree.chart.renderer.category.junit.GradientBarPainterTests, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests, org.jfree.chart.renderer.category.junit.LevelRendererTests, org.jfree.chart.renderer.category.junit.LevelRendererTests, org.jfree.chart.renderer.category.junit.LineAndShapeRendererTests, org.jfree.chart.renderer.category.junit.LineAndShapeRendererTests, org.jfree.chart.renderer.category.junit.LineRenderer3DTests, org.jfree.chart.renderer.category.junit.LineRenderer3DTests, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests, org.jfree.chart.renderer.category.junit.RendererCategoryPackageTests, org.jfree.chart.renderer.category.junit.RendererCategoryPackageTests, org.jfree.chart.renderer.category.junit.ScatterRendererTests, org.jfree.chart.renderer.category.junit.ScatterRendererTests, org.jfree.chart.renderer.category.junit.StackedAreaRendererTests, org.jfree.chart.renderer.category.junit.StackedAreaRendererTests, org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests, org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests, org.jfree.chart.renderer.category.junit.StackedBarRendererTests, org.jfree.chart.renderer.category.junit.StackedBarRendererTests, org.jfree.chart.renderer.category.junit.StandardBarPainterTests, org.jfree.chart.renderer.category.junit.StandardBarPainterTests, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests, org.jfree.chart.renderer.category.junit.WaterfallBarRendererTests, org.jfree.chart.renderer.category.junit.WaterfallBarRendererTests, org.jfree.chart.renderer.junit.AbstractRendererTests, org.jfree.chart.renderer.junit.AbstractRendererTests, org.jfree.chart.renderer.junit.AreaRendererEndTypeTests, org.jfree.chart.renderer.junit.AreaRendererEndTypeTests, org.jfree.chart.renderer.junit.DefaultPolarItemRendererTests, org.jfree.chart.renderer.junit.DefaultPolarItemRendererTests, org.jfree.chart.renderer.junit.GrayPaintScaleTests, org.jfree.chart.renderer.junit.GrayPaintScaleTests, org.jfree.chart.renderer.junit.LookupPaintScaleTests, org.jfree.chart.renderer.junit.LookupPaintScaleTests, org.jfree.chart.renderer.junit.OutlierTests, org.jfree.chart.renderer.junit.OutlierTests, org.jfree.chart.renderer.junit.RendererPackageTests, org.jfree.chart.renderer.junit.RendererPackageTests, org.jfree.chart.renderer.junit.RendererUtilitiesTests, org.jfree.chart.renderer.junit.RendererUtilitiesTests, org.jfree.chart.renderer.xy.junit.AbstractXYItemRendererTests, org.jfree.chart.renderer.xy.junit.AbstractXYItemRendererTests, org.jfree.chart.renderer.xy.junit.CandlestickRendererTests, org.jfree.chart.renderer.xy.junit.CandlestickRendererTests, org.jfree.chart.renderer.xy.junit.ClusteredXYBarRendererTests, org.jfree.chart.renderer.xy.junit.ClusteredXYBarRendererTests, org.jfree.chart.renderer.xy.junit.DeviationRendererTests, org.jfree.chart.renderer.xy.junit.DeviationRendererTests, org.jfree.chart.renderer.xy.junit.GradientXYBarPainterTests, org.jfree.chart.renderer.xy.junit.GradientXYBarPainterTests, org.jfree.chart.renderer.xy.junit.HighLowRendererTests, org.jfree.chart.renderer.xy.junit.HighLowRendererTests, org.jfree.chart.renderer.xy.junit.RendererXYPackageTests, org.jfree.chart.renderer.xy.junit.RendererXYPackageTests, org.jfree.chart.renderer.xy.junit.StackedXYAreaRenderer2Tests, org.jfree.chart.renderer.xy.junit.StackedXYAreaRenderer2Tests, org.jfree.chart.renderer.xy.junit.StackedXYAreaRendererTests, org.jfree.chart.renderer.xy.junit.StackedXYAreaRendererTests, org.jfree.chart.renderer.xy.junit.StackedXYBarRendererTests, org.jfree.chart.renderer.xy.junit.StackedXYBarRendererTests, org.jfree.chart.renderer.xy.junit.StandardXYBarPainterTests, org.jfree.chart.renderer.xy.junit.StandardXYBarPainterTests, org.jfree.chart.renderer.xy.junit.StandardXYItemRendererTests, org.jfree.chart.renderer.xy.junit.StandardXYItemRendererTests, org.jfree.chart.renderer.xy.junit.VectorRendererTests, org.jfree.chart.renderer.xy.junit.VectorRendererTests, org.jfree.chart.renderer.xy.junit.WindItemRendererTests, org.jfree.chart.renderer.xy.junit.WindItemRendererTests, org.jfree.chart.renderer.xy.junit.XYAreaRenderer2Tests, org.jfree.chart.renderer.xy.junit.XYAreaRenderer2Tests, org.jfree.chart.renderer.xy.junit.XYAreaRendererTests, org.jfree.chart.renderer.xy.junit.XYAreaRendererTests, org.jfree.chart.renderer.xy.junit.XYBarRendererTests, org.jfree.chart.renderer.xy.junit.XYBarRendererTests, org.jfree.chart.renderer.xy.junit.XYBlockRendererTests, org.jfree.chart.renderer.xy.junit.XYBlockRendererTests, org.jfree.chart.renderer.xy.junit.XYBoxAndWhiskerRendererTests, org.jfree.chart.renderer.xy.junit.XYBoxAndWhiskerRendererTests, org.jfree.chart.renderer.xy.junit.XYBubbleRendererTests, org.jfree.chart.renderer.xy.junit.XYBubbleRendererTests, org.jfree.chart.renderer.xy.junit.XYDifferenceRendererTests, org.jfree.chart.renderer.xy.junit.XYDifferenceRendererTests, org.jfree.chart.renderer.xy.junit.XYDotRendererTests, org.jfree.chart.renderer.xy.junit.XYDotRendererTests, org.jfree.chart.renderer.xy.junit.XYErrorRendererTests, org.jfree.chart.renderer.xy.junit.XYErrorRendererTests, org.jfree.chart.renderer.xy.junit.XYLine3DRendererTests, org.jfree.chart.renderer.xy.junit.XYLine3DRendererTests, org.jfree.chart.renderer.xy.junit.XYLineAndShapeRendererTests, org.jfree.chart.renderer.xy.junit.XYLineAndShapeRendererTests, org.jfree.chart.renderer.xy.junit.XYShapeRendererTests, org.jfree.chart.renderer.xy.junit.XYShapeRendererTests, org.jfree.chart.renderer.xy.junit.XYSplineRendererTests, org.jfree.chart.renderer.xy.junit.XYSplineRendererTests, org.jfree.chart.renderer.xy.junit.XYStepAreaRendererTests, org.jfree.chart.renderer.xy.junit.XYStepAreaRendererTests, org.jfree.chart.renderer.xy.junit.XYStepRendererTests, org.jfree.chart.renderer.xy.junit.XYStepRendererTests, org.jfree.chart.renderer.xy.junit.YIntervalRendererTests, org.jfree.chart.renderer.xy.junit.YIntervalRendererTests, org.jfree.chart.title.junit.CompositeTitleTests, org.jfree.chart.title.junit.CompositeTitleTests, org.jfree.chart.title.junit.DateTitleTests, org.jfree.chart.title.junit.DateTitleTests, org.jfree.chart.title.junit.ImageTitleTests, org.jfree.chart.title.junit.ImageTitleTests, org.jfree.chart.title.junit.LegendGraphicTests, org.jfree.chart.title.junit.LegendGraphicTests, org.jfree.chart.title.junit.LegendTitleTests, org.jfree.chart.title.junit.LegendTitleTests, org.jfree.chart.title.junit.PaintScaleLegendTests, org.jfree.chart.title.junit.PaintScaleLegendTests, org.jfree.chart.title.junit.ShortTextTitleTests, org.jfree.chart.title.junit.ShortTextTitleTests, org.jfree.chart.title.junit.TextTitleTests, org.jfree.chart.title.junit.TextTitleTests, org.jfree.chart.title.junit.TitlePackageTests, org.jfree.chart.title.junit.TitlePackageTests, org.jfree.chart.title.junit.TitleTests, org.jfree.chart.title.junit.TitleTests, org.jfree.chart.urls.junit.CustomCategoryURLGeneratorTests, org.jfree.chart.urls.junit.CustomCategoryURLGeneratorTests, org.jfree.chart.urls.junit.CustomPieURLGeneratorTests, org.jfree.chart.urls.junit.CustomPieURLGeneratorTests, org.jfree.chart.urls.junit.CustomXYURLGeneratorTests, org.jfree.chart.urls.junit.CustomXYURLGeneratorTests, org.jfree.chart.urls.junit.StandardCategoryURLGeneratorTests, org.jfree.chart.urls.junit.StandardCategoryURLGeneratorTests, org.jfree.chart.urls.junit.StandardPieURLGeneratorTests, org.jfree.chart.urls.junit.StandardPieURLGeneratorTests, org.jfree.chart.urls.junit.StandardXYURLGeneratorTests, org.jfree.chart.urls.junit.StandardXYURLGeneratorTests, org.jfree.chart.urls.junit.TimeSeriesURLGeneratorTests, org.jfree.chart.urls.junit.TimeSeriesURLGeneratorTests, org.jfree.chart.urls.junit.UrlsPackageTests, org.jfree.chart.urls.junit.UrlsPackageTests, org.jfree.chart.util.junit.BooleanListTests, org.jfree.chart.util.junit.BooleanListTests, org.jfree.chart.util.junit.HashUtilitiesTests, org.jfree.chart.util.junit.HashUtilitiesTests, org.jfree.chart.util.junit.LineUtilitiesTests, org.jfree.chart.util.junit.LineUtilitiesTests, org.jfree.chart.util.junit.LogFormatTests, org.jfree.chart.util.junit.LogFormatTests, org.jfree.chart.util.junit.PaintListTests, org.jfree.chart.util.junit.PaintListTests, org.jfree.chart.util.junit.PaintMapTests, org.jfree.chart.util.junit.PaintMapTests, org.jfree.chart.util.junit.RelativeDateFormatTests, org.jfree.chart.util.junit.RelativeDateFormatTests, org.jfree.chart.util.junit.SerialUtilitiesTests, org.jfree.chart.util.junit.SerialUtilitiesTests, org.jfree.chart.util.junit.ShapeListTests, org.jfree.chart.util.junit.ShapeListTests, org.jfree.chart.util.junit.ShapeUtilitiesTests, org.jfree.chart.util.junit.ShapeUtilitiesTests, org.jfree.chart.util.junit.StrokeListTests, org.jfree.chart.util.junit.StrokeListTests, org.jfree.chart.util.junit.StrokeMapTests, org.jfree.chart.util.junit.StrokeMapTests, org.jfree.chart.util.junit.UtilPackageTests, org.jfree.chart.util.junit.UtilPackageTests, org.jfree.data.category.junit.CategoryToPieDatasetTests, org.jfree.data.category.junit.CategoryToPieDatasetTests, org.jfree.data.category.junit.DataCategoryPackageTests, org.jfree.data.category.junit.DataCategoryPackageTests, org.jfree.data.category.junit.DefaultCategoryDatasetTests, org.jfree.data.category.junit.DefaultCategoryDatasetTests, org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests, org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests, org.jfree.data.category.junit.SlidingCategoryDatasetTests, org.jfree.data.category.junit.SlidingCategoryDatasetTests, org.jfree.data.function.junit.DataFunctionPackageTests, org.jfree.data.function.junit.DataFunctionPackageTests, org.jfree.data.function.junit.LineFunction2DTests, org.jfree.data.function.junit.LineFunction2DTests, org.jfree.data.function.junit.NormalDistributionFunction2DTests, org.jfree.data.function.junit.NormalDistributionFunction2DTests, org.jfree.data.function.junit.PolynomialFunction2DTests, org.jfree.data.function.junit.PolynomialFunction2DTests, org.jfree.data.function.junit.PowerFunction2DTests, org.jfree.data.function.junit.PowerFunction2DTests, org.jfree.data.gantt.junit.DataGanttPackageTests, org.jfree.data.gantt.junit.DataGanttPackageTests, org.jfree.data.gantt.junit.SlidingGanttCategoryDatasetTests, org.jfree.data.gantt.junit.SlidingGanttCategoryDatasetTests, org.jfree.data.gantt.junit.TaskSeriesCollectionTests, org.jfree.data.gantt.junit.TaskSeriesCollectionTests, org.jfree.data.gantt.junit.TaskSeriesTests, org.jfree.data.gantt.junit.TaskSeriesTests, org.jfree.data.gantt.junit.TaskTests, org.jfree.data.gantt.junit.TaskTests, org.jfree.data.gantt.junit.XYTaskDatasetTests, org.jfree.data.gantt.junit.XYTaskDatasetTests, org.jfree.data.general.junit.DataGeneralPackageTests, org.jfree.data.general.junit.DataGeneralPackageTests, org.jfree.data.general.junit.DatasetGroupTests, org.jfree.data.general.junit.DatasetGroupTests, org.jfree.data.general.junit.DatasetUtilitiesTests, org.jfree.data.general.junit.DatasetUtilitiesTests, org.jfree.data.general.junit.DefaultHeatMapDatasetTests, org.jfree.data.general.junit.DefaultHeatMapDatasetTests, org.jfree.data.general.junit.DefaultKeyedValueDatasetTests, org.jfree.data.general.junit.DefaultKeyedValueDatasetTests, org.jfree.data.general.junit.DefaultKeyedValues2DDatasetTests, org.jfree.data.general.junit.DefaultKeyedValues2DDatasetTests, org.jfree.data.general.junit.DefaultKeyedValuesDatasetTests, org.jfree.data.general.junit.DefaultKeyedValuesDatasetTests, org.jfree.data.general.junit.DefaultPieDatasetTests, org.jfree.data.general.junit.DefaultPieDatasetTests, org.jfree.data.junit.ComparableObjectItemTests, org.jfree.data.junit.ComparableObjectItemTests, org.jfree.data.junit.ComparableObjectSeriesTests, org.jfree.data.junit.ComparableObjectSeriesTests, org.jfree.data.junit.DataPackageTests, org.jfree.data.junit.DataPackageTests, org.jfree.data.junit.DataUtilitiesTests, org.jfree.data.junit.DataUtilitiesTests, org.jfree.data.junit.DefaultKeyedValueTests, org.jfree.data.junit.DefaultKeyedValueTests, org.jfree.data.junit.DefaultKeyedValues2DTests, org.jfree.data.junit.DefaultKeyedValues2DTests, org.jfree.data.junit.DefaultKeyedValuesTests, org.jfree.data.junit.DefaultKeyedValuesTests, org.jfree.data.junit.DomainOrderTests, org.jfree.data.junit.DomainOrderTests, org.jfree.data.junit.KeyToGroupMapTests, org.jfree.data.junit.KeyToGroupMapTests, org.jfree.data.junit.KeyedObjectTests, org.jfree.data.junit.KeyedObjectTests, org.jfree.data.junit.KeyedObjects2DTests, org.jfree.data.junit.KeyedObjects2DTests, org.jfree.data.junit.KeyedObjectsTests, org.jfree.data.junit.KeyedObjectsTests, org.jfree.data.junit.RangeTests, org.jfree.data.junit.RangeTests, org.jfree.data.junit.RangeTypeTests, org.jfree.data.junit.RangeTypeTests, org.jfree.data.statistics.junit.BoxAndWhiskerCalculatorTests, org.jfree.data.statistics.junit.BoxAndWhiskerCalculatorTests, org.jfree.data.statistics.junit.BoxAndWhiskerItemTests, org.jfree.data.statistics.junit.BoxAndWhiskerItemTests, org.jfree.data.statistics.junit.DataStatisticsPackageTests, org.jfree.data.statistics.junit.DataStatisticsPackageTests, org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests, org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests, org.jfree.data.statistics.junit.DefaultBoxAndWhiskerXYDatasetTests, org.jfree.data.statistics.junit.DefaultBoxAndWhiskerXYDatasetTests, org.jfree.data.statistics.junit.DefaultMultiValueCategoryDatasetTests, org.jfree.data.statistics.junit.DefaultMultiValueCategoryDatasetTests, org.jfree.data.statistics.junit.DefaultStatisticalCategoryDatasetTests, org.jfree.data.statistics.junit.DefaultStatisticalCategoryDatasetTests, org.jfree.data.statistics.junit.HistogramBinTests, org.jfree.data.statistics.junit.HistogramBinTests, org.jfree.data.statistics.junit.HistogramDatasetTests, org.jfree.data.statistics.junit.HistogramDatasetTests, org.jfree.data.statistics.junit.MeanAndStandardDeviationTests, org.jfree.data.statistics.junit.MeanAndStandardDeviationTests, org.jfree.data.statistics.junit.RegressionTests, org.jfree.data.statistics.junit.RegressionTests, org.jfree.data.statistics.junit.SimpleHistogramBinTests, org.jfree.data.statistics.junit.SimpleHistogramBinTests, org.jfree.data.statistics.junit.SimpleHistogramDatasetTests, org.jfree.data.statistics.junit.SimpleHistogramDatasetTests, org.jfree.data.statistics.junit.StatisticsTests, org.jfree.data.statistics.junit.StatisticsTests, org.jfree.data.time.junit.DataTimePackageTests, org.jfree.data.time.junit.DataTimePackageTests, org.jfree.data.time.junit.DateRangeTests, org.jfree.data.time.junit.DateRangeTests, org.jfree.data.time.junit.DayTests, org.jfree.data.time.junit.DayTests, org.jfree.data.time.junit.FixedMillisecondTests, org.jfree.data.time.junit.FixedMillisecondTests, org.jfree.data.time.junit.HourTests, org.jfree.data.time.junit.HourTests, org.jfree.data.time.junit.MillisecondTests, org.jfree.data.time.junit.MillisecondTests, org.jfree.data.time.junit.MinuteTests, org.jfree.data.time.junit.MinuteTests, org.jfree.data.time.junit.MonthTests, org.jfree.data.time.junit.MonthTests, org.jfree.data.time.junit.MovingAverageTests, org.jfree.data.time.junit.MovingAverageTests, org.jfree.data.time.junit.QuarterTests, org.jfree.data.time.junit.QuarterTests, org.jfree.data.time.junit.SecondTests, org.jfree.data.time.junit.SecondTests, org.jfree.data.time.junit.SimpleTimePeriodTests, org.jfree.data.time.junit.SimpleTimePeriodTests, org.jfree.data.time.junit.TimePeriodAnchorTests, org.jfree.data.time.junit.TimePeriodAnchorTests, org.jfree.data.time.junit.TimePeriodValueTests, org.jfree.data.time.junit.TimePeriodValueTests, org.jfree.data.time.junit.TimePeriodValuesCollectionTests, org.jfree.data.time.junit.TimePeriodValuesCollectionTests, org.jfree.data.time.junit.TimePeriodValuesTests, org.jfree.data.time.junit.TimePeriodValuesTests, org.jfree.data.time.junit.TimeSeriesCollectionTests, org.jfree.data.time.junit.TimeSeriesCollectionTests, org.jfree.data.time.junit.TimeSeriesDataItemTests, org.jfree.data.time.junit.TimeSeriesDataItemTests, org.jfree.data.time.junit.TimeSeriesTests, org.jfree.data.time.junit.TimeSeriesTests, org.jfree.data.time.junit.TimeTableXYDatasetTests, org.jfree.data.time.junit.TimeTableXYDatasetTests, org.jfree.data.time.junit.WeekTests, org.jfree.data.time.junit.WeekTests, org.jfree.data.time.junit.YearTests, org.jfree.data.time.junit.YearTests, org.jfree.data.time.ohlc.junit.OHLCItemTests, org.jfree.data.time.ohlc.junit.OHLCItemTests, org.jfree.data.time.ohlc.junit.OHLCPackageTests, org.jfree.data.time.ohlc.junit.OHLCPackageTests, org.jfree.data.time.ohlc.junit.OHLCSeriesCollectionTests, org.jfree.data.time.ohlc.junit.OHLCSeriesCollectionTests, org.jfree.data.time.ohlc.junit.OHLCSeriesTests, org.jfree.data.time.ohlc.junit.OHLCSeriesTests, org.jfree.data.time.ohlc.junit.OHLCTests, org.jfree.data.time.ohlc.junit.OHLCTests, org.jfree.data.xy.junit.CategoryTableXYDatasetTests, org.jfree.data.xy.junit.CategoryTableXYDatasetTests, org.jfree.data.xy.junit.DataXYPackageTests, org.jfree.data.xy.junit.DataXYPackageTests, org.jfree.data.xy.junit.DefaultHighLowDatasetTests, org.jfree.data.xy.junit.DefaultHighLowDatasetTests, org.jfree.data.xy.junit.DefaultIntervalXYDatasetTests, org.jfree.data.xy.junit.DefaultIntervalXYDatasetTests, org.jfree.data.xy.junit.DefaultOHLCDatasetTests, org.jfree.data.xy.junit.DefaultOHLCDatasetTests, org.jfree.data.xy.junit.DefaultTableXYDatasetTests, org.jfree.data.xy.junit.DefaultTableXYDatasetTests, org.jfree.data.xy.junit.DefaultWindDatasetTests, org.jfree.data.xy.junit.DefaultWindDatasetTests, org.jfree.data.xy.junit.DefaultXYDatasetTests, org.jfree.data.xy.junit.DefaultXYDatasetTests, org.jfree.data.xy.junit.DefaultXYZDatasetTests, org.jfree.data.xy.junit.DefaultXYZDatasetTests, org.jfree.data.xy.junit.IntervalXYDelegateTests, org.jfree.data.xy.junit.IntervalXYDelegateTests, org.jfree.data.xy.junit.MatrixSeriesCollectionTests, org.jfree.data.xy.junit.MatrixSeriesCollectionTests, org.jfree.data.xy.junit.MatrixSeriesTests, org.jfree.data.xy.junit.MatrixSeriesTests, org.jfree.data.xy.junit.OHLCDataItemTests, org.jfree.data.xy.junit.OHLCDataItemTests, org.jfree.data.xy.junit.TableXYDatasetTests, org.jfree.data.xy.junit.TableXYDatasetTests, org.jfree.data.xy.junit.VectorDataItemTests, org.jfree.data.xy.junit.VectorDataItemTests, org.jfree.data.xy.junit.VectorSeriesCollectionTests, org.jfree.data.xy.junit.VectorSeriesCollectionTests, org.jfree.data.xy.junit.VectorSeriesTests, org.jfree.data.xy.junit.VectorSeriesTests, org.jfree.data.xy.junit.VectorTests, org.jfree.data.xy.junit.VectorTests, org.jfree.data.xy.junit.XIntervalDataItemTests, org.jfree.data.xy.junit.XIntervalDataItemTests, org.jfree.data.xy.junit.XIntervalSeriesCollectionTests, org.jfree.data.xy.junit.XIntervalSeriesCollectionTests, org.jfree.data.xy.junit.XIntervalSeriesTests, org.jfree.data.xy.junit.XIntervalSeriesTests, org.jfree.data.xy.junit.XYBarDatasetTests, org.jfree.data.xy.junit.XYBarDatasetTests, org.jfree.data.xy.junit.XYCoordinateTests, org.jfree.data.xy.junit.XYCoordinateTests, org.jfree.data.xy.junit.XYDataItemTests, org.jfree.data.xy.junit.XYDataItemTests, org.jfree.data.xy.junit.XYIntervalDataItemTests, org.jfree.data.xy.junit.XYIntervalDataItemTests, org.jfree.data.xy.junit.XYIntervalSeriesCollectionTests, org.jfree.data.xy.junit.XYIntervalSeriesCollectionTests, org.jfree.data.xy.junit.XYIntervalSeriesTests, org.jfree.data.xy.junit.XYIntervalSeriesTests, org.jfree.data.xy.junit.XYIntervalTests, org.jfree.data.xy.junit.XYIntervalTests, org.jfree.data.xy.junit.XYSeriesCollectionTests, org.jfree.data.xy.junit.XYSeriesCollectionTests, org.jfree.data.xy.junit.XYSeriesTests, org.jfree.data.xy.junit.XYSeriesTests, org.jfree.data.xy.junit.YIntervalDataItemTests, org.jfree.data.xy.junit.YIntervalDataItemTests, org.jfree.data.xy.junit.YIntervalSeriesCollectionTests, org.jfree.data.xy.junit.YIntervalSeriesCollectionTests, org.jfree.data.xy.junit.YIntervalSeriesTests, org.jfree.data.xy.junit.YIntervalSeriesTests, org.jfree.data.xy.junit.YIntervalTests, org.jfree.data.xy.junit.YIntervalTests, org.jfree.data.xy.junit.YWithXIntervalTests, org.jfree.data.xy.junit.YWithXIntervalTests], complianceLevel=4, outputFolder=., json=true}
04:24:53.382 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Available processors (cores): 1
04:24:53.423 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Free memory: 918 MB
04:24:53.423 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Maximum memory: 989 MB
04:24:53.423 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Total memory available to JVM: 989 MB
04:24:53.423 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Java version: 1.8.0_71
04:24:53.424 [main] INFO  fr.inria.lille.repair.nopol.NoPol - JAVA_HOME: /home/wp/tool/jdk1.8.0_71/bin/
04:24:53.424 [main] INFO  fr.inria.lille.repair.nopol.NoPol - PATH: /home/wp/tool/jdk1.8.0_71/bin/:/home/wp/RepairThemAll/benchmarks/defects4j/framework/bin:/home/wp/tool/gradle-5.4.1/bin:/home/wp/tool/apache-maven-3.5.2/bin:/home/wp/tool/jdk1.8.0_71//bin:/home/wp/tool/apache-ant-1.9.14/bin:/home/wp/tool/jdk1.8.0_71//bin:/home/wp/tool/jdk1.8.0_71/jre/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games
After filtering ......
rootclassname is org.jfree.data.general.DatasetUtilities
line number is 1243
04:26:39.733 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #1
04:26:39.750 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.data.general.DatasetUtilities:1243 which is executed by 16 tests
1355738515
After filtering ......
rootclassname is org.jfree.data.general.DatasetUtilities
line number is 1242
04:26:43.534 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #2
04:26:43.534 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.data.general.DatasetUtilities:1242 which is executed by 16 tests
1355738515
After filtering ......
rootclassname is org.jfree.data.general.DatasetUtilities
line number is 755
04:26:44.053 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #3
04:26:44.053 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.data.general.DatasetUtilities:755 which is executed by 20 tests
1355738515
04:26:44.381 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
04:26:48.282 [pool-3-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
DatasetUtilities.java:320: error: variable lvalue might not have been initialized
                    if (!java.lang.Double.isNaN(lvalue)) {
                                                ^
04:26:48.474 [pool-3-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public final class DatasetUtilities {
    private DatasetUtilities() {
    }

    public static double calculatePieDatasetTotal(org.jfree.data.pie.PieDataset dataset) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        java.util.List keys = dataset.getKeys();
        double totalValue = 0;
        java.util.Iterator iterator = keys.iterator();
        while (iterator.hasNext()) {
            java.lang.Comparable current = ((java.lang.Comparable) (iterator.next()));
            if (current != null) {
                java.lang.Number value = dataset.getValue(current);
                double v = 0.0;
                if (value != null) {
                    v = value.doubleValue();
                }
                if (v > 0) {
                    totalValue = totalValue + v;
                }
            }
        } 
        return totalValue;
    }

    public static org.jfree.data.pie.PieDataset createPieDatasetForRow(org.jfree.data.category.CategoryDataset dataset, java.lang.Comparable rowKey) {
        int row = dataset.getRowIndex(rowKey);
        return org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(dataset, row);
    }

    public static org.jfree.data.pie.PieDataset createPieDatasetForRow(org.jfree.data.category.CategoryDataset dataset, int row) {
        org.jfree.data.pie.DefaultPieDataset result = new org.jfree.data.pie.DefaultPieDataset();
        int columnCount = dataset.getColumnCount();
        for (int current = 0; current < columnCount; current++) {
            java.lang.Comparable columnKey = dataset.getColumnKey(current);
            result.setValue(columnKey, dataset.getValue(row, current));
        }
        return result;
    }

    public static org.jfree.data.pie.PieDataset createPieDatasetForColumn(org.jfree.data.category.CategoryDataset dataset, java.lang.Comparable columnKey) {
        int column = dataset.getColumnIndex(columnKey);
        return org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn(dataset, column);
    }

    public static org.jfree.data.pie.PieDataset createPieDatasetForColumn(org.jfree.data.category.CategoryDataset dataset, int column) {
        org.jfree.data.pie.DefaultPieDataset result = new org.jfree.data.pie.DefaultPieDataset();
        int rowCount = dataset.getRowCount();
        for (int i = 0; i < rowCount; i++) {
            java.lang.Comparable rowKey = dataset.getRowKey(i);
            result.setValue(rowKey, dataset.getValue(i, column));
        }
        return result;
    }

    public static org.jfree.data.pie.PieDataset createConsolidatedPieDataset(org.jfree.data.pie.PieDataset source, java.lang.Comparable key, double minimumPercent) {
        return org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(source, key, minimumPercent, 2);
    }

    public static org.jfree.data.pie.PieDataset createConsolidatedPieDataset(org.jfree.data.pie.PieDataset source, java.lang.Comparable key, double minimumPercent, int minItems) {
        org.jfree.data.pie.DefaultPieDataset result = new org.jfree.data.pie.DefaultPieDataset();
        double total = org.jfree.data.general.DatasetUtilities.calculatePieDatasetTotal(source);
        java.util.List keys = source.getKeys();
        java.util.ArrayList otherKeys = new java.util.ArrayList();
        java.util.Iterator iterator = keys.iterator();
        while (iterator.hasNext()) {
            java.lang.Comparable currentKey = ((java.lang.Comparable) (iterator.next()));
            java.lang.Number dataValue = source.getValue(currentKey);
            if (dataValue != null) {
                double value = dataValue.doubleValue();
                if ((value / total) < minimumPercent) {
                    otherKeys.add(currentKey);
                }
            }
        } 
        iterator = keys.iterator();
        double otherValue = 0;
        while (iterator.hasNext()) {
            java.lang.Comparable currentKey = ((java.lang.Comparable) (iterator.next()));
            java.lang.Number dataValue = source.getValue(currentKey);
            if (dataValue != null) {
                if (otherKeys.contains(currentKey) && (otherKeys.size() >= minItems)) {
                    otherValue += dataValue.doubleValue();
                } else {
                    result.setValue(currentKey, dataValue);
                }
            }
        } 
        if (otherKeys.size() >= minItems) {
            result.setValue(key, otherValue);
        }
        return result;
    }

    public static org.jfree.data.category.CategoryDataset createCategoryDataset(java.lang.String rowKeyPrefix, java.lang.String columnKeyPrefix, double[][] data) {
        org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset();
        for (int r = 0; r < data.length; r++) {
            java.lang.String rowKey = rowKeyPrefix + (r + 1);
            for (int c = 0; c < data[r].length; c++) {
                java.lang.String columnKey = columnKeyPrefix + (c + 1);
                result.addValue(new java.lang.Double(data[r][c]), rowKey, columnKey);
            }
        }
        return result;
    }

    public static org.jfree.data.category.CategoryDataset createCategoryDataset(java.lang.String rowKeyPrefix, java.lang.String columnKeyPrefix, java.lang.Number[][] data) {
        org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset();
        for (int r = 0; r < data.length; r++) {
            java.lang.String rowKey = rowKeyPrefix + (r + 1);
            for (int c = 0; c < data[r].length; c++) {
                java.lang.String columnKey = columnKeyPrefix + (c + 1);
                result.addValue(data[r][c], rowKey, columnKey);
            }
        }
        return result;
    }

    public static org.jfree.data.category.CategoryDataset createCategoryDataset(java.lang.Comparable[] rowKeys, java.lang.Comparable[] columnKeys, double[][] data) {
        if (rowKeys == null) {
            throw new java.lang.IllegalArgumentException("Null 'rowKeys' argument.");
        }
        if (columnKeys == null) {
            throw new java.lang.IllegalArgumentException("Null 'columnKeys' argument.");
        }
        if (org.jfree.chart.util.ArrayUtilities.hasDuplicateItems(rowKeys)) {
            throw new java.lang.IllegalArgumentException("Duplicate items in 'rowKeys'.");
        }
        if (org.jfree.chart.util.ArrayUtilities.hasDuplicateItems(columnKeys)) {
            throw new java.lang.IllegalArgumentException("Duplicate items in 'columnKeys'.");
        }
        if (rowKeys.length != data.length) {
            throw new java.lang.IllegalArgumentException("The number of row keys does not match the number of rows in " + "the data array.");
        }
        int columnCount = 0;
        for (int r = 0; r < data.length; r++) {
            columnCount = java.lang.Math.max(columnCount, data[r].length);
        }
        if (columnKeys.length != columnCount) {
            throw new java.lang.IllegalArgumentException("The number of column keys does not match the number of " + "columns in the data array.");
        }
        org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset();
        for (int r = 0; r < data.length; r++) {
            java.lang.Comparable rowKey = rowKeys[r];
            for (int c = 0; c < data[r].length; c++) {
                java.lang.Comparable columnKey = columnKeys[c];
                result.addValue(new java.lang.Double(data[r][c]), rowKey, columnKey);
            }
        }
        return result;
    }

    public static org.jfree.data.category.CategoryDataset createCategoryDataset(java.lang.Comparable rowKey, org.jfree.data.KeyedValues rowData) {
        if (rowKey == null) {
            throw new java.lang.IllegalArgumentException("Null 'rowKey' argument.");
        }
        if (rowData == null) {
            throw new java.lang.IllegalArgumentException("Null 'rowData' argument.");
        }
        org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset();
        for (int i = 0; i < rowData.getItemCount(); i++) {
            result.addValue(rowData.getValue(i), rowKey, rowData.getKey(i));
        }
        return result;
    }

    public static org.jfree.data.xy.XYDataset sampleFunction2D(org.jfree.data.function.Function2D f, double start, double end, int samples, java.lang.Comparable seriesKey) {
        org.jfree.data.xy.XYSeries series = org.jfree.data.general.DatasetUtilities.sampleFunction2DToSeries(f, start, end, samples, seriesKey);
        org.jfree.data.xy.XYSeriesCollection collection = new org.jfree.data.xy.XYSeriesCollection(series);
        return collection;
    }

    public static org.jfree.data.xy.XYSeries sampleFunction2DToSeries(org.jfree.data.function.Function2D f, double start, double end, int samples, java.lang.Comparable seriesKey) {
        if (f == null) {
            throw new java.lang.IllegalArgumentException("Null 'f' argument.");
        }
        if (seriesKey == null) {
            throw new java.lang.IllegalArgumentException("Null 'seriesKey' argument.");
        }
        if (start >= end) {
            throw new java.lang.IllegalArgumentException("Requires 'start' < 'end'.");
        }
        if (samples < 2) {
            throw new java.lang.IllegalArgumentException("Requires 'samples' > 1");
        }
        org.jfree.data.xy.XYSeries series = new org.jfree.data.xy.XYSeries(seriesKey);
        double step = (end - start) / (samples - 1);
        for (int i = 0; i < samples; i++) {
            double x = start + (step * i);
            series.add(x, f.getValue(x));
        }
        return series;
    }

    public static boolean isEmptyOrNull(org.jfree.data.pie.PieDataset dataset) {
        if (dataset == null) {
            return true;
        }
        int itemCount = dataset.getItemCount();
        if (itemCount == 0) {
            return true;
        }
        for (int item = 0; item < itemCount; item++) {
            java.lang.Number y = dataset.getValue(item);
            if (y != null) {
                double yy = y.doubleValue();
                if (yy > 0.0) {
                    return false;
                }
            }
        }
        return true;
    }

    public static boolean isEmptyOrNull(org.jfree.data.category.CategoryDataset dataset) {
        if (dataset == null) {
            return true;
        }
        int rowCount = dataset.getRowCount();
        int columnCount = dataset.getColumnCount();
        if ((rowCount == 0) || (columnCount == 0)) {
            return true;
        }
        for (int r = 0; r < rowCount; r++) {
            for (int c = 0; c < columnCount; c++) {
                if (dataset.getValue(r, c) != null) {
                    return false;
                }
            }
        }
        return true;
    }

    public static boolean isEmptyOrNull(org.jfree.data.xy.XYDataset dataset) {
        if (dataset != null) {
            for (int s = 0; s < dataset.getSeriesCount(); s++) {
                if (dataset.getItemCount(s) > 0) {
                    return false;
                }
            }
        }
        return true;
    }

    public static org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset dataset) {
        return org.jfree.data.general.DatasetUtilities.findDomainBounds(dataset, true);
    }

    public static org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset dataset, boolean includeInterval) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        org.jfree.data.Range result = null;
        if (dataset instanceof org.jfree.data.DomainInfo) {
            org.jfree.data.DomainInfo info = ((org.jfree.data.DomainInfo) (dataset));
            result = info.getDomainBounds(includeInterval);
        } else {
            result = org.jfree.data.general.DatasetUtilities.iterateDomainBounds(dataset, includeInterval);
        }
        return result;
    }

    public static org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset dataset, java.util.List visibleSeriesKeys, boolean includeInterval) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        org.jfree.data.Range result = null;
        if (dataset instanceof org.jfree.data.xy.XYDomainInfo) {
            org.jfree.data.xy.XYDomainInfo info = ((org.jfree.data.xy.XYDomainInfo) (dataset));
            result = info.getDomainBounds(visibleSeriesKeys, includeInterval);
        } else {
            result = org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds(dataset, visibleSeriesKeys, includeInterval);
        }
        return result;
    }

    public static org.jfree.data.Range iterateDomainBounds(org.jfree.data.xy.XYDataset dataset) {
        return org.jfree.data.general.DatasetUtilities.iterateDomainBounds(dataset, true);
    }

    public static org.jfree.data.Range iterateDomainBounds(org.jfree.data.xy.XYDataset dataset, boolean includeInterval) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        double minimum = java.lang.Double.POSITIVE_INFINITY;
        double maximum = java.lang.Double.NEGATIVE_INFINITY;
        int seriesCount = dataset.getSeriesCount();
        double lvalue;
        double uvalue;
        if (includeInterval && (dataset instanceof org.jfree.data.xy.IntervalXYDataset)) {
            org.jfree.data.xy.IntervalXYDataset intervalXYData = ((org.jfree.data.xy.IntervalXYDataset) (dataset));
            for (int series = 0; series < seriesCount; series++) {
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {
                    boolean spoonDefaultValue = false;
                    try {
                        spoonDefaultValue = true;
                    } catch (java.lang.Exception __NopolProcessorException) {
                    }
                    boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                    if (fr.inria.lille.commons.trace.RuntimeValues.instance(0).isEnabled()) {
                        fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectionStarts();
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("intervalXYData",intervalXYData);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("includeInterval",includeInterval);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("maximum",maximum);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("seriesCount",seriesCount);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("minimum",minimum);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("dataset",dataset);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("itemCount",itemCount);} catch (Exception ex1) {ex1.printStackTrace();};
                        fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectOutput(runtimeAngelicValue);
                        fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectionEnds();
                    }
                    if (runtimeAngelicValue)
                        lvalue = intervalXYData.getStartXValue(series, item);

                    uvalue = intervalXYData.getEndXValue(series, item);
                    if (!java.lang.Double.isNaN(lvalue)) {
                        minimum = java.lang.Math.min(minimum, lvalue);
                    }
                    if (!java.lang.Double.isNaN(uvalue)) {
                        maximum = java.lang.Math.max(maximum, uvalue);
                    }
                }
            }
        } else {
            for (int series = 0; series < seriesCount; series++) {
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {
                    lvalue = dataset.getXValue(series, item);
                    uvalue = lvalue;
                    if (!java.lang.Double.isNaN(lvalue)) {
                        minimum = java.lang.Math.min(minimum, lvalue);
                        maximum = java.lang.Math.max(maximum, uvalue);
                    }
                }
            }
        }
        if (minimum > maximum) {
            return null;
        } else {
            return new org.jfree.data.Range(minimum, maximum);
        }
    }

    public static org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset dataset) {
        return org.jfree.data.general.DatasetUtilities.findRangeBounds(dataset, true);
    }

    public static org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset dataset, boolean includeInterval) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        org.jfree.data.Range result = null;
        if (dataset instanceof org.jfree.data.RangeInfo) {
            org.jfree.data.RangeInfo info = ((org.jfree.data.RangeInfo) (dataset));
            result = info.getRangeBounds(includeInterval);
        } else {
            result = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(dataset, includeInterval);
        }
        return result;
    }

    public static org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset dataset, java.util.List visibleSeriesKeys, boolean includeInterval) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        org.jfree.data.Range result = null;
        if (dataset instanceof org.jfree.data.category.CategoryRangeInfo) {
            org.jfree.data.category.CategoryRangeInfo info = ((org.jfree.data.category.CategoryRangeInfo) (dataset));
            result = info.getRangeBounds(visibleSeriesKeys, includeInterval);
        } else {
            result = org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds(dataset, visibleSeriesKeys, includeInterval);
        }
        return result;
    }

    public static org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset dataset) {
        return org.jfree.data.general.DatasetUtilities.findRangeBounds(dataset, true);
    }

    public static org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset dataset, boolean includeInterval) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        org.jfree.data.Range result = null;
        if (dataset instanceof org.jfree.data.RangeInfo) {
            org.jfree.data.RangeInfo info = ((org.jfree.data.RangeInfo) (dataset));
            result = info.getRangeBounds(includeInterval);
        } else {
            result = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(dataset, includeInterval);
        }
        return result;
    }

    public static org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset dataset, java.util.List visibleSeriesKeys, org.jfree.data.Range xRange, boolean includeInterval) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        org.jfree.data.Range result = null;
        if (dataset instanceof org.jfree.data.xy.XYRangeInfo) {
            org.jfree.data.xy.XYRangeInfo info = ((org.jfree.data.xy.XYRangeInfo) (dataset));
            result = info.getRangeBounds(visibleSeriesKeys, xRange, includeInterval);
        } else {
            result = org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds(dataset, visibleSeriesKeys, xRange, includeInterval);
        }
        return result;
    }

    public static org.jfree.data.Range iterateCategoryRangeBounds(org.jfree.data.category.CategoryDataset dataset, boolean includeInterval) {
        return org.jfree.data.general.DatasetUtilities.iterateRangeBounds(dataset, includeInterval);
    }

    public static org.jfree.data.Range iterateRangeBounds(org.jfree.data.category.CategoryDataset dataset) {
        return org.jfree.data.general.DatasetUtilities.iterateRangeBounds(dataset, true);
    }

    public static org.jfree.data.Range iterateRangeBounds(org.jfree.data.category.CategoryDataset dataset, boolean includeInterval) {
        double minimum = java.lang.Double.POSITIVE_INFINITY;
        double maximum = java.lang.Double.NEGATIVE_INFINITY;
        int rowCount = dataset.getRowCount();
        int columnCount = dataset.getColumnCount();
        if (includeInterval && (dataset instanceof org.jfree.data.category.IntervalCategoryDataset)) {
            org.jfree.data.category.IntervalCategoryDataset icd = ((org.jfree.data.category.IntervalCategoryDataset) (dataset));
            java.lang.Number value;
            java.lang.Number lvalue;
            java.lang.Number uvalue;
            for (int row = 0; row < rowCount; row++) {
                for (int column = 0; column < columnCount; column++) {
                    value = icd.getValue(row, column);
                    double v;
                    if ((value != null) && (!java.lang.Double.isNaN(v = value.doubleValue()))) {
                        minimum = java.lang.Math.min(v, minimum);
                        maximum = java.lang.Math.max(v, maximum);
                    }
                    lvalue = icd.getStartValue(row, column);
                    if ((lvalue != null) && (!java.lang.Double.isNaN(v = lvalue.doubleValue()))) {
                        minimum = java.lang.Math.min(v, minimum);
                        maximum = java.lang.Math.max(v, maximum);
                    }
                    uvalue = icd.getEndValue(row, column);
                    if ((uvalue != null) && (!java.lang.Double.isNaN(v = uvalue.doubleValue()))) {
                        minimum = java.lang.Math.min(v, minimum);
                        maximum = java.lang.Math.max(v, maximum);
                    }
                }
            }
        } else {
            for (int row = 0; row < rowCount; row++) {
                for (int column = 0; column < columnCount; column++) {
                    java.lang.Number value = dataset.getValue(row, column);
                    if (value != null) {
                        double v = value.doubleValue();
                        if (!java.lang.Double.isNaN(v)) {
                            minimum = java.lang.Math.min(minimum, v);
                            maximum = java.lang.Math.max(maximum, v);
                        }
                    }
                }
            }
        }
        if (minimum == java.lang.Double.POSITIVE_INFINITY) {
            return null;
        } else {
            return new org.jfree.data.Range(minimum, maximum);
        }
    }

    public static org.jfree.data.Range iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset dataset, java.util.List visibleSeriesKeys, boolean includeInterval) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        if (visibleSeriesKeys == null) {
            throw new java.lang.IllegalArgumentException("Null 'visibleSeriesKeys' argument.");
        }
        double minimum = java.lang.Double.POSITIVE_INFINITY;
        double maximum = java.lang.Double.NEGATIVE_INFINITY;
        int columnCount = dataset.getColumnCount();
        if (includeInterval && (dataset instanceof org.jfree.data.statistics.BoxAndWhiskerCategoryDataset)) {
            org.jfree.data.statistics.BoxAndWhiskerCategoryDataset bx = ((org.jfree.data.statistics.BoxAndWhiskerCategoryDataset) (dataset));
            java.util.Iterator iterator = visibleSeriesKeys.iterator();
            while (iterator.hasNext()) {
                java.lang.Comparable seriesKey = ((java.lang.Comparable) (iterator.next()));
                int series = dataset.getRowIndex(seriesKey);
                int itemCount = dataset.getColumnCount();
                for (int item = 0; item < itemCount; item++) {
                    java.lang.Number lvalue = bx.getMinRegularValue(series, item);
                    if (lvalue == null) {
                        lvalue = bx.getValue(series, item);
                    }
                    java.lang.Number uvalue = bx.getMaxRegularValue(series, item);
                    if (uvalue == null) {
                        uvalue = bx.getValue(series, item);
                    }
                    if (lvalue != null) {
                        minimum = java.lang.Math.min(minimum, lvalue.doubleValue());
                    }
                    if (uvalue != null) {
                        maximum = java.lang.Math.max(maximum, uvalue.doubleValue());
                    }
                }
            } 
        } else
            if (includeInterval && (dataset instanceof org.jfree.data.category.IntervalCategoryDataset)) {
                org.jfree.data.category.IntervalCategoryDataset icd = ((org.jfree.data.category.IntervalCategoryDataset) (dataset));
                java.lang.Number lvalue;
                java.lang.Number uvalue;
                java.util.Iterator iterator = visibleSeriesKeys.iterator();
                while (iterator.hasNext()) {
                    java.lang.Comparable seriesKey = ((java.lang.Comparable) (iterator.next()));
                    int series = dataset.getRowIndex(seriesKey);
                    for (int column = 0; column < columnCount; column++) {
                        lvalue = icd.getStartValue(series, column);
                        uvalue = icd.getEndValue(series, column);
                        if ((lvalue != null) && (!java.lang.Double.isNaN(lvalue.doubleValue()))) {
                            minimum = java.lang.Math.min(minimum, lvalue.doubleValue());
                        }
                        if ((uvalue != null) && (!java.lang.Double.isNaN(uvalue.doubleValue()))) {
                            maximum = java.lang.Math.max(maximum, uvalue.doubleValue());
                        }
                    }
                } 
            } else
                if (includeInterval && (dataset instanceof org.jfree.data.statistics.MultiValueCategoryDataset)) {
                    org.jfree.data.statistics.MultiValueCategoryDataset mvcd = ((org.jfree.data.statistics.MultiValueCategoryDataset) (dataset));
                    java.util.Iterator iterator = visibleSeriesKeys.iterator();
                    while (iterator.hasNext()) {
                        java.lang.Comparable seriesKey = ((java.lang.Comparable) (iterator.next()));
                        int series = dataset.getRowIndex(seriesKey);
                        for (int column = 0; column < columnCount; column++) {
                            java.util.List values = mvcd.getValues(series, column);
                            java.util.Iterator valueIterator = values.iterator();
                            while (valueIterator.hasNext()) {
                                java.lang.Object o = valueIterator.next();
                                if (o instanceof java.lang.Number) {
                                    double v = ((java.lang.Number) (o)).doubleValue();
                                    if (!java.lang.Double.isNaN(v)) {
                                        minimum = java.lang.Math.min(minimum, v);
                                        maximum = java.lang.Math.max(maximum, v);
                                    }
                                }
                            } 
                        }
                    } 
                } else
                    if (includeInterval && (dataset instanceof org.jfree.data.statistics.StatisticalCategoryDataset)) {
                        org.jfree.data.statistics.StatisticalCategoryDataset scd = ((org.jfree.data.statistics.StatisticalCategoryDataset) (dataset));
                        java.util.Iterator iterator = visibleSeriesKeys.iterator();
                        while (iterator.hasNext()) {
                            java.lang.Comparable seriesKey = ((java.lang.Comparable) (iterator.next()));
                            int series = dataset.getRowIndex(seriesKey);
                            for (int column = 0; column < columnCount; column++) {
                                java.lang.Number meanN = scd.getMeanValue(series, column);
                                if (meanN != null) {
                                    double std = 0.0;
                                    java.lang.Number stdN = scd.getStdDevValue(series, column);
                                    if (stdN != null) {
                                        std = stdN.doubleValue();
                                        if (java.lang.Double.isNaN(std)) {
                                            std = 0.0;
                                        }
                                    }
                                    double mean = meanN.doubleValue();
                                    if (!java.lang.Double.isNaN(mean)) {
                                        minimum = java.lang.Math.min(minimum, mean - std);
                                        maximum = java.lang.Math.max(maximum, mean + std);
                                    }
                                }
                            }
                        } 
                    } else {
                        java.util.Iterator iterator = visibleSeriesKeys.iterator();
                        while (iterator.hasNext()) {
                            java.lang.Comparable seriesKey = ((java.lang.Comparable) (iterator.next()));
                            int series = dataset.getRowIndex(seriesKey);
                            for (int column = 0; column < columnCount; column++) {
                                java.lang.Number value = dataset.getValue(series, column);
                                if (value != null) {
                                    double v = value.doubleValue();
                                    if (!java.lang.Double.isNaN(v)) {
                                        minimum = java.lang.Math.min(minimum, v);
                                        maximum = java.lang.Math.max(maximum, v);
                                    }
                                }
                            }
                        } 
                    }



        if (minimum == java.lang.Double.POSITIVE_INFINITY) {
            return null;
        } else {
            return new org.jfree.data.Range(minimum, maximum);
        }
    }

    public static org.jfree.data.Range iterateXYRangeBounds(org.jfree.data.xy.XYDataset dataset) {
        return org.jfree.data.general.DatasetUtilities.iterateRangeBounds(dataset);
    }

    public static org.jfree.data.Range iterateRangeBounds(org.jfree.data.xy.XYDataset dataset) {
        return org.jfree.data.general.DatasetUtilities.iterateRangeBounds(dataset, true);
    }

    public static org.jfree.data.Range iterateRangeBounds(org.jfree.data.xy.XYDataset dataset, boolean includeInterval) {
        double minimum = java.lang.Double.POSITIVE_INFINITY;
        double maximum = java.lang.Double.NEGATIVE_INFINITY;
        int seriesCount = dataset.getSeriesCount();
        if (includeInterval && (dataset instanceof org.jfree.data.xy.IntervalXYDataset)) {
            org.jfree.data.xy.IntervalXYDataset ixyd = ((org.jfree.data.xy.IntervalXYDataset) (dataset));
            for (int series = 0; series < seriesCount; series++) {
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {
                    double lvalue = ixyd.getStartYValue(series, item);
                    double uvalue = ixyd.getEndYValue(series, item);
                    if (!java.lang.Double.isNaN(lvalue)) {
                        minimum = java.lang.Math.min(minimum, lvalue);
                    }
                    if (!java.lang.Double.isNaN(uvalue)) {
                        maximum = java.lang.Math.max(maximum, uvalue);
                    }
                }
            }
        } else
            if (includeInterval && (dataset instanceof org.jfree.data.xy.OHLCDataset)) {
                org.jfree.data.xy.OHLCDataset ohlc = ((org.jfree.data.xy.OHLCDataset) (dataset));
                for (int series = 0; series < seriesCount; series++) {
                    int itemCount = dataset.getItemCount(series);
                    for (int item = 0; item < itemCount; item++) {
                        double lvalue = ohlc.getLowValue(series, item);
                        double uvalue = ohlc.getHighValue(series, item);
                        if (!java.lang.Double.isNaN(lvalue)) {
                            minimum = java.lang.Math.min(minimum, lvalue);
                        }
                        if (!java.lang.Double.isNaN(uvalue)) {
                            maximum = java.lang.Math.max(maximum, uvalue);
                        }
                    }
                }
            } else {
                for (int series = 0; series < seriesCount; series++) {
                    int itemCount = dataset.getItemCount(series);
                    for (int item = 0; item < itemCount; item++) {
                        double value = dataset.getYValue(series, item);
                        if (!java.lang.Double.isNaN(value)) {
                            minimum = java.lang.Math.min(minimum, value);
                            maximum = java.lang.Math.max(maximum, value);
                        }
                    }
                }
            }

        if (minimum == java.lang.Double.POSITIVE_INFINITY) {
            return null;
        } else {
            return new org.jfree.data.Range(minimum, maximum);
        }
    }

    public static org.jfree.data.Range iterateToFindDomainBounds(org.jfree.data.xy.XYDataset dataset, java.util.List visibleSeriesKeys, boolean includeInterval) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        if (visibleSeriesKeys == null) {
            throw new java.lang.IllegalArgumentException("Null 'visibleSeriesKeys' argument.");
        }
        double minimum = java.lang.Double.POSITIVE_INFINITY;
        double maximum = java.lang.Double.NEGATIVE_INFINITY;
        if (includeInterval && (dataset instanceof org.jfree.data.xy.IntervalXYDataset)) {
            org.jfree.data.xy.IntervalXYDataset ixyd = ((org.jfree.data.xy.IntervalXYDataset) (dataset));
            java.util.Iterator iterator = visibleSeriesKeys.iterator();
            while (iterator.hasNext()) {
                java.lang.Comparable seriesKey = ((java.lang.Comparable) (iterator.next()));
                int series = dataset.indexOf(seriesKey);
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {
                    double lvalue = ixyd.getStartXValue(series, item);
                    double uvalue = ixyd.getEndXValue(series, item);
                    if (!java.lang.Double.isNaN(lvalue)) {
                        minimum = java.lang.Math.min(minimum, lvalue);
                    }
                    if (!java.lang.Double.isNaN(uvalue)) {
                        maximum = java.lang.Math.max(maximum, uvalue);
                    }
                }
            } 
        } else {
            java.util.Iterator iterator = visibleSeriesKeys.iterator();
            while (iterator.hasNext()) {
                java.lang.Comparable seriesKey = ((java.lang.Comparable) (iterator.next()));
                int series = dataset.indexOf(seriesKey);
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {
                    double x = dataset.getXValue(series, item);
                    if (!java.lang.Double.isNaN(x)) {
                        minimum = java.lang.Math.min(minimum, x);
                        maximum = java.lang.Math.max(maximum, x);
                    }
                }
            } 
        }
        if (minimum == java.lang.Double.POSITIVE_INFINITY) {
            return null;
        } else {
            return new org.jfree.data.Range(minimum, maximum);
        }
    }

    public static org.jfree.data.Range iterateToFindRangeBounds(org.jfree.data.xy.XYDataset dataset, java.util.List visibleSeriesKeys, org.jfree.data.Range xRange, boolean includeInterval) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        if (visibleSeriesKeys == null) {
            throw new java.lang.IllegalArgumentException("Null 'visibleSeriesKeys' argument.");
        }
        if (xRange == null) {
            throw new java.lang.IllegalArgumentException("Null 'xRange' argument");
        }
        double minimum = java.lang.Double.POSITIVE_INFINITY;
        double maximum = java.lang.Double.NEGATIVE_INFINITY;
        if (includeInterval && (dataset instanceof org.jfree.data.xy.OHLCDataset)) {
            org.jfree.data.xy.OHLCDataset ohlc = ((org.jfree.data.xy.OHLCDataset) (dataset));
            java.util.Iterator iterator = visibleSeriesKeys.iterator();
            while (iterator.hasNext()) {
                java.lang.Comparable seriesKey = ((java.lang.Comparable) (iterator.next()));
                int series = dataset.indexOf(seriesKey);
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {
                    double x = ohlc.getXValue(series, item);
                    if (xRange.contains(x)) {
                        double lvalue = ohlc.getLowValue(series, item);
                        double uvalue = ohlc.getHighValue(series, item);
                        if (!java.lang.Double.isNaN(lvalue)) {
                            minimum = java.lang.Math.min(minimum, lvalue);
                        }
                        if (!java.lang.Double.isNaN(uvalue)) {
                            maximum = java.lang.Math.max(maximum, uvalue);
                        }
                    }
                }
            } 
        } else
            if (includeInterval && (dataset instanceof org.jfree.data.statistics.BoxAndWhiskerXYDataset)) {
                org.jfree.data.statistics.BoxAndWhiskerXYDataset bx = ((org.jfree.data.statistics.BoxAndWhiskerXYDataset) (dataset));
                java.util.Iterator iterator = visibleSeriesKeys.iterator();
                while (iterator.hasNext()) {
                    java.lang.Comparable seriesKey = ((java.lang.Comparable) (iterator.next()));
                    int series = dataset.indexOf(seriesKey);
                    int itemCount = dataset.getItemCount(series);
                    for (int item = 0; item < itemCount; item++) {
                        double x = bx.getXValue(series, item);
                        if (xRange.contains(x)) {
                            java.lang.Number lvalue = bx.getMinRegularValue(series, item);
                            java.lang.Number uvalue = bx.getMaxRegularValue(series, item);
                            if (lvalue != null) {
                                minimum = java.lang.Math.min(minimum, lvalue.doubleValue());
                            }
                            if (uvalue != null) {
                                maximum = java.lang.Math.max(maximum, uvalue.doubleValue());
                            }
                        }
                    }
                } 
            } else
                if (includeInterval && (dataset instanceof org.jfree.data.xy.IntervalXYDataset)) {
                    org.jfree.data.xy.IntervalXYDataset ixyd = ((org.jfree.data.xy.IntervalXYDataset) (dataset));
                    java.util.Iterator iterator = visibleSeriesKeys.iterator();
                    while (iterator.hasNext()) {
                        java.lang.Comparable seriesKey = ((java.lang.Comparable) (iterator.next()));
                        int series = dataset.indexOf(seriesKey);
                        int itemCount = dataset.getItemCount(series);
                        for (int item = 0; item < itemCount; item++) {
                            double x = ixyd.getXValue(series, item);
                            if (xRange.contains(x)) {
                                double lvalue = ixyd.getStartYValue(series, item);
                                double uvalue = ixyd.getEndYValue(series, item);
                                if (!java.lang.Double.isNaN(lvalue)) {
                                    minimum = java.lang.Math.min(minimum, lvalue);
                                }
                                if (!java.lang.Double.isNaN(uvalue)) {
                                    maximum = java.lang.Math.max(maximum, uvalue);
                                }
                            }
                        }
                    } 
                } else {
                    java.util.Iterator iterator = visibleSeriesKeys.iterator();
                    while (iterator.hasNext()) {
                        java.lang.Comparable seriesKey = ((java.lang.Comparable) (iterator.next()));
                        int series = dataset.indexOf(seriesKey);
                        int itemCount = dataset.getItemCount(series);
                        for (int item = 0; item < itemCount; item++) {
                            double x = dataset.getXValue(series, item);
                            double y = dataset.getYValue(series, item);
                            if (xRange.contains(x)) {
                                if (!java.lang.Double.isNaN(y)) {
                                    minimum = java.lang.Math.min(minimum, y);
                                    maximum = java.lang.Math.max(maximum, y);
                                }
                            }
                        }
                    } 
                }


        if (minimum == java.lang.Double.POSITIVE_INFINITY) {
            return null;
        } else {
            return new org.jfree.data.Range(minimum, maximum);
        }
    }

    public static java.lang.Number findMinimumDomainValue(org.jfree.data.xy.XYDataset dataset) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        java.lang.Number result = null;
        if (dataset instanceof org.jfree.data.DomainInfo) {
            org.jfree.data.DomainInfo info = ((org.jfree.data.DomainInfo) (dataset));
            return new java.lang.Double(info.getDomainLowerBound(true));
        } else {
            double minimum = java.lang.Double.POSITIVE_INFINITY;
            int seriesCount = dataset.getSeriesCount();
            for (int series = 0; series < seriesCount; series++) {
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {
                    double value;
                    if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {
                        org.jfree.data.xy.IntervalXYDataset intervalXYData = ((org.jfree.data.xy.IntervalXYDataset) (dataset));
                        value = intervalXYData.getStartXValue(series, item);
                    } else {
                        value = dataset.getXValue(series, item);
                    }
                    if (!java.lang.Double.isNaN(value)) {
                        minimum = java.lang.Math.min(minimum, value);
                    }
                }
            }
            if (minimum == java.lang.Double.POSITIVE_INFINITY) {
                result = null;
            } else {
                result = new java.lang.Double(minimum);
            }
        }
        return result;
    }

    public static java.lang.Number findMaximumDomainValue(org.jfree.data.xy.XYDataset dataset) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        java.lang.Number result = null;
        if (dataset instanceof org.jfree.data.DomainInfo) {
            org.jfree.data.DomainInfo info = ((org.jfree.data.DomainInfo) (dataset));
            return new java.lang.Double(info.getDomainUpperBound(true));
        } else {
            double maximum = java.lang.Double.NEGATIVE_INFINITY;
            int seriesCount = dataset.getSeriesCount();
            for (int series = 0; series < seriesCount; series++) {
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {
                    double value;
                    if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {
                        org.jfree.data.xy.IntervalXYDataset intervalXYData = ((org.jfree.data.xy.IntervalXYDataset) (dataset));
                        value = intervalXYData.getEndXValue(series, item);
                    } else {
                        value = dataset.getXValue(series, item);
                    }
                    if (!java.lang.Double.isNaN(value)) {
                        maximum = java.lang.Math.max(maximum, value);
                    }
                }
            }
            if (maximum == java.lang.Double.NEGATIVE_INFINITY) {
                result = null;
            } else {
                result = new java.lang.Double(maximum);
            }
        }
        return result;
    }

    public static java.lang.Number findMinimumRangeValue(org.jfree.data.category.CategoryDataset dataset) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        if (dataset instanceof org.jfree.data.RangeInfo) {
            org.jfree.data.RangeInfo info = ((org.jfree.data.RangeInfo) (dataset));
            return new java.lang.Double(info.getRangeLowerBound(true));
        } else {
            double minimum = java.lang.Double.POSITIVE_INFINITY;
            int seriesCount = dataset.getRowCount();
            int itemCount = dataset.getColumnCount();
            for (int series = 0; series < seriesCount; series++) {
                for (int item = 0; item < itemCount; item++) {
                    java.lang.Number value;
                    if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {
                        org.jfree.data.category.IntervalCategoryDataset icd = ((org.jfree.data.category.IntervalCategoryDataset) (dataset));
                        value = icd.getStartValue(series, item);
                    } else {
                        value = dataset.getValue(series, item);
                    }
                    if (value != null) {
                        minimum = java.lang.Math.min(minimum, value.doubleValue());
                    }
                }
            }
            if (minimum == java.lang.Double.POSITIVE_INFINITY) {
                return null;
            } else {
                return new java.lang.Double(minimum);
            }
        }
    }

    public static java.lang.Number findMinimumRangeValue(org.jfree.data.xy.XYDataset dataset) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        if (dataset instanceof org.jfree.data.RangeInfo) {
            org.jfree.data.RangeInfo info = ((org.jfree.data.RangeInfo) (dataset));
            return new java.lang.Double(info.getRangeLowerBound(true));
        } else {
            double minimum = java.lang.Double.POSITIVE_INFINITY;
            int seriesCount = dataset.getSeriesCount();
            for (int series = 0; series < seriesCount; series++) {
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {
                    double value;
                    if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {
                        org.jfree.data.xy.IntervalXYDataset intervalXYData = ((org.jfree.data.xy.IntervalXYDataset) (dataset));
                        value = intervalXYData.getStartYValue(series, item);
                    } else
                        if (dataset instanceof org.jfree.data.xy.OHLCDataset) {
                            org.jfree.data.xy.OHLCDataset highLowData = ((org.jfree.data.xy.OHLCDataset) (dataset));
                            value = highLowData.getLowValue(series, item);
                        } else {
                            value = dataset.getYValue(series, item);
                        }

                    if (!java.lang.Double.isNaN(value)) {
                        minimum = java.lang.Math.min(minimum, value);
                    }
                }
            }
            if (minimum == java.lang.Double.POSITIVE_INFINITY) {
                return null;
            } else {
                return new java.lang.Double(minimum);
            }
        }
    }

    public static java.lang.Number findMaximumRangeValue(org.jfree.data.category.CategoryDataset dataset) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        if (dataset instanceof org.jfree.data.RangeInfo) {
            org.jfree.data.RangeInfo info = ((org.jfree.data.RangeInfo) (dataset));
            return new java.lang.Double(info.getRangeUpperBound(true));
        } else {
            double maximum = java.lang.Double.NEGATIVE_INFINITY;
            int seriesCount = dataset.getRowCount();
            int itemCount = dataset.getColumnCount();
            for (int series = 0; series < seriesCount; series++) {
                for (int item = 0; item < itemCount; item++) {
                    java.lang.Number value;
                    if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {
                        org.jfree.data.category.IntervalCategoryDataset icd = ((org.jfree.data.category.IntervalCategoryDataset) (dataset));
                        value = icd.getEndValue(series, item);
                    } else {
                        value = dataset.getValue(series, item);
                    }
                    if (value != null) {
                        maximum = java.lang.Math.max(maximum, value.doubleValue());
                    }
                }
            }
            if (maximum == java.lang.Double.NEGATIVE_INFINITY) {
                return null;
            } else {
                return new java.lang.Double(maximum);
            }
        }
    }

    public static java.lang.Number findMaximumRangeValue(org.jfree.data.xy.XYDataset dataset) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        if (dataset instanceof org.jfree.data.RangeInfo) {
            org.jfree.data.RangeInfo info = ((org.jfree.data.RangeInfo) (dataset));
            return new java.lang.Double(info.getRangeUpperBound(true));
        } else {
            double maximum = java.lang.Double.NEGATIVE_INFINITY;
            int seriesCount = dataset.getSeriesCount();
            for (int series = 0; series < seriesCount; series++) {
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {
                    double value;
                    if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {
                        org.jfree.data.xy.IntervalXYDataset intervalXYData = ((org.jfree.data.xy.IntervalXYDataset) (dataset));
                        value = intervalXYData.getEndYValue(series, item);
                    } else
                        if (dataset instanceof org.jfree.data.xy.OHLCDataset) {
                            org.jfree.data.xy.OHLCDataset highLowData = ((org.jfree.data.xy.OHLCDataset) (dataset));
                            value = highLowData.getHighValue(series, item);
                        } else {
                            value = dataset.getYValue(series, item);
                        }

                    if (!java.lang.Double.isNaN(value)) {
                        maximum = java.lang.Math.max(maximum, value);
                    }
                }
            }
            if (maximum == java.lang.Double.NEGATIVE_INFINITY) {
                return null;
            } else {
                return new java.lang.Double(maximum);
            }
        }
    }

    public static org.jfree.data.Range findStackedRangeBounds(org.jfree.data.category.CategoryDataset dataset) {
        return org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(dataset, 0.0);
    }

    public static org.jfree.data.Range findStackedRangeBounds(org.jfree.data.category.CategoryDataset dataset, double base) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        org.jfree.data.Range result = null;
        double minimum = java.lang.Double.POSITIVE_INFINITY;
        double maximum = java.lang.Double.NEGATIVE_INFINITY;
        int categoryCount = dataset.getColumnCount();
        for (int item = 0; item < categoryCount; item++) {
            double positive = base;
            double negative = base;
            int seriesCount = dataset.getRowCount();
            for (int series = 0; series < seriesCount; series++) {
                java.lang.Number number = dataset.getValue(series, item);
                if (number != null) {
                    double value = number.doubleValue();
                    if (value > 0.0) {
                        positive = positive + value;
                    }
                    if (value < 0.0) {
                        negative = negative + value;
                    }
                }
            }
            minimum = java.lang.Math.min(minimum, negative);
            maximum = java.lang.Math.max(maximum, positive);
        }
        if (minimum <= maximum) {
            result = new org.jfree.data.Range(minimum, maximum);
        }
        return result;
    }

    public static org.jfree.data.Range findStackedRangeBounds(org.jfree.data.category.CategoryDataset dataset, org.jfree.data.KeyToGroupMap map) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        boolean hasValidData = false;
        org.jfree.data.Range result = null;
        int[] groupIndex = new int[dataset.getRowCount()];
        for (int i = 0; i < dataset.getRowCount(); i++) {
            groupIndex[i] = map.getGroupIndex(map.getGroup(dataset.getRowKey(i)));
        }
        int groupCount = map.getGroupCount();
        double[] minimum = new double[groupCount];
        double[] maximum = new double[groupCount];
        int categoryCount = dataset.getColumnCount();
        for (int item = 0; item < categoryCount; item++) {
            double[] positive = new double[groupCount];
            double[] negative = new double[groupCount];
            int seriesCount = dataset.getRowCount();
            for (int series = 0; series < seriesCount; series++) {
                java.lang.Number number = dataset.getValue(series, item);
                if (number != null) {
                    hasValidData = true;
                    double value = number.doubleValue();
                    if (value > 0.0) {
                        positive[groupIndex[series]] = positive[groupIndex[series]] + value;
                    }
                    if (value < 0.0) {
                        negative[groupIndex[series]] = negative[groupIndex[series]] + value;
                    }
                }
            }
            for (int g = 0; g < groupCount; g++) {
                minimum[g] = java.lang.Math.min(minimum[g], negative[g]);
                maximum[g] = java.lang.Math.max(maximum[g], positive[g]);
            }
        }
        if (hasValidData) {
            for (int j = 0; j < groupCount; j++) {
                result = org.jfree.data.Range.combine(result, new org.jfree.data.Range(minimum[j], maximum[j]));
            }
        }
        return result;
    }

    public static java.lang.Number findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset dataset) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        java.lang.Number result = null;
        boolean hasValidData = false;
        double minimum = 0.0;
        int categoryCount = dataset.getColumnCount();
        for (int item = 0; item < categoryCount; item++) {
            double total = 0.0;
            int seriesCount = dataset.getRowCount();
            for (int series = 0; series < seriesCount; series++) {
                java.lang.Number number = dataset.getValue(series, item);
                if (number != null) {
                    hasValidData = true;
                    double value = number.doubleValue();
                    if (value < 0.0) {
                        total = total + value;
                    }
                }
            }
            minimum = java.lang.Math.min(minimum, total);
        }
        if (hasValidData) {
            result = new java.lang.Double(minimum);
        }
        return result;
    }

    public static java.lang.Number findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset dataset) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        java.lang.Number result = null;
        boolean hasValidData = false;
        double maximum = 0.0;
        int categoryCount = dataset.getColumnCount();
        for (int item = 0; item < categoryCount; item++) {
            double total = 0.0;
            int seriesCount = dataset.getRowCount();
            for (int series = 0; series < seriesCount; series++) {
                java.lang.Number number = dataset.getValue(series, item);
                if (number != null) {
                    hasValidData = true;
                    double value = number.doubleValue();
                    if (value > 0.0) {
                        total = total + value;
                    }
                }
            }
            maximum = java.lang.Math.max(maximum, total);
        }
        if (hasValidData) {
            result = new java.lang.Double(maximum);
        }
        return result;
    }

    public static org.jfree.data.Range findStackedRangeBounds(org.jfree.data.xy.TableXYDataset dataset) {
        return org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(dataset, 0.0);
    }

    public static org.jfree.data.Range findStackedRangeBounds(org.jfree.data.xy.TableXYDataset dataset, double base) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        double minimum = base;
        double maximum = base;
        for (int itemNo = 0; itemNo < dataset.getItemCount(); itemNo++) {
            double positive = base;
            double negative = base;
            int seriesCount = dataset.getSeriesCount();
            for (int seriesNo = 0; seriesNo < seriesCount; seriesNo++) {
                double y = dataset.getYValue(seriesNo, itemNo);
                if (!java.lang.Double.isNaN(y)) {
                    if (y > 0.0) {
                        positive += y;
                    } else {
                        negative += y;
                    }
                }
            }
            if (positive > maximum) {
                maximum = positive;
            }
            if (negative < minimum) {
                minimum = negative;
            }
        }
        if (minimum <= maximum) {
            return new org.jfree.data.Range(minimum, maximum);
        } else {
            return null;
        }
    }

    public static double calculateStackTotal(org.jfree.data.xy.TableXYDataset dataset, int item) {
        double total = 0.0;
        int seriesCount = dataset.getSeriesCount();
        for (int s = 0; s < seriesCount; s++) {
            double value = dataset.getYValue(s, item);
            if (!java.lang.Double.isNaN(value)) {
                total = total + value;
            }
        }
        return total;
    }

    public static org.jfree.data.Range findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset dataset) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        boolean allItemsNull = true;
        double minimum = 0.0;
        double maximum = 0.0;
        for (int row = 0; row < dataset.getRowCount(); row++) {
            double runningTotal = 0.0;
            for (int column = 0; column <= (dataset.getColumnCount() - 1); column++) {
                java.lang.Number n = dataset.getValue(row, column);
                if (n != null) {
                    allItemsNull = false;
                    double value = n.doubleValue();
                    if (!java.lang.Double.isNaN(value)) {
                        runningTotal = runningTotal + value;
                        minimum = java.lang.Math.min(minimum, runningTotal);
                        maximum = java.lang.Math.max(maximum, runningTotal);
                    }
                }
            }
        }
        if (!allItemsNull) {
            return new org.jfree.data.Range(minimum, maximum);
        } else {
            return null;
        }
    }
}
04:26:48.481 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
After filtering ......
rootclassname is org.jfree.data.general.DatasetUtilities
line number is 1248
After filtering ......
rootclassname is org.jfree.data.general.DatasetUtilities
line number is 1245
After filtering ......
rootclassname is org.jfree.data.general.DatasetUtilities
line number is 761
After filtering ......
rootclassname is org.jfree.data.general.DatasetUtilities
line number is 758
04:26:48.510 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - ----INFORMATION----
04:26:49.507 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb classes : 656
04:26:49.507 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb methods : 7314
04:26:49.507 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb Statements Analyzed : 1
04:26:49.507 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb Statements with Angelic Value Found : 0
04:26:49.507 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb inputs in SMT : 0
04:26:49.508 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb SMT level: 0
04:26:49.509 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb variables in SMT : 0
04:26:49.517 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - NoPol Execution time : 115169ms
04:26:49.517 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - 
NO_ANGELIC_VALUE
Command exited with non-zero status 255
44.15user 1.96system 2:01.77elapsed 37%CPU (0avgtext+0avgdata 743696maxresident)k
115400inputs+7712outputs (346major+178193minor)pagefaults 0swaps


Node: ubuntu



Date: Sun Jul 28 04:26:50 EDT 2019

