{
  "repair_end": "2019-08-14 12:19:29.517314", 
  "repair_begin": "2019-08-14 11:59:31.345370", 
  "patches": [
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_117/src/com/google/javascript/jscomp/TypeValidator.java\t2019-08-13 23:58:05.775697913 -0400\n+++ /tmp/GenProg_Defects4J_Closure_117/patches_5zlj/Patch_35/patched/com/google/javascript/jscomp/TypeValidator.java\t2019-08-14 00:19:29.463834626 -0400\n@@ -725,34 +725,6 @@\n \n     // The best type name is the actual type name.\n \n-    // If we're analyzing a GETPROP, the property may be inherited by the\n-    // prototype chain. So climb the prototype chain and find out where\n-    // the property was originally defined.\n-    if (n.isGetProp()) {\n-      ObjectType objectType = getJSType(n.getFirstChild()).dereference();\n-      if (objectType != null) {\n-        String propName = n.getLastChild().getString();\n-        if (objectType.getConstructor() != null &&\n-            objectType.getConstructor().isInterface()) {\n-          objectType = FunctionType.getTopDefiningInterface(\n-              objectType, propName);\n-        } else {\n-          // classes\n-          while (objectType != null && !objectType.hasOwnProperty(propName)) {\n-            objectType = objectType.getImplicitPrototype();\n-          }\n-        }\n-\n-        // Don't show complex function names or anonymous types.\n-        // Instead, try to get a human-readable type name.\n-        if (objectType != null &&\n-            (objectType.getConstructor() != null ||\n-             objectType.isFunctionPrototypeType())) {\n-          return objectType.toString() + \".\" + propName;\n-        }\n-      }\n-    }\n-\n     JSType type = getJSType(n);\n     if (dereference) {\n       ObjectType dereferenced = type.dereference();\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/TypeValidator.java", 
          "line": 731, 
          "faulty": "if (n.isGetProp()) {\n  ObjectType objectType=getJSType(n.getFirstChild()).dereference();\n  if (objectType != null) {\n    String propName=n.getLastChild().getString();\n    if (objectType.getConstructor() != null && objectType.getConstructor().isInterface()) {\n      objectType=FunctionType.getTopDefiningInterface(objectType,propName);\n    }\n else {\n      while (objectType != null && !objectType.hasOwnProperty(propName)) {\n        objectType=objectType.getImplicitPrototype();\n      }\n    }\n    if (objectType != null && (objectType.getConstructor() != null || objectType.isFunctionPrototypeType())) {\n      return objectType.toString() + \".\" + propName;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }
      ]
    }
  ]
}