cd /tmp/jMutRepair_Defects4J_Math_44;
export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en";
TZ="America/New_York"; export TZ;
export PATH="/home/wp/tool/jdk1.8.0_71/bin/:$PATH";
export JAVA_HOME="/home/wp/tool/jdk1.8.0_71/bin/";
time java -Xmx1g -Xms1g -cp /home/wp/RepairThemAll/script/../libs/jtestex7.jar:/home/wp/RepairThemAll/script/../repair_tools/astor.jar fr.inria.main.evolution.AstorMain \
	-mode jMutRepair \
        -benchmark Defects4J \
	-location . \
	-id Math-44 \
	-failing org.apache.commons.math.ode.events.EventStateTest \
	-jvm4testexecution /home/wp/tool/jdk1.7.0_80/bin/ \
	-jvm4evosuitetestexecution /home/wp/tool/jdk1.7.0_80/bin/ \
	-maxgen 1000000 \
	-maxtime 120 \
	-stopfirst true \
	-seed 0 \
	-scope local \
	-population 1 \
	-javacompliancelevel 5 \
	-srcjavafolder src/main/java/ \
	-srctestfolder src/test/java/ \
	-binjavafolder target/classes/ \
	-bintestfolder target/test-classes/ \
	-parameters x:x \
	-dependencies /tmp/jMutRepair_Defects4J_Math_44/target/classes/:/tmp/jMutRepair_Defects4J_Math_44/target/test-classes/:/home/wp/RepairThemAll/script/../benchmarks/defects4j/framework/projects/lib/junit-4.11.jar;
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en
Jul 17, 2019 11:14:44 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:44 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:44 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:44 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:44 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:44 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:44 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:44 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:44 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:44 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:44 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:44 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:44 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:44 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:44 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:44 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:44 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:44 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:44 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:44 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:44 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:44 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:44 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:44 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:44 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:44 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:44 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:44 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:44 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:44 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:44 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:44 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:44 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:44 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:44 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:44 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:44 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:44 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:44 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:44 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:44 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:44 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:44 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:44 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:44 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:44 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:44 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:44 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:44 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:44 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:44 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:44 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:44 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:44 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:44 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:44 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:44 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:44 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:44 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:44 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:44 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:45 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:45 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:45 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:45 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:45 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:45 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:45 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:45 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:45 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:45 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:45 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:45 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:45 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:45 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:45 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:45 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:45 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:45 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:45 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:45 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:45 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:45 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:45 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:45 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:45 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:45 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:45 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:45 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:45 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:45 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:45 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:45 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:45 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:45 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:45 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:45 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:45 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:45 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:45 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:45 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:45 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:45 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:45 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:45 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:45 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:45 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:45 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:45 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:45 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:45 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:45 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:45 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:45 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:45 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:45 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:45 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:45 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:45 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:45 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:45 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:45 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:46 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:46 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:46 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:46 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:46 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:46 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:46 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:46 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:46 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:46 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:46 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:46 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:46 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:46 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:46 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:46 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:46 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:46 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:46 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:46 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:46 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:46 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:46 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:46 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:46 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:46 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:46 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:46 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:46 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:46 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:46 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:46 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:46 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:46 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:46 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:46 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:46 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:46 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:46 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:46 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:46 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:46 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:46 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:46 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:46 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:46 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:46 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:46 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:46 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:46 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:46 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:46 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:46 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:46 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:46 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:46 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:46 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:46 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:46 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:46 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
Jul 17, 2019 11:14:46 AM java.util.jar.Attributes read
WARNING: Duplicate name in Manifest: SHA-256-Digest.
Ensure that the manifest does not have duplicate entries, and
that blank lines separate individual sections in both your
manifest and in the META-INF/MANIFEST.MF entry in the jar file.
[INFO ] fr.inria.astor.core.setup.ProjectConfiguration.getVersionJDK(ProjectConfiguration.java:282) - Version of the JVM used: 1.7.0_80
[INFO ] fr.inria.main.AbstractMain.processArguments(AbstractMain.java:388) - Java version of the JDK used to run tests: 1.7.0_80
[INFO ] fr.inria.main.AbstractMain.processArguments(AbstractMain.java:389) - The compliance of the JVM is:  7
[INFO ] fr.inria.main.AbstractMain.processArguments(AbstractMain.java:667) - command line arguments: [-mode  jMutRepair  -benchmark  Defects4J  -location  .  -id  Math-44  -failing  org.apache.commons.math.ode.events.EventStateTest  -jvm4testexecution  /home/wp/tool/jdk1.7.0_80/bin/  -jvm4evosuitetestexecution  /home/wp/tool/jdk1.7.0_80/bin/  -maxgen  1000000  -maxtime  120  -stopfirst  true  -seed  0  -scope  local  -population  1  -javacompliancelevel  5  -srcjavafolder  src/main/java/  -srctestfolder  src/test/java/  -binjavafolder  target/classes/  -bintestfolder  target/test-classes/  -parameters  x:x  -dependencies  /tmp/jMutRepair_Defects4J_Math_44/target/classes/:/tmp/jMutRepair_Defects4J_Math_44/target/test-classes/:/home/wp/RepairThemAll/script/../benchmarks/defects4j/framework/projects/lib/junit-4.11.jar]
[INFO ] fr.inria.main.evolution.AstorMain.execute(AstorMain.java:287) - Running Astor on a JDK at /home/wp/tool/jdk1.8.0_71/jre
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:967) - Source folders: [/tmp/jMutRepair_Defects4J_Math_44/./src/main/java]
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:986) - Source Test folders: [/tmp/jMutRepair_Defects4J_Math_44/./src/test/java]
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:707) - 
---- Creating spoon model
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initModel(AstorCoreEngine.java:806) - Creating model,  Code location from working folder: /tmp/jMutRepair_Defects4J_Math_44/./src/main/java
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:66) - building model: /tmp/jMutRepair_Defects4J_Math_44/./src/main/java, compliance level: 5
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:79) - Classpath (Dependencies) for building SpoonModel: [/tmp/jMutRepair_Defects4J_Math_44/target/classes/, /tmp/jMutRepair_Defects4J_Math_44/target/test-classes/, /home/wp/RepairThemAll/script/../benchmarks/defects4j/framework/projects/lib/junit-4.11.jar]
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:711) - 
---- Initial suspicious size: 790
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:127) - Total suspicious from FL: 790,  92
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:136) - Total ModPoint created: 92
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createInitialPopulation(ProgramVariantFactory.java:82) - Creating program variant #1, [Variant id: 1, #gens: 92, #ops: 0, parent:-]
[INFO ] fr.inria.astor.core.validation.processbased.LaucherJUnitProcess.killProcess(LaucherJUnitProcess.java:185) - The Process that runs JUnit test cases did not terminate within waitTime of 600 seconds
[INFO ] fr.inria.astor.core.validation.processbased.LaucherJUnitProcess.killProcess(LaucherJUnitProcess.java:187) - Killed the Process that runs JUnit test cases 30492
[ERROR] fr.inria.astor.core.solutionsearch.AstorCoreEngine.setFitnessOfPopulation(AstorCoreEngine.java:745) - Initial run of test suite fails
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:66) - ----------------------------
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:67) - ---Configuration properties:---Execution values
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:benchmark= Defects4J
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:lastJUnitVersion= ./examples/libs/junit-4.11.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:alternativecompliancelevel= 4
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoredTestCases= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:workingDirectory= /tmp/jMutRepair_Defects4J_Math_44/./output_astor
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:manipulatesuper= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:validation= process
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4testexecution= /home/wp/tool/jdk1.7.0_80/bin/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:operatorspace= mutationspace
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:disablelog= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:binjavafolder= target/classes/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:synthesis_depth= 3
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltartestpackagetoexclude= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfitnessinitialpopulation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuiteresultfolder= evosuite
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:flthreshold= 0.1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:regressionforfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:collectonlyusedmethod= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:preservelinenumbers= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax2= 1202466
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax1= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probagenmutation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nomodificationconvergence= 100
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:diff_type= relative
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:targetelementprocessor= if-conditions
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srctestfolder= src/test/java/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forceExecuteRegression= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:clusteringfilename= clustering.csv
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:failing= org.apache.commons.math.ode.events.EventStateTest
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logtestexecution= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_buggy_class= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:numberExecutions= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumbersolutions= 1000000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_affected_by_op= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:population= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:considerzerovaluesusp= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxCombinationVariableLimit= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:loglevel= INFO
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savesolution= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:javacompliancelevel= 5
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:x= x
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:uniqueoptogen= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltarpackagetonotinstrument= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:projectIdentifier= Math-44
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:modificationpointnavigation= weight
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:stopfirst= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:multipointmodification= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:elementsToMutate= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jsonoutputname= astor_output
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoDSE= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bintestfolder= target/test-classes/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:testbystep= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:version-location= ./math-version/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:reintroduce= PARENTS:ORIGINAL
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:executorjar= ./lib/jtestex7.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxGeneration= 1000000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:max_synthesis_step= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxVarCombination= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxtime= 120
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitejar= ./lib/evosuite-master-1.0.4-SNAPSHOT.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvmversion= 1.7.0_80
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:commandTrunk= 50000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:faultlocalization= gzoltar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetmodel= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxsuspcandidates= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mode= jMutRepair
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:learningdir= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4evosuitetestexecution= /home/wp/tool/jdk1.7.0_80/bin/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:filterfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mutationrate= 1 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pathToMVNRepository= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resourcesfolder= /src/main/resources:/src/test/resources:
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:timezone= America/Los_Angeles
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:runjava7code= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoRunOnBuggyClass= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:compiler= fr.inria.astor.core.manipulation.bytecode.compiler.SpoonClassCompiler
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:limitbysuspicious= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logsattemps= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:dependenciespath= /tmp/jMutRepair_Defects4J_Math_44/target/classes/:/tmp/jMutRepair_Defects4J_Math_44/target/test-classes/:/home/wp/RepairThemAll/script/../benchmarks/defects4j/framework/projects/lib/junit-4.11.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logpatternlayout= [%-5p] %l - %m%n
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:packageToInstrument= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfaultlocalization= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:scope= local
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:transformingredient= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:fitnessfunction= fr.inria.astor.core.solutionsearch.population.TestCaseFitnessFunction
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumvariablesperingredient= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:parsesourcefromoriginal= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pvariantfoldername= variant-
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savespoonmodelondisk= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srcjavafolder= src/main/java/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:populationcontroller= fr.inria.astor.core.solutionsearch.population.TestCaseBasedFitnessPopulationController
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoreflakyinfl= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:cleantemplates= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:applyCrossover= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxmodificationpoints= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:duplicateingredientsinspace= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:metid= 0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:saveall= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:seed= 0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savecompletepatched= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetoperations= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:processoutputinfile= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:location= .
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probabilistictransformation= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:overridemaxtime= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:outputjsonresult= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:allpoints= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bugId= 280
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitetimeout= 120
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nrPlaceholders= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forcesubprocesskilling= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:71) - ----------------------------
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator line: 209, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(initialStepSize < (minStep)) || (initialStepSize > (maxStep)) ` -topatch--> `(initialStepSize < (this.minStep)) && (initialStepSize > (this.maxStep))` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator line: 209, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(initialStepSize < (minStep)) || (initialStepSize > (maxStep)) ` -topatch--> `(                                                                                                   [...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator line: 209, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(initialStepSize < (minStep)) || (initialStepSize > (maxStep)) ` -topatch--> `(                                                                                                   [...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator line: 209, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(initialStepSize < (minStep)) || (initialStepSize > (maxStep)) ` -topatch--> `(                                                                                                   [...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator line: 209, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(initialStepSize < (minStep)) || (initialStepSize > (maxStep)) ` -topatch--> `(                                                                                                   [...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator line: 209, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(initialStepSize < (minStep)) || (initialStepSize > (maxStep)) ` -topatch--> `(                                                                                                   [...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator line: 209, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(initialStepSize < (minStep)) || (initialStepSize > (maxStep)) ` -topatch--> `(!                                                                                                  [...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator line: 209, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(initialStepSize < (minStep)) || (initialStepSize > (maxStep)) ` -topatch--> `(initialStepSize < (this.minStep)) || (initialStepSize == (this.maxStep))` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator line: 209, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(initialStepSize < (minStep)) || (initialStepSize > (maxStep)) ` -topatch--> `(initialStepSize < (this.minStep)) || (initialStepSize != (this.maxStep))` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator line: 209, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(initialStepSize < (minStep)) || (initialStepSize > (maxStep)) ` -topatch--> `(initialStepSize < (this.minStep)) || (initialStepSize >= (this.maxStep))` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator line: 209, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(initialStepSize < (minStep)) || (initialStepSize > (maxStep)) ` -topatch--> `(initialStepSize < (this.minStep)) || (initialStepSize <= (this.maxStep))` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator line: 209, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(initialStepSize < (minStep)) || (initialStepSize > (maxStep)) ` -topatch--> `(initialStepSize < (this.minStep)) || (initialStepSize < (this.maxStep))` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator line: 209, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(initialStepSize < (minStep)) || (initialStepSize > (maxStep)) ` -topatch--> `(initialStepSize < (this.minStep)) || (!(initialStepSize > (this.maxStep)))` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator line: 209, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(initialStepSize < (minStep)) || (initialStepSize > (maxStep)) ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3375, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `y == 0 ` -topatch--> `y != 0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3375, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `y == 0 ` -topatch--> `y >= 0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3375, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `y == 0 ` -topatch--> `y > 0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3375, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `y == 0 ` -topatch--> `y <= 0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3375, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `y == 0 ` -topatch--> `y < 0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3375, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `y == 0 ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.AbstractIntegrator line: 337, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtInvocationImpl) `currentEvent.reset(eventT, eventY) ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.events.EventState line: 329, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtUnaryOperatorImpl) `!((pendingEvent) && ((org.apache.commons.math.util.FastMath.abs(((pendingEventTime) - t))) <= (conve[...] ` -topatch--> `(this.pendingEvent) && ((org.apache.commons.math.util.FastMath.abs(((this.pendingEventTime) - t))) <[...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.events.EventState line: 333, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(nextAction) == (org.apache.commons.math.ode.events.EventHandler.Action.RESET_STATE) ` -topatch--> `(this.nextAction) != (org.apache.commons.math.ode.events.EventHandler.Action.RESET_STATE)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.events.EventState line: 333, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(nextAction) == (org.apache.commons.math.ode.events.EventHandler.Action.RESET_STATE) ` -topatch--> `(this.nextAction) >= (org.apache.commons.math.ode.events.EventHandler.Action.RESET_STATE)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.events.EventState line: 333, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(nextAction) == (org.apache.commons.math.ode.events.EventHandler.Action.RESET_STATE) ` -topatch--> `(this.nextAction) > (org.apache.commons.math.ode.events.EventHandler.Action.RESET_STATE)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.events.EventState line: 333, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(nextAction) == (org.apache.commons.math.ode.events.EventHandler.Action.RESET_STATE) ` -topatch--> `(this.nextAction) <= (org.apache.commons.math.ode.events.EventHandler.Action.RESET_STATE)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.events.EventState line: 333, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(nextAction) == (org.apache.commons.math.ode.events.EventHandler.Action.RESET_STATE) ` -topatch--> `(this.nextAction) < (org.apache.commons.math.ode.events.EventHandler.Action.RESET_STATE)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.events.EventState line: 333, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(nextAction) == (org.apache.commons.math.ode.events.EventHandler.Action.RESET_STATE) ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.AbstractIntegrator line: 331, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtFieldReadImpl) `isLastStep ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.events.EventState line: 246, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((!(java.lang.Double.isNaN(previousEventTime))) &&  ((org.apache.commons.math.util.FastMath.abs((roo[...] ` -topatch--> `(                                                                                                   [...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.events.EventState line: 246, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((!(java.lang.Double.isNaN(previousEventTime))) &&  ((org.apache.commons.math.util.FastMath.abs((roo[...] ` -topatch--> `(                                                                                                   [...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.events.EventState line: 246, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((!(java.lang.Double.isNaN(previousEventTime))) &&  ((org.apache.commons.math.util.FastMath.abs((roo[...] ` -topatch--> `(                                                                                                   [...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.events.EventState line: 246, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((!(java.lang.Double.isNaN(previousEventTime))) &&  ((org.apache.commons.math.util.FastMath.abs((roo[...] ` -topatch--> `(                                                                                                   [...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.events.EventState line: 246, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((!(java.lang.Double.isNaN(previousEventTime))) &&  ((org.apache.commons.math.util.FastMath.abs((roo[...] ` -topatch--> `(                                                                                                   [...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.events.EventState line: 246, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((!(java.lang.Double.isNaN(previousEventTime))) &&  ((org.apache.commons.math.util.FastMath.abs((roo[...] ` -topatch--> `(                                                                                                   [...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.events.EventState line: 246, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((!(java.lang.Double.isNaN(previousEventTime))) &&  ((org.apache.commons.math.util.FastMath.abs((roo[...] ` -topatch--> `(                                                                                                   [...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.events.EventState line: 246, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((!(java.lang.Double.isNaN(previousEventTime))) &&  ((org.apache.commons.math.util.FastMath.abs((roo[...] ` -topatch--> `(                                                                                                   [...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.events.EventState line: 246, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((!(java.lang.Double.isNaN(previousEventTime))) &&  ((org.apache.commons.math.util.FastMath.abs((roo[...] ` -topatch--> `(!                                                                                                  [...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.events.EventState line: 246, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((!(java.lang.Double.isNaN(previousEventTime))) &&  ((org.apache.commons.math.util.FastMath.abs((roo[...] ` -topatch--> `((!(java.lang.Double.isNaN(this.previousEventTime))) &&  ((org.apache.commons.math.util.FastMath.abs[...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.events.EventState line: 246, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((!(java.lang.Double.isNaN(previousEventTime))) &&  ((org.apache.commons.math.util.FastMath.abs((roo[...] ` -topatch--> `((!(java.lang.Double.isNaN(this.previousEventTime))) &&  ((org.apache.commons.math.util.FastMath.abs[...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.events.EventState line: 246, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((!(java.lang.Double.isNaN(previousEventTime))) &&  ((org.apache.commons.math.util.FastMath.abs((roo[...] ` -topatch--> `((!(java.lang.Double.isNaN(this.previousEventTime))) &&  ((org.apache.commons.math.util.FastMath.abs[...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.events.EventState line: 246, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((!(java.lang.Double.isNaN(previousEventTime))) &&  ((org.apache.commons.math.util.FastMath.abs((roo[...] ` -topatch--> `((!(java.lang.Double.isNaN(this.previousEventTime))) &&  ((org.apache.commons.math.util.FastMath.abs[...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.events.EventState line: 246, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((!(java.lang.Double.isNaN(previousEventTime))) &&  ((org.apache.commons.math.util.FastMath.abs((roo[...] ` -topatch--> `((!(java.lang.Double.isNaN(this.previousEventTime))) &&  ((org.apache.commons.math.util.FastMath.abs[...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.events.EventState line: 246, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((!(java.lang.Double.isNaN(previousEventTime))) &&  ((org.apache.commons.math.util.FastMath.abs((roo[...] ` -topatch--> `((!(java.lang.Double.isNaN(this.previousEventTime))) &&  ((org.apache.commons.math.util.FastMath.abs[...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.events.EventState line: 246, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((!(java.lang.Double.isNaN(previousEventTime))) &&  ((org.apache.commons.math.util.FastMath.abs((roo[...] ` -topatch--> `((!(java.lang.Double.isNaN(this.previousEventTime))) &&  ((org.apache.commons.math.util.FastMath.abs[...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.events.EventState line: 246, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((!(java.lang.Double.isNaN(previousEventTime))) &&  ((org.apache.commons.math.util.FastMath.abs((roo[...] ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.validation.processbased.LaucherJUnitProcess.killProcess(LaucherJUnitProcess.java:185) - The Process that runs JUnit test cases did not terminate within waitTime of 10 seconds
[INFO ] fr.inria.astor.core.validation.processbased.LaucherJUnitProcess.killProcess(LaucherJUnitProcess.java:187) - Killed the Process that runs JUnit test cases 31024
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.events.EventState line: 254, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(java.lang.Double.isNaN(previousEventTime)) ||  ((org.apache.commons.math.util.FastMath.abs(((previo[...] ` -topatch--> `(java.lang.Double.isNaN(this.previousEventTime)) &&  ((org.apache.commons.math.util.FastMath.abs(((t[...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.events.EventState line: 254, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(java.lang.Double.isNaN(previousEventTime)) ||  ((org.apache.commons.math.util.FastMath.abs(((previo[...] ` -topatch--> `(!                                                                                                  [...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.events.EventState line: 254, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(java.lang.Double.isNaN(previousEventTime)) ||  ((org.apache.commons.math.util.FastMath.abs(((previo[...] ` -topatch--> `(java.lang.Double.isNaN(this.previousEventTime)) || ( (org.apache.commons.math.util.FastMath.abs(((t[...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.events.EventState line: 254, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(java.lang.Double.isNaN(previousEventTime)) ||  ((org.apache.commons.math.util.FastMath.abs(((previo[...] ` -topatch--> `(java.lang.Double.isNaN(this.previousEventTime)) || ( (org.apache.commons.math.util.FastMath.abs(((t[...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.events.EventState line: 254, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(java.lang.Double.isNaN(previousEventTime)) ||  ((org.apache.commons.math.util.FastMath.abs(((previo[...] ` -topatch--> `(java.lang.Double.isNaN(this.previousEventTime)) || ( (org.apache.commons.math.util.FastMath.abs(((t[...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.events.EventState line: 254, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(java.lang.Double.isNaN(previousEventTime)) ||  ((org.apache.commons.math.util.FastMath.abs(((previo[...] ` -topatch--> `(java.lang.Double.isNaN(this.previousEventTime)) || ( (org.apache.commons.math.util.FastMath.abs(((t[...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.events.EventState line: 254, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(java.lang.Double.isNaN(previousEventTime)) ||  ((org.apache.commons.math.util.FastMath.abs(((previo[...] ` -topatch--> `(java.lang.Double.isNaN(this.previousEventTime)) || ( (org.apache.commons.math.util.FastMath.abs(((t[...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.events.EventState line: 254, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(java.lang.Double.isNaN(previousEventTime)) ||  ((org.apache.commons.math.util.FastMath.abs(((previo[...] ` -topatch--> `(java.lang.Double.isNaN(this.previousEventTime)) || (! ((org.apache.commons.math.util.FastMath.abs(([...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.events.EventState line: 254, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(java.lang.Double.isNaN(previousEventTime)) ||  ((org.apache.commons.math.util.FastMath.abs(((previo[...] ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.AbstractIntegrator line: 302, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtInvocationImpl) `state.evaluateStep(interpolator) ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.events.EventState line: 225, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(solver) instanceof org.apache.commons.math.analysis.solvers.BracketedUnivariateRealSolver<?> ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.events.EventState line: 157, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(g0) == 0 ` -topatch--> `(this.g0) != 0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.events.EventState line: 157, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(g0) == 0 ` -topatch--> `(this.g0) >= 0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.events.EventState line: 157, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(g0) == 0 ` -topatch--> `(this.g0) > 0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.events.EventState line: 157, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(g0) == 0 ` -topatch--> `(this.g0) <= 0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.events.EventState line: 157, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(g0) == 0 ` -topatch--> `(this.g0) < 0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.events.EventState line: 157, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(g0) == 0 ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.events.EventState line: 193, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(org.apache.commons.math.util.FastMath.abs(dt)) < (convergence) ` -topatch--> `(org.apache.commons.math.util.FastMath.abs(dt)) == (this.convergence)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.events.EventState line: 193, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(org.apache.commons.math.util.FastMath.abs(dt)) < (convergence) ` -topatch--> `(org.apache.commons.math.util.FastMath.abs(dt)) != (this.convergence)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.events.EventState line: 193, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(org.apache.commons.math.util.FastMath.abs(dt)) < (convergence) ` -topatch--> `(org.apache.commons.math.util.FastMath.abs(dt)) >= (this.convergence)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.events.EventState line: 193, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(org.apache.commons.math.util.FastMath.abs(dt)) < (convergence) ` -topatch--> `(org.apache.commons.math.util.FastMath.abs(dt)) > (this.convergence)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.events.EventState line: 193, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(org.apache.commons.math.util.FastMath.abs(dt)) < (convergence) ` -topatch--> `(org.apache.commons.math.util.FastMath.abs(dt)) <= (this.convergence)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.events.EventState line: 193, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(org.apache.commons.math.util.FastMath.abs(dt)) < (convergence) ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.events.EventState line: 217, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(g0Positive) ^ (gb >= 0) ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.events.EventState line: 301, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(pendingEvent) && ((org.apache.commons.math.util.FastMath.abs(((pendingEventTime) - t))) <= (converg[...] ` -topatch--> `(!                                                                                                  [...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.events.EventState line: 301, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(pendingEvent) && ((org.apache.commons.math.util.FastMath.abs(((pendingEventTime) - t))) <= (converg[...] ` -topatch--> `(this.pendingEvent) && ((org.apache.commons.math.util.FastMath.abs(((this.pendingEventTime) - t))) =[...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.events.EventState line: 301, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(pendingEvent) && ((org.apache.commons.math.util.FastMath.abs(((pendingEventTime) - t))) <= (converg[...] ` -topatch--> `(this.pendingEvent) && ((org.apache.commons.math.util.FastMath.abs(((this.pendingEventTime) - t))) ![...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.events.EventState line: 301, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(pendingEvent) && ((org.apache.commons.math.util.FastMath.abs(((pendingEventTime) - t))) <= (converg[...] ` -topatch--> `(this.pendingEvent) && ((org.apache.commons.math.util.FastMath.abs(((this.pendingEventTime) - t))) >[...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.events.EventState line: 301, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(pendingEvent) && ((org.apache.commons.math.util.FastMath.abs(((pendingEventTime) - t))) <= (converg[...] ` -topatch--> `(this.pendingEvent) && ((org.apache.commons.math.util.FastMath.abs(((this.pendingEventTime) - t))) >[...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.events.EventState line: 301, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(pendingEvent) && ((org.apache.commons.math.util.FastMath.abs(((pendingEventTime) - t))) <= (converg[...] ` -topatch--> `(this.pendingEvent) && ((org.apache.commons.math.util.FastMath.abs(((this.pendingEventTime) - t))) <[...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.events.EventState line: 301, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(pendingEvent) && ((org.apache.commons.math.util.FastMath.abs(((pendingEventTime) - t))) <= (converg[...] ` -topatch--> `(this.pendingEvent) && (!((org.apache.commons.math.util.FastMath.abs(((this.pendingEventTime) - t)))[...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.events.EventState line: 301, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(pendingEvent) && ((org.apache.commons.math.util.FastMath.abs(((pendingEventTime) - t))) <= (converg[...] ` -topatch--> `(this.pendingEvent) || ((org.apache.commons.math.util.FastMath.abs(((this.pendingEventTime) - t))) <[...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.events.EventState line: 301, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(pendingEvent) && ((org.apache.commons.math.util.FastMath.abs(((pendingEventTime) - t))) <= (converg[...] ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver line: 213, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((xB - xA) <= xTol) || ((org.apache.commons.math.util.FastMath.max(absYA, absYB)) < (getFunctionValu[...] ` -topatch--> `((xB - xA) <= xTol) && ((org.apache.commons.math.util.FastMath.max(absYA, absYB)) < (getFunctionValu[...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver line: 213, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((xB - xA) <= xTol) || ((org.apache.commons.math.util.FastMath.max(absYA, absYB)) < (getFunctionValu[...] ` -topatch--> `(                                                                                                   [...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver line: 213, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((xB - xA) <= xTol) || ((org.apache.commons.math.util.FastMath.max(absYA, absYB)) < (getFunctionValu[...] ` -topatch--> `(                                                                                                   [...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver line: 213, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((xB - xA) <= xTol) || ((org.apache.commons.math.util.FastMath.max(absYA, absYB)) < (getFunctionValu[...] ` -topatch--> `(                                                                                                   [...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver line: 213, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((xB - xA) <= xTol) || ((org.apache.commons.math.util.FastMath.max(absYA, absYB)) < (getFunctionValu[...] ` -topatch--> `(                                                                                                   [...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver line: 213, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((xB - xA) <= xTol) || ((org.apache.commons.math.util.FastMath.max(absYA, absYB)) < (getFunctionValu[...] ` -topatch--> `(                                                                                                   [...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver line: 213, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((xB - xA) <= xTol) || ((org.apache.commons.math.util.FastMath.max(absYA, absYB)) < (getFunctionValu[...] ` -topatch--> `(!                                                                                                  [...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver line: 213, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((xB - xA) <= xTol) || ((org.apache.commons.math.util.FastMath.max(absYA, absYB)) < (getFunctionValu[...] ` -topatch--> `((xB - xA) <= xTol) || ((org.apache.commons.math.util.FastMath.max(absYA, absYB)) == (getFunctionVal[...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver line: 213, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((xB - xA) <= xTol) || ((org.apache.commons.math.util.FastMath.max(absYA, absYB)) < (getFunctionValu[...] ` -topatch--> `((xB - xA) <= xTol) || ((org.apache.commons.math.util.FastMath.max(absYA, absYB)) != (getFunctionVal[...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver line: 213, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((xB - xA) <= xTol) || ((org.apache.commons.math.util.FastMath.max(absYA, absYB)) < (getFunctionValu[...] ` -topatch--> `((xB - xA) <= xTol) || ((org.apache.commons.math.util.FastMath.max(absYA, absYB)) >= (getFunctionVal[...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver line: 213, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((xB - xA) <= xTol) || ((org.apache.commons.math.util.FastMath.max(absYA, absYB)) < (getFunctionValu[...] ` -topatch--> `((xB - xA) <= xTol) || ((org.apache.commons.math.util.FastMath.max(absYA, absYB)) > (getFunctionValu[...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver line: 213, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((xB - xA) <= xTol) || ((org.apache.commons.math.util.FastMath.max(absYA, absYB)) < (getFunctionValu[...] ` -topatch--> `((xB - xA) <= xTol) || ((org.apache.commons.math.util.FastMath.max(absYA, absYB)) <= (getFunctionVal[...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver line: 213, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((xB - xA) <= xTol) || ((org.apache.commons.math.util.FastMath.max(absYA, absYB)) < (getFunctionValu[...] ` -topatch--> `((xB - xA) <= xTol) || (!((org.apache.commons.math.util.FastMath.max(absYA, absYB)) < (getFunctionVa[...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver line: 213, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((xB - xA) <= xTol) || ((org.apache.commons.math.util.FastMath.max(absYA, absYB)) < (getFunctionValu[...] ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver line: 233, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `agingA >= (org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver.MAXIMAL_AGING) ` -topatch--> `agingA == (org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver.MAXIMAL_AGING)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver line: 233, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `agingA >= (org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver.MAXIMAL_AGING) ` -topatch--> `agingA != (org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver.MAXIMAL_AGING)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver line: 233, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `agingA >= (org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver.MAXIMAL_AGING) ` -topatch--> `agingA > (org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver.MAXIMAL_AGING)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver line: 233, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `agingA >= (org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver.MAXIMAL_AGING) ` -topatch--> `agingA <= (org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver.MAXIMAL_AGING)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver line: 233, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `agingA >= (org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver.MAXIMAL_AGING) ` -topatch--> `agingA < (org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver.MAXIMAL_AGING)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver line: 233, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `agingA >= (org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver.MAXIMAL_AGING) ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver line: 236, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `agingB >= (org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver.MAXIMAL_AGING) ` -topatch--> `agingB == (org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver.MAXIMAL_AGING)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver line: 236, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `agingB >= (org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver.MAXIMAL_AGING) ` -topatch--> `agingB != (org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver.MAXIMAL_AGING)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver line: 236, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `agingB >= (org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver.MAXIMAL_AGING) ` -topatch--> `agingB > (org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver.MAXIMAL_AGING)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver line: 236, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `agingB >= (org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver.MAXIMAL_AGING) ` -topatch--> `agingB <= (org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver.MAXIMAL_AGING)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver line: 236, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `agingB >= (org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver.MAXIMAL_AGING) ` -topatch--> `agingB < (org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver.MAXIMAL_AGING)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver line: 236, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `agingB >= (org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver.MAXIMAL_AGING) ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver line: 254, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtUnaryOperatorImpl) `!((nextX > xA) && (nextX < xB)) ` -topatch--> `(nextX > xA) && (nextX < xB)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver line: 275, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtInvocationImpl) `java.lang.Double.isNaN(nextX) ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver line: 284, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtInvocationImpl) `org.apache.commons.math.util.Precision.equals(nextY, 0.0, 1) ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator line: 318, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtUnaryOperatorImpl) `!(vectorsInitialized) ` -topatch--> `this.vectorsInitialized` (spoon.support.reflect.code.CtFieldReadImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator line: 320, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(v) == null ` -topatch--> `(this.v) != null` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator line: 320, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(v) == null ` -topatch--> `(this.v) >= null` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator line: 320, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(v) == null ` -topatch--> `(this.v) > null` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator line: 320, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(v) == null ` -topatch--> `(this.v) <= null` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator line: 320, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(v) == null ` -topatch--> `(this.v) < null` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator line: 320, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(v) == null ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver line: 155, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtInvocationImpl) `org.apache.commons.math.util.Precision.equals(y[1], 0.0, 1) ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver line: 162, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtInvocationImpl) `org.apache.commons.math.util.Precision.equals(y[0], 0.0, 1) ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver line: 169, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((y[0]) * (y[1])) < 0 ` -topatch--> `((y[0]) * (y[1])) == 0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver line: 169, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((y[0]) * (y[1])) < 0 ` -topatch--> `((y[0]) * (y[1])) != 0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver line: 169, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((y[0]) * (y[1])) < 0 ` -topatch--> `((y[0]) * (y[1])) >= 0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver line: 169, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((y[0]) * (y[1])) < 0 ` -topatch--> `((y[0]) * (y[1])) > 0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver line: 169, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((y[0]) * (y[1])) < 0 ` -topatch--> `((y[0]) * (y[1])) <= 0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver line: 169, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((y[0]) * (y[1])) < 0 ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver line: 83, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `maximalOrder < 2 ` -topatch--> `maximalOrder == 2` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver line: 83, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `maximalOrder < 2 ` -topatch--> `maximalOrder != 2` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver line: 83, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `maximalOrder < 2 ` -topatch--> `maximalOrder >= 2` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver line: 83, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `maximalOrder < 2 ` -topatch--> `maximalOrder > 2` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver line: 83, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `maximalOrder < 2 ` -topatch--> `maximalOrder <= 2` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver line: 83, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `maximalOrder < 2 ` -topatch--> `!                                                                                  (maximalOrder < 2[...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator line: 279, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `den <= 0.0 ` -topatch--> `den == 0.0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator line: 279, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `den <= 0.0 ` -topatch--> `den != 0.0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator line: 279, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `den <= 0.0 ` -topatch--> `den >= 0.0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator line: 279, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `den <= 0.0 ` -topatch--> `den > 0.0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator line: 279, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `den <= 0.0 ` -topatch--> `den < 0.0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator line: 279, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `den <= 0.0 ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator line: 246, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(interpolator.currentState) == null ` -topatch--> `(interpolator.currentState) != null` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator line: 246, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(interpolator.currentState) == null ` -topatch--> `(interpolator.currentState) >= null` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator line: 246, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(interpolator.currentState) == null ` -topatch--> `(interpolator.currentState) > null` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator line: 246, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(interpolator.currentState) == null ` -topatch--> `(interpolator.currentState) <= null` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator line: 246, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(interpolator.currentState) == null ` -topatch--> `(interpolator.currentState) < null` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator line: 246, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(interpolator.currentState) == null ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator line: 391, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(currentState) == null ` -topatch--> `(this.currentState) != null` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator line: 391, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(currentState) == null ` -topatch--> `(this.currentState) >= null` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator line: 391, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(currentState) == null ` -topatch--> `(this.currentState) > null` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator line: 391, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(currentState) == null ` -topatch--> `(this.currentState) <= null` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator line: 391, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(currentState) == null ` -topatch--> `(this.currentState) < null` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator line: 391, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(currentState) == null ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator line: 298, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtUnaryOperatorImpl) `!(isLastStep) ` -topatch--> `this.isLastStep` (spoon.support.reflect.code.CtFieldReadImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator line: 303, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtFieldReadImpl) `fsal ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator line: 318, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtVariableReadImpl) `filteredNextIsLast ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator line: 238, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtVariableReadImpl) `firstTime ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator line: 240, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(vecAbsoluteTolerance) == null ` -topatch--> `(this.vecAbsoluteTolerance) != null` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator line: 240, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(vecAbsoluteTolerance) == null ` -topatch--> `(this.vecAbsoluteTolerance) >= null` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator line: 240, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(vecAbsoluteTolerance) == null ` -topatch--> `(this.vecAbsoluteTolerance) > null` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator line: 240, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(vecAbsoluteTolerance) == null ` -topatch--> `(this.vecAbsoluteTolerance) <= null` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator line: 240, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(vecAbsoluteTolerance) == null ` -topatch--> `(this.vecAbsoluteTolerance) < null` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator line: 240, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(vecAbsoluteTolerance) == null ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator line: 282, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `error >= 1.0 ` -topatch--> `error == 1.0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator line: 282, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `error >= 1.0 ` -topatch--> `error != 1.0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator line: 282, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `error >= 1.0 ` -topatch--> `error > 1.0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator line: 282, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `error >= 1.0 ` -topatch--> `error <= 1.0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator line: 282, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `error >= 1.0 ` -topatch--> `error < 1.0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator line: 282, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `error >= 1.0 ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator line: 233, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `firstTime || (!(fsal)) ` -topatch--> `firstTime && (!(this.fsal))` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator line: 233, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `firstTime || (!(fsal)) ` -topatch--> `(!                                                                                                  [...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator line: 233, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `firstTime || (!(fsal)) ` -topatch--> `firstTime || (this.fsal)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator line: 233, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `firstTime || (!(fsal)) ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator line: 333, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `filteredH < (-(maxStep)) ` -topatch--> `filteredH == (-(this.maxStep))` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator line: 333, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `filteredH < (-(maxStep)) ` -topatch--> `filteredH != (-(this.maxStep))` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.validation.processbased.LaucherJUnitProcess.killProcess(LaucherJUnitProcess.java:185) - The Process that runs JUnit test cases did not terminate within waitTime of 10 seconds
[INFO ] fr.inria.astor.core.validation.processbased.LaucherJUnitProcess.killProcess(LaucherJUnitProcess.java:187) - Killed the Process that runs JUnit test cases 32330
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator line: 333, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `filteredH < (-(maxStep)) ` -topatch--> `filteredH >= (-(this.maxStep))` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.validation.processbased.LaucherJUnitProcess.killProcess(LaucherJUnitProcess.java:185) - The Process that runs JUnit test cases did not terminate within waitTime of 10 seconds
[INFO ] fr.inria.astor.core.validation.processbased.LaucherJUnitProcess.killProcess(LaucherJUnitProcess.java:187) - Killed the Process that runs JUnit test cases 32344
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator line: 333, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `filteredH < (-(maxStep)) ` -topatch--> `filteredH > (-(this.maxStep))` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.validation.processbased.LaucherJUnitProcess.killProcess(LaucherJUnitProcess.java:185) - The Process that runs JUnit test cases did not terminate within waitTime of 10 seconds
[INFO ] fr.inria.astor.core.validation.processbased.LaucherJUnitProcess.killProcess(LaucherJUnitProcess.java:187) - Killed the Process that runs JUnit test cases 32358
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator line: 333, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `filteredH < (-(maxStep)) ` -topatch--> `filteredH <= (-(this.maxStep))` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator line: 333, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `filteredH < (-(maxStep)) ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.validation.processbased.LaucherJUnitProcess.killProcess(LaucherJUnitProcess.java:185) - The Process that runs JUnit test cases did not terminate within waitTime of 10 seconds
[INFO ] fr.inria.astor.core.validation.processbased.LaucherJUnitProcess.killProcess(LaucherJUnitProcess.java:187) - Killed the Process that runs JUnit test cases 32384
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator line: 331, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `filteredH > (maxStep) ` -topatch--> `filteredH == (this.maxStep)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator line: 331, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `filteredH > (maxStep) ` -topatch--> `filteredH != (this.maxStep)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator line: 331, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `filteredH > (maxStep) ` -topatch--> `filteredH >= (this.maxStep)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator line: 331, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `filteredH > (maxStep) ` -topatch--> `filteredH <= (this.maxStep)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator line: 331, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `filteredH > (maxStep) ` -topatch--> `filteredH < (this.maxStep)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator line: 331, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `filteredH > (maxStep) ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator line: 250, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(initialStep) > 0 ` -topatch--> `(this.initialStep) == 0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator line: 250, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(initialStep) > 0 ` -topatch--> `(this.initialStep) != 0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator line: 250, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(initialStep) > 0 ` -topatch--> `(this.initialStep) >= 0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator line: 250, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(initialStep) > 0 ` -topatch--> `(this.initialStep) <= 0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator line: 250, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(initialStep) > 0 ` -topatch--> `(this.initialStep) < 0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator line: 250, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(initialStep) > 0 ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator line: 322, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(org.apache.commons.math.util.FastMath.abs(h)) < (minStep) ` -topatch--> `(org.apache.commons.math.util.FastMath.abs(h)) == (this.minStep)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator line: 322, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(org.apache.commons.math.util.FastMath.abs(h)) < (minStep) ` -topatch--> `(org.apache.commons.math.util.FastMath.abs(h)) != (this.minStep)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator line: 322, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(org.apache.commons.math.util.FastMath.abs(h)) < (minStep) ` -topatch--> `(org.apache.commons.math.util.FastMath.abs(h)) >= (this.minStep)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator line: 322, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(org.apache.commons.math.util.FastMath.abs(h)) < (minStep) ` -topatch--> `(org.apache.commons.math.util.FastMath.abs(h)) > (this.minStep)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator line: 322, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(org.apache.commons.math.util.FastMath.abs(h)) < (minStep) ` -topatch--> `(org.apache.commons.math.util.FastMath.abs(h)) <= (this.minStep)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator line: 322, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(org.apache.commons.math.util.FastMath.abs(h)) < (minStep) ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator line: 84, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(interpolator.currentState) != null ` -topatch--> `(interpolator.currentState) == null` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator line: 84, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(interpolator.currentState) != null ` -topatch--> `(interpolator.currentState) >= null` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator line: 84, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(interpolator.currentState) != null ` -topatch--> `(interpolator.currentState) > null` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator line: 84, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(interpolator.currentState) != null ` -topatch--> `(interpolator.currentState) <= null` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator line: 84, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(interpolator.currentState) != null ` -topatch--> `(interpolator.currentState) < null` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator line: 84, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(interpolator.currentState) != null ` -topatch--> `!                                                                                   ((interpolator.c[...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator line: 225, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((vecAbsoluteTolerance) != null) && ((vecAbsoluteTolerance.length) != (mainSetDimension)) ` -topatch--> `(                                                                                                   [...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator line: 225, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((vecAbsoluteTolerance) != null) && ((vecAbsoluteTolerance.length) != (mainSetDimension)) ` -topatch--> `(                                                                                                   [...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator line: 225, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((vecAbsoluteTolerance) != null) && ((vecAbsoluteTolerance.length) != (mainSetDimension)) ` -topatch--> `(                                                                                                   [...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator line: 225, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((vecAbsoluteTolerance) != null) && ((vecAbsoluteTolerance.length) != (mainSetDimension)) ` -topatch--> `(                                                                                                   [...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator line: 225, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((vecAbsoluteTolerance) != null) && ((vecAbsoluteTolerance.length) != (mainSetDimension)) ` -topatch--> `(                                                                                                   [...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator line: 225, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((vecAbsoluteTolerance) != null) && ((vecAbsoluteTolerance.length) != (mainSetDimension)) ` -topatch--> `(!                                                                                                  [...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator line: 225, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((vecAbsoluteTolerance) != null) && ((vecAbsoluteTolerance.length) != (mainSetDimension)) ` -topatch--> `((this.vecAbsoluteTolerance) != null) && ((this.vecAbsoluteTolerance.length) == (this.mainSetDimensi[...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator line: 225, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((vecAbsoluteTolerance) != null) && ((vecAbsoluteTolerance.length) != (mainSetDimension)) ` -topatch--> `((this.vecAbsoluteTolerance) != null) && ((this.vecAbsoluteTolerance.length) >= (this.mainSetDimensi[...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator line: 225, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((vecAbsoluteTolerance) != null) && ((vecAbsoluteTolerance.length) != (mainSetDimension)) ` -topatch--> `((this.vecAbsoluteTolerance) != null) && ((this.vecAbsoluteTolerance.length) > (this.mainSetDimensio[...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator line: 225, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((vecAbsoluteTolerance) != null) && ((vecAbsoluteTolerance.length) != (mainSetDimension)) ` -topatch--> `((this.vecAbsoluteTolerance) != null) && ((this.vecAbsoluteTolerance.length) <= (this.mainSetDimensi[...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator line: 225, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((vecAbsoluteTolerance) != null) && ((vecAbsoluteTolerance.length) != (mainSetDimension)) ` -topatch--> `((this.vecAbsoluteTolerance) != null) && ((this.vecAbsoluteTolerance.length) < (this.mainSetDimensio[...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator line: 225, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((vecAbsoluteTolerance) != null) && ((vecAbsoluteTolerance.length) != (mainSetDimension)) ` -topatch--> `((this.vecAbsoluteTolerance) != null) && (!((this.vecAbsoluteTolerance.length) != (this.mainSetDimen[...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator line: 225, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((vecAbsoluteTolerance) != null) && ((vecAbsoluteTolerance.length) != (mainSetDimension)) ` -topatch--> `((this.vecAbsoluteTolerance) != null) || ((this.vecAbsoluteTolerance.length) != (this.mainSetDimensi[...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator line: 225, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((vecAbsoluteTolerance) != null) && ((vecAbsoluteTolerance.length) != (mainSetDimension)) ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator line: 229, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((vecRelativeTolerance) != null) && ((vecRelativeTolerance.length) != (mainSetDimension)) ` -topatch--> `(                                                                                                   [...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator line: 229, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((vecRelativeTolerance) != null) && ((vecRelativeTolerance.length) != (mainSetDimension)) ` -topatch--> `(                                                                                                   [...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator line: 229, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((vecRelativeTolerance) != null) && ((vecRelativeTolerance.length) != (mainSetDimension)) ` -topatch--> `(                                                                                                   [...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator line: 229, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((vecRelativeTolerance) != null) && ((vecRelativeTolerance.length) != (mainSetDimension)) ` -topatch--> `(                                                                                                   [...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator line: 229, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((vecRelativeTolerance) != null) && ((vecRelativeTolerance.length) != (mainSetDimension)) ` -topatch--> `(                                                                                                   [...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator line: 229, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((vecRelativeTolerance) != null) && ((vecRelativeTolerance.length) != (mainSetDimension)) ` -topatch--> `(!                                                                                                  [...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator line: 229, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((vecRelativeTolerance) != null) && ((vecRelativeTolerance.length) != (mainSetDimension)) ` -topatch--> `((this.vecRelativeTolerance) != null) && ((this.vecRelativeTolerance.length) == (this.mainSetDimensi[...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator line: 229, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((vecRelativeTolerance) != null) && ((vecRelativeTolerance.length) != (mainSetDimension)) ` -topatch--> `((this.vecRelativeTolerance) != null) && ((this.vecRelativeTolerance.length) >= (this.mainSetDimensi[...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator line: 229, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((vecRelativeTolerance) != null) && ((vecRelativeTolerance.length) != (mainSetDimension)) ` -topatch--> `((this.vecRelativeTolerance) != null) && ((this.vecRelativeTolerance.length) > (this.mainSetDimensio[...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator line: 229, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((vecRelativeTolerance) != null) && ((vecRelativeTolerance.length) != (mainSetDimension)) ` -topatch--> `((this.vecRelativeTolerance) != null) && ((this.vecRelativeTolerance.length) <= (this.mainSetDimensi[...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator line: 229, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((vecRelativeTolerance) != null) && ((vecRelativeTolerance.length) != (mainSetDimension)) ` -topatch--> `((this.vecRelativeTolerance) != null) && ((this.vecRelativeTolerance.length) < (this.mainSetDimensio[...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator line: 229, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((vecRelativeTolerance) != null) && ((vecRelativeTolerance.length) != (mainSetDimension)) ` -topatch--> `((this.vecRelativeTolerance) != null) && (!((this.vecRelativeTolerance.length) != (this.mainSetDimen[...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator line: 229, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((vecRelativeTolerance) != null) && ((vecRelativeTolerance.length) != (mainSetDimension)) ` -topatch--> `((this.vecRelativeTolerance) != null) || ((this.vecRelativeTolerance.length) != (this.mainSetDimensi[...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator line: 229, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((vecRelativeTolerance) != null) && ((vecRelativeTolerance.length) != (mainSetDimension)) ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.sampling.AbstractStepInterpolator line: 180, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(interpolator.currentState) == null ` -topatch--> `(interpolator.currentState) != null` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.sampling.AbstractStepInterpolator line: 180, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(interpolator.currentState) == null ` -topatch--> `(interpolator.currentState) >= null` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.sampling.AbstractStepInterpolator line: 180, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(interpolator.currentState) == null ` -topatch--> `(interpolator.currentState) > null` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.sampling.AbstractStepInterpolator line: 180, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(interpolator.currentState) == null ` -topatch--> `(interpolator.currentState) <= null` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.sampling.AbstractStepInterpolator line: 180, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(interpolator.currentState) == null ` -topatch--> `(interpolator.currentState) < null` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.sampling.AbstractStepInterpolator line: 180, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(interpolator.currentState) == null ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.sampling.AbstractStepInterpolator line: 482, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtUnaryOperatorImpl) `!(finalized) ` -topatch--> `this.finalized` (spoon.support.reflect.code.CtFieldReadImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.AbstractIntegrator line: 283, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtUnaryOperatorImpl) `!(statesInitialized) ` -topatch--> `this.statesInitialized` (spoon.support.reflect.code.CtFieldReadImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils line: 336, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `lower >= upper ` -topatch--> `lower == upper` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils line: 336, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `lower >= upper ` -topatch--> `lower != upper` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils line: 336, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `lower >= upper ` -topatch--> `lower > upper` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils line: 336, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `lower >= upper ` -topatch--> `lower <= upper` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils line: 336, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `lower >= upper ` -topatch--> `lower < upper` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils line: 336, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `lower >= upper ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.AbstractIntegrator line: 203, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(y.length) != (equations.getDimension()) ` -topatch--> `(y.length) == (equations.getDimension())` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.AbstractIntegrator line: 203, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(y.length) != (equations.getDimension()) ` -topatch--> `(y.length) >= (equations.getDimension())` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.AbstractIntegrator line: 203, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(y.length) != (equations.getDimension()) ` -topatch--> `(y.length) > (equations.getDimension())` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.AbstractIntegrator line: 203, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(y.length) != (equations.getDimension()) ` -topatch--> `(y.length) <= (equations.getDimension())` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.AbstractIntegrator line: 203, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(y.length) != (equations.getDimension()) ` -topatch--> `(y.length) < (equations.getDimension())` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.AbstractIntegrator line: 203, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(y.length) != (equations.getDimension()) ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.ExpandableStatefulODE line: 96, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtInvocationImpl) `components.isEmpty() ` -topatch--> `!                                                                                               (thi[...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.EquationsMapper line: 92, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(equationData.length) != (dimension) ` -topatch--> `(equationData.length) == (this.dimension)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.EquationsMapper line: 92, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(equationData.length) != (dimension) ` -topatch--> `(equationData.length) >= (this.dimension)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.EquationsMapper line: 92, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(equationData.length) != (dimension) ` -topatch--> `(equationData.length) > (this.dimension)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.EquationsMapper line: 92, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(equationData.length) != (dimension) ` -topatch--> `(equationData.length) <= (this.dimension)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.EquationsMapper line: 92, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(equationData.length) != (dimension) ` -topatch--> `(equationData.length) < (this.dimension)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.EquationsMapper line: 92, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(equationData.length) != (dimension) ` -topatch--> `!                                                                                           ((equati[...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.sampling.AbstractStepInterpolator line: 402, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtFieldReadImpl) `dirtyState ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.AbstractIntegrator line: 387, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `dt <= threshold ` -topatch--> `dt == threshold` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.AbstractIntegrator line: 387, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `dt <= threshold ` -topatch--> `dt != threshold` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.AbstractIntegrator line: 387, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `dt <= threshold ` -topatch--> `dt >= threshold` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.AbstractIntegrator line: 387, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `dt <= threshold ` -topatch--> `dt > threshold` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.AbstractIntegrator line: 387, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `dt <= threshold ` -topatch--> `dt < threshold` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.AbstractIntegrator line: 387, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `dt <= threshold ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.ExpandableStatefulODE line: 192, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(primaryState.length) != (this.primaryState.length) ` -topatch--> `(primaryState.length) == (this.primaryState.length)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.ExpandableStatefulODE line: 192, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(primaryState.length) != (this.primaryState.length) ` -topatch--> `(primaryState.length) >= (this.primaryState.length)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.ExpandableStatefulODE line: 192, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(primaryState.length) != (this.primaryState.length) ` -topatch--> `(primaryState.length) > (this.primaryState.length)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.ExpandableStatefulODE line: 192, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(primaryState.length) != (this.primaryState.length) ` -topatch--> `(primaryState.length) <= (this.primaryState.length)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.ExpandableStatefulODE line: 192, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(primaryState.length) != (this.primaryState.length) ` -topatch--> `(primaryState.length) < (this.primaryState.length)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.ExpandableStatefulODE line: 192, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(primaryState.length) != (this.primaryState.length) ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.EquationsMapper line: 77, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(equationData.length) != (dimension) ` -topatch--> `(equationData.length) == (this.dimension)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.EquationsMapper line: 77, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(equationData.length) != (dimension) ` -topatch--> `(equationData.length) >= (this.dimension)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.EquationsMapper line: 77, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(equationData.length) != (dimension) ` -topatch--> `(equationData.length) > (this.dimension)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.EquationsMapper line: 77, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(equationData.length) != (dimension) ` -topatch--> `(equationData.length) <= (this.dimension)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.EquationsMapper line: 77, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(equationData.length) != (dimension) ` -topatch--> `(equationData.length) < (this.dimension)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.EquationsMapper line: 77, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(equationData.length) != (dimension) ` -topatch--> `!                                                                            ((equationData.length) [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.AbstractIntegrator line: 200, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(y0.length) != (equations.getDimension()) ` -topatch--> `(y0.length) == (equations.getDimension())` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.AbstractIntegrator line: 200, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(y0.length) != (equations.getDimension()) ` -topatch--> `(y0.length) >= (equations.getDimension())` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.AbstractIntegrator line: 200, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(y0.length) != (equations.getDimension()) ` -topatch--> `(y0.length) > (equations.getDimension())` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.AbstractIntegrator line: 200, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(y0.length) != (equations.getDimension()) ` -topatch--> `(y0.length) <= (equations.getDimension())` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.AbstractIntegrator line: 200, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(y0.length) != (equations.getDimension()) ` -topatch--> `(y0.length) < (equations.getDimension())` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.AbstractIntegrator line: 200, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(y0.length) != (equations.getDimension()) ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.sampling.AbstractStepInterpolator line: 224, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(secondaryMappers) == null ` -topatch--> `(this.secondaryMappers) != null` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.sampling.AbstractStepInterpolator line: 224, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(secondaryMappers) == null ` -topatch--> `(this.secondaryMappers) >= null` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.sampling.AbstractStepInterpolator line: 224, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(secondaryMappers) == null ` -topatch--> `(this.secondaryMappers) > null` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.sampling.AbstractStepInterpolator line: 224, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(secondaryMappers) == null ` -topatch--> `(this.secondaryMappers) <= null` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.sampling.AbstractStepInterpolator line: 224, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(secondaryMappers) == null ` -topatch--> `(this.secondaryMappers) < null` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.sampling.AbstractStepInterpolator line: 224, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(secondaryMappers) == null ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.sampling.AbstractStepInterpolator line: 212, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `dimension < 0 ` -topatch--> `dimension == 0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.sampling.AbstractStepInterpolator line: 212, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `dimension < 0 ` -topatch--> `dimension != 0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.sampling.AbstractStepInterpolator line: 212, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `dimension < 0 ` -topatch--> `dimension >= 0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.sampling.AbstractStepInterpolator line: 212, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `dimension < 0 ` -topatch--> `dimension > 0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.sampling.AbstractStepInterpolator line: 212, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `dimension < 0 ` -topatch--> `dimension <= 0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.ode.sampling.AbstractStepInterpolator line: 212, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `dimension < 0 ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3032, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtInvocationImpl) `java.lang.Double.isInfinite(x) ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3470, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `a > b ` -topatch--> `a == b` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3470, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `a > b ` -topatch--> `a != b` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3470, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `a > b ` -topatch--> `a >= b` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3470, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `a > b ` -topatch--> `a <= b` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3470, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `a > b ` -topatch--> `a < b` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3470, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `a > b ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 866, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `intVal > 709 ` -topatch--> `intVal == 709` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 866, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `intVal > 709 ` -topatch--> `intVal != 709` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 866, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `intVal > 709 ` -topatch--> `intVal >= 709` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 866, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `intVal > 709 ` -topatch--> `intVal <= 709` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 866, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `intVal > 709 ` -topatch--> `intVal < 709` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 866, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `intVal > 709 ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.Precision line: 271, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `xInt < 0 ` -topatch--> `xInt == 0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.Precision line: 271, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `xInt < 0 ` -topatch--> `xInt != 0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.Precision line: 271, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `xInt < 0 ` -topatch--> `xInt >= 0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.Precision line: 271, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `xInt < 0 ` -topatch--> `xInt > 0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.Precision line: 271, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `xInt < 0 ` -topatch--> `xInt <= 0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.Precision line: 271, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `xInt < 0 ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.Precision line: 274, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `yInt < 0 ` -topatch--> `yInt == 0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.Precision line: 274, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `yInt < 0 ` -topatch--> `yInt != 0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.Precision line: 274, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `yInt < 0 ` -topatch--> `yInt >= 0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.Precision line: 274, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `yInt < 0 ` -topatch--> `yInt > 0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.Precision line: 274, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `yInt < 0 ` -topatch--> `yInt <= 0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.Precision line: 274, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `yInt < 0 ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1456, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `x == (java.lang.Double.POSITIVE_INFINITY) ` -topatch--> `x != (java.lang.Double.POSITIVE_INFINITY)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1456, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `x == (java.lang.Double.POSITIVE_INFINITY) ` -topatch--> `x >= (java.lang.Double.POSITIVE_INFINITY)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1456, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `x == (java.lang.Double.POSITIVE_INFINITY) ` -topatch--> `x > (java.lang.Double.POSITIVE_INFINITY)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1456, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `x == (java.lang.Double.POSITIVE_INFINITY) ` -topatch--> `x <= (java.lang.Double.POSITIVE_INFINITY)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1456, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `x == (java.lang.Double.POSITIVE_INFINITY) ` -topatch--> `x < (java.lang.Double.POSITIVE_INFINITY)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1456, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `x == (java.lang.Double.POSITIVE_INFINITY) ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1467, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `y == (java.lang.Double.POSITIVE_INFINITY) ` -topatch--> `y != (java.lang.Double.POSITIVE_INFINITY)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1467, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `y == (java.lang.Double.POSITIVE_INFINITY) ` -topatch--> `y >= (java.lang.Double.POSITIVE_INFINITY)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1467, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `y == (java.lang.Double.POSITIVE_INFINITY) ` -topatch--> `y > (java.lang.Double.POSITIVE_INFINITY)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1467, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `y == (java.lang.Double.POSITIVE_INFINITY) ` -topatch--> `y <= (java.lang.Double.POSITIVE_INFINITY)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1467, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `y == (java.lang.Double.POSITIVE_INFINITY) ` -topatch--> `y < (java.lang.Double.POSITIVE_INFINITY)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1467, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `y == (java.lang.Double.POSITIVE_INFINITY) ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1479, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `x == (java.lang.Double.NEGATIVE_INFINITY) ` -topatch--> `x != (java.lang.Double.NEGATIVE_INFINITY)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1479, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `x == (java.lang.Double.NEGATIVE_INFINITY) ` -topatch--> `x >= (java.lang.Double.NEGATIVE_INFINITY)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1479, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `x == (java.lang.Double.NEGATIVE_INFINITY) ` -topatch--> `x > (java.lang.Double.NEGATIVE_INFINITY)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1479, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `x == (java.lang.Double.NEGATIVE_INFINITY) ` -topatch--> `x <= (java.lang.Double.NEGATIVE_INFINITY)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1479, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `x == (java.lang.Double.NEGATIVE_INFINITY) ` -topatch--> `x < (java.lang.Double.NEGATIVE_INFINITY)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1479, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `x == (java.lang.Double.NEGATIVE_INFINITY) ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1503, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `y == (java.lang.Double.NEGATIVE_INFINITY) ` -topatch--> `y != (java.lang.Double.NEGATIVE_INFINITY)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1503, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `y == (java.lang.Double.NEGATIVE_INFINITY) ` -topatch--> `y >= (java.lang.Double.NEGATIVE_INFINITY)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1503, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `y == (java.lang.Double.NEGATIVE_INFINITY) ` -topatch--> `y > (java.lang.Double.NEGATIVE_INFINITY)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1503, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `y == (java.lang.Double.NEGATIVE_INFINITY) ` -topatch--> `y <= (java.lang.Double.NEGATIVE_INFINITY)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1503, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `y == (java.lang.Double.NEGATIVE_INFINITY) ` -topatch--> `y < (java.lang.Double.NEGATIVE_INFINITY)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1503, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `y == (java.lang.Double.NEGATIVE_INFINITY) ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1517, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `x < 0 ` -topatch--> `x == 0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1517, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `x < 0 ` -topatch--> `x != 0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1517, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `x < 0 ` -topatch--> `x >= 0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1517, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `x < 0 ` -topatch--> `x > 0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1517, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `x < 0 ` -topatch--> `x <= 0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1517, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `x < 0 ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1534, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(y < 8.0E298) && (y > (-8.0E298)) ` -topatch--> `(                                                                                                   [...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1534, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(y < 8.0E298) && (y > (-8.0E298)) ` -topatch--> `(                                                                                                   [...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1534, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(y < 8.0E298) && (y > (-8.0E298)) ` -topatch--> `(                                                                                                   [...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1534, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(y < 8.0E298) && (y > (-8.0E298)) ` -topatch--> `(                                                                                                   [...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1534, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(y < 8.0E298) && (y > (-8.0E298)) ` -topatch--> `(                                                                                                   [...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1534, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(y < 8.0E298) && (y > (-8.0E298)) ` -topatch--> `(!                                                                                                  [...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1534, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(y < 8.0E298) && (y > (-8.0E298)) ` -topatch--> `(y < 8.0E298) && (y == (-8.0E298))` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1534, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(y < 8.0E298) && (y > (-8.0E298)) ` -topatch--> `(y < 8.0E298) && (y != (-8.0E298))` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1534, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(y < 8.0E298) && (y > (-8.0E298)) ` -topatch--> `(y < 8.0E298) && (y >= (-8.0E298))` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1534, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(y < 8.0E298) && (y > (-8.0E298)) ` -topatch--> `(y < 8.0E298) && (y <= (-8.0E298))` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1534, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(y < 8.0E298) && (y > (-8.0E298)) ` -topatch--> `(y < 8.0E298) && (y < (-8.0E298))` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1534, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(y < 8.0E298) && (y > (-8.0E298)) ` -topatch--> `(y < 8.0E298) && (!(y > (-8.0E298)))` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1534, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(y < 8.0E298) && (y > (-8.0E298)) ` -topatch--> `(y < 8.0E298) || (y > (-8.0E298))` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1534, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(y < 8.0E298) && (y > (-8.0E298)) ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1547, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtInvocationImpl) `java.lang.Double.isInfinite(lores) ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1422, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `y == 0.0 ` -topatch--> `y != 0.0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1422, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `y == 0.0 ` -topatch--> `y >= 0.0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1422, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `y == 0.0 ` -topatch--> `y > 0.0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1422, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `y == 0.0 ` -topatch--> `y <= 0.0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1422, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `y == 0.0 ` -topatch--> `y < 0.0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1422, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `y == 0.0 ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1426, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `x != x ` -topatch--> `x == x` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1426, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `x != x ` -topatch--> `x >= x` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1426, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `x != x ` -topatch--> `x > x` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1426, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `x != x ` -topatch--> `x <= x` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1426, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `x != x ` -topatch--> `x < x` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1426, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `x != x ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1431, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `x == 0 ` -topatch--> `x != 0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1431, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `x == 0 ` -topatch--> `x >= 0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1431, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `x == 0 ` -topatch--> `x > 0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1431, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `x == 0 ` -topatch--> `x <= 0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1431, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `x == 0 ` -topatch--> `x < 0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1431, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `x == 0 ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3364, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `x != x ` -topatch--> `x == x` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3364, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `x != x ` -topatch--> `x >= x` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3364, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `x != x ` -topatch--> `x > x` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3364, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `x != x ` -topatch--> `x <= x` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3364, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `x != x ` -topatch--> `x < x` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3364, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `x != x ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3369, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `y == x ` -topatch--> `y != x` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3369, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `y == x ` -topatch--> `y >= x` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3369, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `y == x ` -topatch--> `y > x` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3369, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `y == x ` -topatch--> `y <= x` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3369, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `y == x ` -topatch--> `y < x` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3369, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `y == x ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.Incrementor line: 150, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(++(count)) > (maximalCount) ` -topatch--> `(++(this.count)) == (this.maximalCount)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.Incrementor line: 150, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(++(count)) > (maximalCount) ` -topatch--> `(++(this.count)) != (this.maximalCount)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.Incrementor line: 150, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(++(count)) > (maximalCount) ` -topatch--> `(++(this.count)) >= (this.maximalCount)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.Incrementor line: 150, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(++(count)) > (maximalCount) ` -topatch--> `(++(this.count)) <= (this.maximalCount)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.Incrementor line: 150, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(++(count)) > (maximalCount) ` -topatch--> `(++(this.count)) < (this.maximalCount)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.Incrementor line: 150, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(++(count)) > (maximalCount) ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1218, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `hiPrec != null ` -topatch--> `hiPrec == null` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1218, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `hiPrec != null ` -topatch--> `hiPrec >= null` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1218, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `hiPrec != null ` -topatch--> `hiPrec > null` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1218, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `hiPrec != null ` -topatch--> `hiPrec <= null` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1218, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `hiPrec != null ` -topatch--> `hiPrec < null` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1218, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `hiPrec != null ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1319, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `hiPrec != null ` -topatch--> `hiPrec == null` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1319, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `hiPrec != null ` -topatch--> `hiPrec >= null` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1319, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `hiPrec != null ` -topatch--> `hiPrec > null` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1319, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `hiPrec != null ` -topatch--> `hiPrec <= null` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1319, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `hiPrec != null ` -topatch--> `hiPrec < null` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1319, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `hiPrec != null ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3541, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `a < b ` -topatch--> `a == b` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3541, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `a < b ` -topatch--> `a != b` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3541, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `a < b ` -topatch--> `a >= b` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3541, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `a < b ` -topatch--> `a > b` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3541, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `a < b ` -topatch--> `a <= b` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3541, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `a < b ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 919, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `extra != 0.0 ` -topatch--> `extra == 0.0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 919, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `extra != 0.0 ` -topatch--> `extra >= 0.0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 919, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `extra != 0.0 ` -topatch--> `extra > 0.0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 919, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `extra != 0.0 ` -topatch--> `extra <= 0.0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 919, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `extra != 0.0 ` -topatch--> `extra < 0.0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 919, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `extra != 0.0 ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 925, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `hiPrec != null ` -topatch--> `hiPrec == null` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 925, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `hiPrec != null ` -topatch--> `hiPrec >= null` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 925, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `hiPrec != null ` -topatch--> `hiPrec > null` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 925, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `hiPrec != null ` -topatch--> `hiPrec <= null` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 925, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `hiPrec != null ` -topatch--> `hiPrec < null` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 925, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `hiPrec != null ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1134, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(bits & 9218868437227405312L) == 0 ` -topatch--> `(bits & 9218868437227405312L) != 0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1134, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(bits & 9218868437227405312L) == 0 ` -topatch--> `(bits & 9218868437227405312L) >= 0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1134, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(bits & 9218868437227405312L) == 0 ` -topatch--> `(bits & 9218868437227405312L) > 0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1134, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(bits & 9218868437227405312L) == 0 ` -topatch--> `(bits & 9218868437227405312L) <= 0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1134, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(bits & 9218868437227405312L) == 0 ` -topatch--> `(bits & 9218868437227405312L) < 0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1134, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(bits & 9218868437227405312L) == 0 ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1154, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(exp == (-1)) || (exp == 0) ` -topatch--> `(exp == (-1)) && (exp == 0)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1154, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(exp == (-1)) || (exp == 0) ` -topatch--> `(                                                                                                   [...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1154, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(exp == (-1)) || (exp == 0) ` -topatch--> `(                                                                                                   [...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1154, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(exp == (-1)) || (exp == 0) ` -topatch--> `(                                                                                                   [...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1154, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(exp == (-1)) || (exp == 0) ` -topatch--> `(                                                                                                   [...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1154, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(exp == (-1)) || (exp == 0) ` -topatch--> `(                                                                                                   [...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1154, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(exp == (-1)) || (exp == 0) ` -topatch--> `(!                                                                                                  [...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1154, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(exp == (-1)) || (exp == 0) ` -topatch--> `(exp == (-1)) || (exp != 0)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1154, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(exp == (-1)) || (exp == 0) ` -topatch--> `(exp == (-1)) || (exp >= 0)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1154, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(exp == (-1)) || (exp == 0) ` -topatch--> `(exp == (-1)) || (exp > 0)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1154, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(exp == (-1)) || (exp == 0) ` -topatch--> `(exp == (-1)) || (exp <= 0)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1154, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(exp == (-1)) || (exp == 0) ` -topatch--> `(exp == (-1)) || (exp < 0)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1154, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(exp == (-1)) || (exp == 0) ` -topatch--> `(exp == (-1)) || (!(exp == 0))` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1154, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(exp == (-1)) || (exp == 0) ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1112, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((bits & -9223372036854775808L) != 0) || (x != x) ` -topatch--> `((bits & -9223372036854775808L) != 0) && (x != x)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1112, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((bits & -9223372036854775808L) != 0) || (x != x) ` -topatch--> `(                                                                                                   [...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1112, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((bits & -9223372036854775808L) != 0) || (x != x) ` -topatch--> `(                                                                                                   [...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1112, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((bits & -9223372036854775808L) != 0) || (x != x) ` -topatch--> `(                                                                                                   [...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1112, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((bits & -9223372036854775808L) != 0) || (x != x) ` -topatch--> `(                                                                                                   [...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1112, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((bits & -9223372036854775808L) != 0) || (x != x) ` -topatch--> `(                                                                                                   [...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1112, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((bits & -9223372036854775808L) != 0) || (x != x) ` -topatch--> `(!                                                                                                  [...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1112, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((bits & -9223372036854775808L) != 0) || (x != x) ` -topatch--> `((bits & -9223372036854775808L) != 0) || (x == x)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1112, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((bits & -9223372036854775808L) != 0) || (x != x) ` -topatch--> `((bits & -9223372036854775808L) != 0) || (x >= x)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1112, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((bits & -9223372036854775808L) != 0) || (x != x) ` -topatch--> `((bits & -9223372036854775808L) != 0) || (x > x)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1112, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((bits & -9223372036854775808L) != 0) || (x != x) ` -topatch--> `((bits & -9223372036854775808L) != 0) || (x <= x)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1112, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((bits & -9223372036854775808L) != 0) || (x != x) ` -topatch--> `((bits & -9223372036854775808L) != 0) || (x < x)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1112, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((bits & -9223372036854775808L) != 0) || (x != x) ` -topatch--> `((bits & -9223372036854775808L) != 0) || (!(x != x))` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1112, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `((bits & -9223372036854775808L) != 0) || (x != x) ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1123, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `x == (java.lang.Double.POSITIVE_INFINITY) ` -topatch--> `x != (java.lang.Double.POSITIVE_INFINITY)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1123, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `x == (java.lang.Double.POSITIVE_INFINITY) ` -topatch--> `x >= (java.lang.Double.POSITIVE_INFINITY)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1123, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `x == (java.lang.Double.POSITIVE_INFINITY) ` -topatch--> `x > (java.lang.Double.POSITIVE_INFINITY)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1123, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `x == (java.lang.Double.POSITIVE_INFINITY) ` -topatch--> `x <= (java.lang.Double.POSITIVE_INFINITY)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1123, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `x == (java.lang.Double.POSITIVE_INFINITY) ` -topatch--> `x < (java.lang.Double.POSITIVE_INFINITY)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1123, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `x == (java.lang.Double.POSITIVE_INFINITY) ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1106, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `x == 0 ` -topatch--> `x != 0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1106, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `x == 0 ` -topatch--> `x >= 0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1106, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `x == 0 ` -topatch--> `x > 0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1106, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `x == 0 ` -topatch--> `x <= 0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1106, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `x == 0 ` -topatch--> `x < 0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 1106, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `x == 0 ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 826, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `x < 0.0 ` -topatch--> `x == 0.0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 826, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `x < 0.0 ` -topatch--> `x != 0.0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 826, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `x < 0.0 ` -topatch--> `x >= 0.0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 826, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `x < 0.0 ` -topatch--> `x > 0.0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 826, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `x < 0.0 ` -topatch--> `x <= 0.0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 826, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `x < 0.0 ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3538, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `a > b ` -topatch--> `a == b` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3538, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `a > b ` -topatch--> `a != b` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3538, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `a > b ` -topatch--> `a >= b` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3538, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `a > b ` -topatch--> `a <= b` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3538, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `a > b ` -topatch--> `a < b` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3538, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `a > b ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3346, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(x < 0) && (y != x) ` -topatch--> `(                                                                                                   [...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3346, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(x < 0) && (y != x) ` -topatch--> `(                                                                                                   [...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3346, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(x < 0) && (y != x) ` -topatch--> `(                                                                                                   [...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3346, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(x < 0) && (y != x) ` -topatch--> `(                                                                                                   [...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3346, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(x < 0) && (y != x) ` -topatch--> `(                                                                                                   [...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3346, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(x < 0) && (y != x) ` -topatch--> `(!                                                                                                  [...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3346, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(x < 0) && (y != x) ` -topatch--> `(x < 0) && (y == x)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3346, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(x < 0) && (y != x) ` -topatch--> `(x < 0) && (y >= x)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3346, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(x < 0) && (y != x) ` -topatch--> `(x < 0) && (y > x)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3346, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(x < 0) && (y != x) ` -topatch--> `(x < 0) && (y <= x)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3346, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(x < 0) && (y != x) ` -topatch--> `(x < 0) && (y < x)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3346, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(x < 0) && (y != x) ` -topatch--> `(x < 0) && (!(y != x))` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3346, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(x < 0) && (y != x) ` -topatch--> `(x < 0) || (y != x)` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3346, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(x < 0) && (y != x) ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3350, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `y == 0 ` -topatch--> `y != 0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3350, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `y == 0 ` -topatch--> `y >= 0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3350, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `y == 0 ` -topatch--> `y > 0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3350, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `y == 0 ` -topatch--> `y <= 0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3350, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `y == 0 ` -topatch--> `y < 0` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3350, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `y == 0 ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3337, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `x != x ` -topatch--> `x == x` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3337, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `x != x ` -topatch--> `x >= x` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3337, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `x != x ` -topatch--> `x > x` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3337, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `x != x ` -topatch--> `x <= x` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3337, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `x != x ` -topatch--> `x < x` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3337, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `x != x ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3341, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(x >= (org.apache.commons.math.util.FastMath.TWO_POWER_52)) || (x <= (-(org.apache.commons.math.util[...] ` -topatch--> `(x >= (org.apache.commons.math.util.FastMath.TWO_POWER_52)) && (x <= (-(org.apache.commons.math.util[...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3341, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(x >= (org.apache.commons.math.util.FastMath.TWO_POWER_52)) || (x <= (-(org.apache.commons.math.util[...] ` -topatch--> `(                                                                                                   [...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3341, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(x >= (org.apache.commons.math.util.FastMath.TWO_POWER_52)) || (x <= (-(org.apache.commons.math.util[...] ` -topatch--> `(                                                                                                   [...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3341, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(x >= (org.apache.commons.math.util.FastMath.TWO_POWER_52)) || (x <= (-(org.apache.commons.math.util[...] ` -topatch--> `(                                                                                                   [...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3341, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(x >= (org.apache.commons.math.util.FastMath.TWO_POWER_52)) || (x <= (-(org.apache.commons.math.util[...] ` -topatch--> `(                                                                                                   [...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3341, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(x >= (org.apache.commons.math.util.FastMath.TWO_POWER_52)) || (x <= (-(org.apache.commons.math.util[...] ` -topatch--> `(                                                                                                   [...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3341, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(x >= (org.apache.commons.math.util.FastMath.TWO_POWER_52)) || (x <= (-(org.apache.commons.math.util[...] ` -topatch--> `(!                                                                                                  [...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3341, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(x >= (org.apache.commons.math.util.FastMath.TWO_POWER_52)) || (x <= (-(org.apache.commons.math.util[...] ` -topatch--> `(x >= (org.apache.commons.math.util.FastMath.TWO_POWER_52)) || (x == (-(org.apache.commons.math.util[...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3341, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(x >= (org.apache.commons.math.util.FastMath.TWO_POWER_52)) || (x <= (-(org.apache.commons.math.util[...] ` -topatch--> `(x >= (org.apache.commons.math.util.FastMath.TWO_POWER_52)) || (x != (-(org.apache.commons.math.util[...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3341, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(x >= (org.apache.commons.math.util.FastMath.TWO_POWER_52)) || (x <= (-(org.apache.commons.math.util[...] ` -topatch--> `(x >= (org.apache.commons.math.util.FastMath.TWO_POWER_52)) || (x >= (-(org.apache.commons.math.util[...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3341, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(x >= (org.apache.commons.math.util.FastMath.TWO_POWER_52)) || (x <= (-(org.apache.commons.math.util[...] ` -topatch--> `(x >= (org.apache.commons.math.util.FastMath.TWO_POWER_52)) || (x > (-(org.apache.commons.math.util.[...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3341, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(x >= (org.apache.commons.math.util.FastMath.TWO_POWER_52)) || (x <= (-(org.apache.commons.math.util[...] ` -topatch--> `(x >= (org.apache.commons.math.util.FastMath.TWO_POWER_52)) || (x < (-(org.apache.commons.math.util.[...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3341, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(x >= (org.apache.commons.math.util.FastMath.TWO_POWER_52)) || (x <= (-(org.apache.commons.math.util[...] ` -topatch--> `(x >= (org.apache.commons.math.util.FastMath.TWO_POWER_52)) || (!(x <= (-(org.apache.commons.math.ut[...]` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.FastMath line: 3341, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `(x >= (org.apache.commons.math.util.FastMath.TWO_POWER_52)) || (x <= (-(org.apache.commons.math.util[...] ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.MathUtils line: 515, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `o == null ` -topatch--> `o != null` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.MathUtils line: 515, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `o == null ` -topatch--> `o >= null` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.MathUtils line: 515, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `o == null ` -topatch--> `o > null` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.MathUtils line: 515, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `o == null ` -topatch--> `o <= null` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.MathUtils line: 515, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `o == null ` -topatch--> `o < null` (spoon.support.reflect.code.CtBinaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:63) - mod_point MP=org.apache.commons.math.util.MathUtils line: 515, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:64) - -->op: OP_INSTANCE:
IfExpresionMutOp:(spoon.support.reflect.code.CtBinaryOperatorImpl) `o == null ` -topatch--> `!                                                                                                   [...]` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:173) - Time Repair Loop (s): 2750.032
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:175) - generationsexecuted: 1
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.printFinalStatus(AstorCoreEngine.java:244) - 
----SUMMARY_EXECUTION---
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:191) - number of variants that pass the compile is 473

[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:192) - number of variants that fail the compile is 56

[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:194) - 
 --SOLUTIONS DESCRIPTION--


Astor Output:

General stats:
EXECUTION_IDENTIFIER=Math-44
TOTAL_TIME=2750.032
NR_GENERATIONS=null
NR_RIGHT_COMPILATIONS=473
NR_FAILLING_COMPILATIONS=56
NR_ERRONEOUS_VARIANCES=null
NR_FAILING_VALIDATION_PROCESS=1
OUTPUT_STATUS=EXHAUSTIVE_NAVIGATED

Patch stats:

[INFO ] fr.inria.main.evolution.AstorMain.run(AstorMain.java:271) - Time Total(s): 3412.796
583.49user 18.90system 56:56.68elapsed 17%CPU (0avgtext+0avgdata 866000maxresident)k
86056inputs+531144outputs (71major+2671462minor)pagefaults 0swaps


Node: ubuntu



Date: Wed Jul 17 12:11:39 EDT 2019

