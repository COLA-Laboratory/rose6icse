{
  "repair_end": "2019-08-09 13:00:45.860094", 
  "repair_begin": "2019-08-09 12:38:24.468564", 
  "patches": [
    {
      "diff": "--- /tmp/RSRepair_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2019-08-09 00:36:54.554115355 -0400\n+++ /tmp/RSRepair_Defects4J_Closure_3/patches_sf5t/Patch_1/patched/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2019-08-09 01:00:45.834216883 -0400\n@@ -152,20 +152,7 @@\n     reachingUses = new MaybeReachingVariableUse(cfg, t.getScope(), compiler);\n     reachingUses.analyze();\n     for (Candidate c : candidates) {\n-      if (c.canInline()) {\n-        c.inlineVariable();\n-\n-        // If definition c has dependencies, then inlining it may have\n-        // introduced new dependencies for our other inlining candidates.\n-        //\n-        // MustBeReachingVariableDef uses this dependency graph in its\n-        // analysis, so some of these candidates may no longer be valid.\n-        // We keep track of when the variable dependency graph changed\n-        // so that we can back off appropriately.\n-        if (!c.defMetadata.depends.isEmpty()) {\n-          inlinedNewDependencies.add(t.getScope().getVar(c.varName));\n-        }\n-      }\n+      int index = -1;\n     }\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 155, 
          "faulty": "if (c.canInline()) {\n  c.inlineVariable();\n  if (!c.defMetadata.depends.isEmpty()) {\n    inlinedNewDependencies.add(t.getScope().getVar(c.varName));\n  }\n}", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ]
    }
  ]
}