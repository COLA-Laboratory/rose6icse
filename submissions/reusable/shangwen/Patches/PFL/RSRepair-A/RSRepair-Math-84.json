{
  "repair_end": "2019-08-04 13:23:07.593696", 
  "repair_begin": "2019-08-04 13:17:58.518376", 
  "patches": [
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java", 
          "line": 90, 
          "faulty": "if (comparator.compare(contracted,best) < 0) {\n  return;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java", 
          "line": 94, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "this.gamma=0.5;"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Math_84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\t2019-08-04 16:17:17.909819916 -0400\n+++ /tmp/RSRepair_Defects4J_Math_84/patches_j67s/Patch_43/patched/org/apache/commons/math/optimization/direct/MultiDirectional.java\t2019-08-04 16:23:07.237998397 -0400\n@@ -87,12 +87,7 @@\n \n             // compute the contracted simplex\n             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n-            }\n+            break;\n \n         }\n \n\n\n"
    }
  ]
}