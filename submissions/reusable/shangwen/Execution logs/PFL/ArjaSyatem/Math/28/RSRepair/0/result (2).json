{
  "repair_end": "2019-08-04 05:09:44.946731", 
  "repair_begin": "2019-08-04 03:42:13.458240", 
  "patches": [
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer minRow=null;"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2019-08-04 06:41:02.940154724 -0400\n+++ /tmp/RSRepair_Defects4J_Math_28/patches_uebs/Patch_1/patched/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2019-08-04 08:09:44.130873449 -0400\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n"
    }
  ]
}