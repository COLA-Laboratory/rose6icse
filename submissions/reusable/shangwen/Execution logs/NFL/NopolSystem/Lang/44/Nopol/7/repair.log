cd /tmp/Nopol_Defects4J_Lang_44;
export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en";
TZ="America/New_York"; export TZ;
export PATH="/home/wp/tool/jdk1.8.0_71/bin/:$PATH";
export JAVA_HOME="/home/wp/tool/jdk1.8.0_71/bin/";
time java -Xmx1g -Xms1g -cp /home/wp/RepairThemAll/script/../repair_tools/nopol.jar:/home/wp/tool/jdk1.8.0_71/bin//../lib/tools.jar fr.inria.lille.repair.Main \
	--mode repair \
	--type pre_then_cond \
	--bugid Lang-44 \
	--oracle angelic \
	--synthesis smt \
	--flocal gzoltar \
	--json \
	--solver z3 \
	--solver-path /home/wp/RepairThemAll/script/../libs/z3/build/z3 \
	--complianceLevel 3 \
	--source src/java/ \
	--classpath "target/classes/:target/tests/:/tmp/Nopol_Defects4J_Lang_44/target/classes/:/tmp/Nopol_Defects4J_Lang_44/target/tests/:/home/wp/RepairThemAll/script/../benchmarks/defects4j/framework/projects/Lang/lib/asm.jar:/home/wp/RepairThemAll/script/../benchmarks/defects4j/framework/projects/Lang/lib/easymock.jar:/home/wp/RepairThemAll/script/../benchmarks/defects4j/framework/projects/Lang/lib/commons-io.jar:/home/wp/RepairThemAll/script/../benchmarks/defects4j/framework/projects/Lang/lib/cglib.jar:/home/wp/RepairThemAll/script/../benchmarks/defects4j/framework/projects/lib/junit-4.11.jar:/home/wp/RepairThemAll/script/../repair_tools/nopol.jar";
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en
04:51:38.199 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Source files: [src/java]
04:51:38.203 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Classpath: [file:/tmp/Nopol_Defects4J_Lang_44/target/classes/, file:/tmp/Nopol_Defects4J_Lang_44/target/tests/, file:/tmp/Nopol_Defects4J_Lang_44/target/classes/, file:/tmp/Nopol_Defects4J_Lang_44/target/tests/, file:/home/wp/RepairThemAll/script/../benchmarks/defects4j/framework/projects/Lang/lib/asm.jar, file:/home/wp/RepairThemAll/script/../benchmarks/defects4j/framework/projects/Lang/lib/easymock.jar, file:/home/wp/RepairThemAll/script/../benchmarks/defects4j/framework/projects/Lang/lib/commons-io.jar, file:/home/wp/RepairThemAll/script/../benchmarks/defects4j/framework/projects/Lang/lib/cglib.jar, file:/home/wp/RepairThemAll/script/../benchmarks/defects4j/framework/projects/lib/junit-4.11.jar, file:/home/wp/RepairThemAll/script/../repair_tools/nopol.jar]
04:51:38.203 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Statement type: PRE_THEN_COND
04:51:38.203 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Args: [org.apache.commons.lang.ArrayUtilsAddTest, org.apache.commons.lang.ArrayUtilsAddTest, org.apache.commons.lang.ArrayUtilsRemoveTest, org.apache.commons.lang.ArrayUtilsRemoveTest, org.apache.commons.lang.ArrayUtilsTest, org.apache.commons.lang.ArrayUtilsTest, org.apache.commons.lang.BitFieldTest, org.apache.commons.lang.BitFieldTest, org.apache.commons.lang.BooleanUtilsTest, org.apache.commons.lang.BooleanUtilsTest, org.apache.commons.lang.CharEncodingTest, org.apache.commons.lang.CharEncodingTest, org.apache.commons.lang.CharRangeTest, org.apache.commons.lang.CharRangeTest, org.apache.commons.lang.CharSetTest, org.apache.commons.lang.CharSetTest, org.apache.commons.lang.CharSetUtilsTest, org.apache.commons.lang.CharSetUtilsTest, org.apache.commons.lang.CharUtilsTest, org.apache.commons.lang.CharUtilsTest, org.apache.commons.lang.ClassUtilsTest, org.apache.commons.lang.ClassUtilsTest, org.apache.commons.lang.EntitiesPerformanceTest, org.apache.commons.lang.EntitiesPerformanceTest, org.apache.commons.lang.EntitiesTest, org.apache.commons.lang.EntitiesTest, org.apache.commons.lang.IllegalClassExceptionTest, org.apache.commons.lang.IllegalClassExceptionTest, org.apache.commons.lang.IncompleteArgumentExceptionTest, org.apache.commons.lang.IncompleteArgumentExceptionTest, org.apache.commons.lang.IntHashMapTest, org.apache.commons.lang.IntHashMapTest, org.apache.commons.lang.LocaleUtilsTest, org.apache.commons.lang.LocaleUtilsTest, org.apache.commons.lang.NotImplementedExceptionTest, org.apache.commons.lang.NotImplementedExceptionTest, org.apache.commons.lang.NullArgumentExceptionTest, org.apache.commons.lang.NullArgumentExceptionTest, org.apache.commons.lang.NumberRangeTest, org.apache.commons.lang.NumberRangeTest, org.apache.commons.lang.NumberUtilsTest, org.apache.commons.lang.NumberUtilsTest, org.apache.commons.lang.ObjectUtilsTest, org.apache.commons.lang.ObjectUtilsTest, org.apache.commons.lang.RandomStringUtilsTest, org.apache.commons.lang.RandomStringUtilsTest, org.apache.commons.lang.SerializationUtilsTest, org.apache.commons.lang.SerializationUtilsTest, org.apache.commons.lang.StringEscapeUtilsTest, org.apache.commons.lang.StringEscapeUtilsTest, org.apache.commons.lang.StringUtilsEqualsIndexOfTest, org.apache.commons.lang.StringUtilsEqualsIndexOfTest, org.apache.commons.lang.StringUtilsIsTest, org.apache.commons.lang.StringUtilsIsTest, org.apache.commons.lang.StringUtilsStartsEndsWithTest, org.apache.commons.lang.StringUtilsStartsEndsWithTest, org.apache.commons.lang.StringUtilsSubstringTest, org.apache.commons.lang.StringUtilsSubstringTest, org.apache.commons.lang.StringUtilsTest, org.apache.commons.lang.StringUtilsTest, org.apache.commons.lang.StringUtilsTrimEmptyTest, org.apache.commons.lang.StringUtilsTrimEmptyTest, org.apache.commons.lang.SystemUtilsTest, org.apache.commons.lang.SystemUtilsTest, org.apache.commons.lang.UnhandledExceptionTest, org.apache.commons.lang.UnhandledExceptionTest, org.apache.commons.lang.ValidateTest, org.apache.commons.lang.ValidateTest, org.apache.commons.lang.WordUtilsTest, org.apache.commons.lang.WordUtilsTest, org.apache.commons.lang.builder.CompareToBuilderTest, org.apache.commons.lang.builder.CompareToBuilderTest, org.apache.commons.lang.builder.DefaultToStringStyleTest, org.apache.commons.lang.builder.DefaultToStringStyleTest, org.apache.commons.lang.builder.EqualsBuilderTest, org.apache.commons.lang.builder.EqualsBuilderTest, org.apache.commons.lang.builder.HashCodeBuilderAndEqualsBuilderTest, org.apache.commons.lang.builder.HashCodeBuilderAndEqualsBuilderTest, org.apache.commons.lang.builder.HashCodeBuilderTest, org.apache.commons.lang.builder.HashCodeBuilderTest, org.apache.commons.lang.builder.MultiLineToStringStyleTest, org.apache.commons.lang.builder.MultiLineToStringStyleTest, org.apache.commons.lang.builder.NoFieldNamesToStringStyleTest, org.apache.commons.lang.builder.NoFieldNamesToStringStyleTest, org.apache.commons.lang.builder.ReflectionToStringBuilderExcludeTest, org.apache.commons.lang.builder.ReflectionToStringBuilderExcludeTest, org.apache.commons.lang.builder.ShortPrefixToStringStyleTest, org.apache.commons.lang.builder.ShortPrefixToStringStyleTest, org.apache.commons.lang.builder.SimpleToStringStyleTest, org.apache.commons.lang.builder.SimpleToStringStyleTest, org.apache.commons.lang.builder.StandardToStringStyleTest, org.apache.commons.lang.builder.StandardToStringStyleTest, org.apache.commons.lang.builder.ToStringBuilderTest, org.apache.commons.lang.builder.ToStringBuilderTest, org.apache.commons.lang.builder.ToStringStyleTest, org.apache.commons.lang.builder.ToStringStyleTest, org.apache.commons.lang.enum.EnumTest, org.apache.commons.lang.enum.EnumTest, org.apache.commons.lang.enum.EnumUtilsTest, org.apache.commons.lang.enum.EnumUtilsTest, org.apache.commons.lang.enum.ValuedEnumTest, org.apache.commons.lang.enum.ValuedEnumTest, org.apache.commons.lang.enums.EnumEqualsTest, org.apache.commons.lang.enums.EnumEqualsTest, org.apache.commons.lang.enums.EnumTest, org.apache.commons.lang.enums.EnumTest, org.apache.commons.lang.enums.EnumUtilsTest, org.apache.commons.lang.enums.EnumUtilsTest, org.apache.commons.lang.enums.ValuedEnumTest, org.apache.commons.lang.enums.ValuedEnumTest, org.apache.commons.lang.exception.ExceptionUtilsTestCase, org.apache.commons.lang.exception.ExceptionUtilsTestCase, org.apache.commons.lang.exception.NestableDelegateTestCase, org.apache.commons.lang.exception.NestableDelegateTestCase, org.apache.commons.lang.exception.NestableErrorTestCase, org.apache.commons.lang.exception.NestableErrorTestCase, org.apache.commons.lang.exception.NestableExceptionTestCase, org.apache.commons.lang.exception.NestableExceptionTestCase, org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase, org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase, org.apache.commons.lang.math.DoubleRangeTest, org.apache.commons.lang.math.DoubleRangeTest, org.apache.commons.lang.math.FloatRangeTest, org.apache.commons.lang.math.FloatRangeTest, org.apache.commons.lang.math.FractionTest, org.apache.commons.lang.math.FractionTest, org.apache.commons.lang.math.IEEE754rUtilsTest, org.apache.commons.lang.math.IEEE754rUtilsTest, org.apache.commons.lang.math.IntRangeTest, org.apache.commons.lang.math.IntRangeTest, org.apache.commons.lang.math.LongRangeTest, org.apache.commons.lang.math.LongRangeTest, org.apache.commons.lang.math.NumberRangeTest, org.apache.commons.lang.math.NumberRangeTest, org.apache.commons.lang.math.NumberUtilsTest, org.apache.commons.lang.math.NumberUtilsTest, org.apache.commons.lang.math.RandomUtilsTest, org.apache.commons.lang.math.RandomUtilsTest, org.apache.commons.lang.math.RangeTest, org.apache.commons.lang.math.RangeTest, org.apache.commons.lang.mutable.MutableBooleanTest, org.apache.commons.lang.mutable.MutableBooleanTest, org.apache.commons.lang.mutable.MutableByteTest, org.apache.commons.lang.mutable.MutableByteTest, org.apache.commons.lang.mutable.MutableDoubleTest, org.apache.commons.lang.mutable.MutableDoubleTest, org.apache.commons.lang.mutable.MutableFloatTest, org.apache.commons.lang.mutable.MutableFloatTest, org.apache.commons.lang.mutable.MutableIntTest, org.apache.commons.lang.mutable.MutableIntTest, org.apache.commons.lang.mutable.MutableLongTest, org.apache.commons.lang.mutable.MutableLongTest, org.apache.commons.lang.mutable.MutableObjectTest, org.apache.commons.lang.mutable.MutableObjectTest, org.apache.commons.lang.mutable.MutableShortTest, org.apache.commons.lang.mutable.MutableShortTest, org.apache.commons.lang.reflect.ConstructorUtilsTest, org.apache.commons.lang.reflect.ConstructorUtilsTest, org.apache.commons.lang.reflect.FieldUtilsTest, org.apache.commons.lang.reflect.FieldUtilsTest, org.apache.commons.lang.reflect.MethodUtilsTest, org.apache.commons.lang.reflect.MethodUtilsTest, org.apache.commons.lang.text.CompositeFormatTest, org.apache.commons.lang.text.CompositeFormatTest, org.apache.commons.lang.text.ExtendedMessageFormatTest, org.apache.commons.lang.text.ExtendedMessageFormatTest, org.apache.commons.lang.text.StrBuilderAppendInsertTest, org.apache.commons.lang.text.StrBuilderAppendInsertTest, org.apache.commons.lang.text.StrBuilderTest, org.apache.commons.lang.text.StrBuilderTest, org.apache.commons.lang.text.StrLookupTest, org.apache.commons.lang.text.StrLookupTest, org.apache.commons.lang.text.StrMatcherTest, org.apache.commons.lang.text.StrMatcherTest, org.apache.commons.lang.text.StrSubstitutorTest, org.apache.commons.lang.text.StrSubstitutorTest, org.apache.commons.lang.text.StrTokenizerTest, org.apache.commons.lang.text.StrTokenizerTest, org.apache.commons.lang.time.DateFormatUtilsTest, org.apache.commons.lang.time.DateFormatUtilsTest, org.apache.commons.lang.time.DateUtilsFragmentTest, org.apache.commons.lang.time.DateUtilsFragmentTest, org.apache.commons.lang.time.DateUtilsTest, org.apache.commons.lang.time.DateUtilsTest, org.apache.commons.lang.time.DurationFormatUtilsTest, org.apache.commons.lang.time.DurationFormatUtilsTest, org.apache.commons.lang.time.FastDateFormatTest, org.apache.commons.lang.time.FastDateFormatTest, org.apache.commons.lang.time.StopWatchTest, org.apache.commons.lang.time.StopWatchTest]
04:51:38.206 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=true, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='/home/wp/RepairThemAll/script/../libs/z3/build/z3', projectSources=[src/java], projectClasspath='[Ljava.net.URL;@4ec6a292', projectTests=[org.apache.commons.lang.ArrayUtilsAddTest, org.apache.commons.lang.ArrayUtilsAddTest, org.apache.commons.lang.ArrayUtilsRemoveTest, org.apache.commons.lang.ArrayUtilsRemoveTest, org.apache.commons.lang.ArrayUtilsTest, org.apache.commons.lang.ArrayUtilsTest, org.apache.commons.lang.BitFieldTest, org.apache.commons.lang.BitFieldTest, org.apache.commons.lang.BooleanUtilsTest, org.apache.commons.lang.BooleanUtilsTest, org.apache.commons.lang.CharEncodingTest, org.apache.commons.lang.CharEncodingTest, org.apache.commons.lang.CharRangeTest, org.apache.commons.lang.CharRangeTest, org.apache.commons.lang.CharSetTest, org.apache.commons.lang.CharSetTest, org.apache.commons.lang.CharSetUtilsTest, org.apache.commons.lang.CharSetUtilsTest, org.apache.commons.lang.CharUtilsTest, org.apache.commons.lang.CharUtilsTest, org.apache.commons.lang.ClassUtilsTest, org.apache.commons.lang.ClassUtilsTest, org.apache.commons.lang.EntitiesPerformanceTest, org.apache.commons.lang.EntitiesPerformanceTest, org.apache.commons.lang.EntitiesTest, org.apache.commons.lang.EntitiesTest, org.apache.commons.lang.IllegalClassExceptionTest, org.apache.commons.lang.IllegalClassExceptionTest, org.apache.commons.lang.IncompleteArgumentExceptionTest, org.apache.commons.lang.IncompleteArgumentExceptionTest, org.apache.commons.lang.IntHashMapTest, org.apache.commons.lang.IntHashMapTest, org.apache.commons.lang.LocaleUtilsTest, org.apache.commons.lang.LocaleUtilsTest, org.apache.commons.lang.NotImplementedExceptionTest, org.apache.commons.lang.NotImplementedExceptionTest, org.apache.commons.lang.NullArgumentExceptionTest, org.apache.commons.lang.NullArgumentExceptionTest, org.apache.commons.lang.NumberRangeTest, org.apache.commons.lang.NumberRangeTest, org.apache.commons.lang.NumberUtilsTest, org.apache.commons.lang.NumberUtilsTest, org.apache.commons.lang.ObjectUtilsTest, org.apache.commons.lang.ObjectUtilsTest, org.apache.commons.lang.RandomStringUtilsTest, org.apache.commons.lang.RandomStringUtilsTest, org.apache.commons.lang.SerializationUtilsTest, org.apache.commons.lang.SerializationUtilsTest, org.apache.commons.lang.StringEscapeUtilsTest, org.apache.commons.lang.StringEscapeUtilsTest, org.apache.commons.lang.StringUtilsEqualsIndexOfTest, org.apache.commons.lang.StringUtilsEqualsIndexOfTest, org.apache.commons.lang.StringUtilsIsTest, org.apache.commons.lang.StringUtilsIsTest, org.apache.commons.lang.StringUtilsStartsEndsWithTest, org.apache.commons.lang.StringUtilsStartsEndsWithTest, org.apache.commons.lang.StringUtilsSubstringTest, org.apache.commons.lang.StringUtilsSubstringTest, org.apache.commons.lang.StringUtilsTest, org.apache.commons.lang.StringUtilsTest, org.apache.commons.lang.StringUtilsTrimEmptyTest, org.apache.commons.lang.StringUtilsTrimEmptyTest, org.apache.commons.lang.SystemUtilsTest, org.apache.commons.lang.SystemUtilsTest, org.apache.commons.lang.UnhandledExceptionTest, org.apache.commons.lang.UnhandledExceptionTest, org.apache.commons.lang.ValidateTest, org.apache.commons.lang.ValidateTest, org.apache.commons.lang.WordUtilsTest, org.apache.commons.lang.WordUtilsTest, org.apache.commons.lang.builder.CompareToBuilderTest, org.apache.commons.lang.builder.CompareToBuilderTest, org.apache.commons.lang.builder.DefaultToStringStyleTest, org.apache.commons.lang.builder.DefaultToStringStyleTest, org.apache.commons.lang.builder.EqualsBuilderTest, org.apache.commons.lang.builder.EqualsBuilderTest, org.apache.commons.lang.builder.HashCodeBuilderAndEqualsBuilderTest, org.apache.commons.lang.builder.HashCodeBuilderAndEqualsBuilderTest, org.apache.commons.lang.builder.HashCodeBuilderTest, org.apache.commons.lang.builder.HashCodeBuilderTest, org.apache.commons.lang.builder.MultiLineToStringStyleTest, org.apache.commons.lang.builder.MultiLineToStringStyleTest, org.apache.commons.lang.builder.NoFieldNamesToStringStyleTest, org.apache.commons.lang.builder.NoFieldNamesToStringStyleTest, org.apache.commons.lang.builder.ReflectionToStringBuilderExcludeTest, org.apache.commons.lang.builder.ReflectionToStringBuilderExcludeTest, org.apache.commons.lang.builder.ShortPrefixToStringStyleTest, org.apache.commons.lang.builder.ShortPrefixToStringStyleTest, org.apache.commons.lang.builder.SimpleToStringStyleTest, org.apache.commons.lang.builder.SimpleToStringStyleTest, org.apache.commons.lang.builder.StandardToStringStyleTest, org.apache.commons.lang.builder.StandardToStringStyleTest, org.apache.commons.lang.builder.ToStringBuilderTest, org.apache.commons.lang.builder.ToStringBuilderTest, org.apache.commons.lang.builder.ToStringStyleTest, org.apache.commons.lang.builder.ToStringStyleTest, org.apache.commons.lang.enum.EnumTest, org.apache.commons.lang.enum.EnumTest, org.apache.commons.lang.enum.EnumUtilsTest, org.apache.commons.lang.enum.EnumUtilsTest, org.apache.commons.lang.enum.ValuedEnumTest, org.apache.commons.lang.enum.ValuedEnumTest, org.apache.commons.lang.enums.EnumEqualsTest, org.apache.commons.lang.enums.EnumEqualsTest, org.apache.commons.lang.enums.EnumTest, org.apache.commons.lang.enums.EnumTest, org.apache.commons.lang.enums.EnumUtilsTest, org.apache.commons.lang.enums.EnumUtilsTest, org.apache.commons.lang.enums.ValuedEnumTest, org.apache.commons.lang.enums.ValuedEnumTest, org.apache.commons.lang.exception.ExceptionUtilsTestCase, org.apache.commons.lang.exception.ExceptionUtilsTestCase, org.apache.commons.lang.exception.NestableDelegateTestCase, org.apache.commons.lang.exception.NestableDelegateTestCase, org.apache.commons.lang.exception.NestableErrorTestCase, org.apache.commons.lang.exception.NestableErrorTestCase, org.apache.commons.lang.exception.NestableExceptionTestCase, org.apache.commons.lang.exception.NestableExceptionTestCase, org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase, org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase, org.apache.commons.lang.math.DoubleRangeTest, org.apache.commons.lang.math.DoubleRangeTest, org.apache.commons.lang.math.FloatRangeTest, org.apache.commons.lang.math.FloatRangeTest, org.apache.commons.lang.math.FractionTest, org.apache.commons.lang.math.FractionTest, org.apache.commons.lang.math.IEEE754rUtilsTest, org.apache.commons.lang.math.IEEE754rUtilsTest, org.apache.commons.lang.math.IntRangeTest, org.apache.commons.lang.math.IntRangeTest, org.apache.commons.lang.math.LongRangeTest, org.apache.commons.lang.math.LongRangeTest, org.apache.commons.lang.math.NumberRangeTest, org.apache.commons.lang.math.NumberRangeTest, org.apache.commons.lang.math.NumberUtilsTest, org.apache.commons.lang.math.NumberUtilsTest, org.apache.commons.lang.math.RandomUtilsTest, org.apache.commons.lang.math.RandomUtilsTest, org.apache.commons.lang.math.RangeTest, org.apache.commons.lang.math.RangeTest, org.apache.commons.lang.mutable.MutableBooleanTest, org.apache.commons.lang.mutable.MutableBooleanTest, org.apache.commons.lang.mutable.MutableByteTest, org.apache.commons.lang.mutable.MutableByteTest, org.apache.commons.lang.mutable.MutableDoubleTest, org.apache.commons.lang.mutable.MutableDoubleTest, org.apache.commons.lang.mutable.MutableFloatTest, org.apache.commons.lang.mutable.MutableFloatTest, org.apache.commons.lang.mutable.MutableIntTest, org.apache.commons.lang.mutable.MutableIntTest, org.apache.commons.lang.mutable.MutableLongTest, org.apache.commons.lang.mutable.MutableLongTest, org.apache.commons.lang.mutable.MutableObjectTest, org.apache.commons.lang.mutable.MutableObjectTest, org.apache.commons.lang.mutable.MutableShortTest, org.apache.commons.lang.mutable.MutableShortTest, org.apache.commons.lang.reflect.ConstructorUtilsTest, org.apache.commons.lang.reflect.ConstructorUtilsTest, org.apache.commons.lang.reflect.FieldUtilsTest, org.apache.commons.lang.reflect.FieldUtilsTest, org.apache.commons.lang.reflect.MethodUtilsTest, org.apache.commons.lang.reflect.MethodUtilsTest, org.apache.commons.lang.text.CompositeFormatTest, org.apache.commons.lang.text.CompositeFormatTest, org.apache.commons.lang.text.ExtendedMessageFormatTest, org.apache.commons.lang.text.ExtendedMessageFormatTest, org.apache.commons.lang.text.StrBuilderAppendInsertTest, org.apache.commons.lang.text.StrBuilderAppendInsertTest, org.apache.commons.lang.text.StrBuilderTest, org.apache.commons.lang.text.StrBuilderTest, org.apache.commons.lang.text.StrLookupTest, org.apache.commons.lang.text.StrLookupTest, org.apache.commons.lang.text.StrMatcherTest, org.apache.commons.lang.text.StrMatcherTest, org.apache.commons.lang.text.StrSubstitutorTest, org.apache.commons.lang.text.StrSubstitutorTest, org.apache.commons.lang.text.StrTokenizerTest, org.apache.commons.lang.text.StrTokenizerTest, org.apache.commons.lang.time.DateFormatUtilsTest, org.apache.commons.lang.time.DateFormatUtilsTest, org.apache.commons.lang.time.DateUtilsFragmentTest, org.apache.commons.lang.time.DateUtilsFragmentTest, org.apache.commons.lang.time.DateUtilsTest, org.apache.commons.lang.time.DateUtilsTest, org.apache.commons.lang.time.DurationFormatUtilsTest, org.apache.commons.lang.time.DurationFormatUtilsTest, org.apache.commons.lang.time.FastDateFormatTest, org.apache.commons.lang.time.FastDateFormatTest, org.apache.commons.lang.time.StopWatchTest, org.apache.commons.lang.time.StopWatchTest], complianceLevel=3, outputFolder=., json=true}
04:51:38.207 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Available processors (cores): 1
04:51:38.211 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Free memory: 957 MB
04:51:38.211 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Maximum memory: 989 MB
04:51:38.212 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Total memory available to JVM: 989 MB
04:51:38.212 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Java version: 1.8.0_71
04:51:38.213 [main] INFO  fr.inria.lille.repair.nopol.NoPol - JAVA_HOME: /home/wp/tool/jdk1.8.0_71/bin/
04:51:38.213 [main] INFO  fr.inria.lille.repair.nopol.NoPol - PATH: /home/wp/tool/jdk1.8.0_71/bin/:/home/wp/RepairThemAll/benchmarks/defects4j/framework/bin:/home/wp/tool/gradle-5.4.1/bin:/home/wp/tool/apache-maven-3.5.2/bin:/home/wp/tool/jdk1.8.0_71//bin:/home/wp/tool/apache-ant-1.9.14/bin:/home/wp/tool/jdk1.8.0_71//bin:/home/wp/tool/jdk1.8.0_71/jre/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games
04:52:04.147 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #185
04:52:04.147 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.NumberUtils:139 which is executed by 3 tests
-1898474807
04:52:04.521 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
04:52:05.916 [pool-3-thread-1] DEBUG tests.output - Failing tests with false: 
[testLang457(org.apache.commons.lang.NumberUtilsTest): String index out of range: 0]
04:52:05.917 [pool-3-thread-1] DEBUG tests.output - Failing tests with true: 
[testLang457(org.apache.commons.lang.NumberUtilsTest): String index out of range: 0]
04:52:05.917 [pool-3-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.NumberUtils:139.
04:52:05.917 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
04:52:06.389 [pool-7-thread-1] DEBUG tests.output - Failing tests with false: 
[testLang457(org.apache.commons.lang.NumberUtilsTest): String index out of range: 0]
04:52:06.389 [pool-7-thread-1] DEBUG tests.output - Failing tests with true: 
[testLang457(org.apache.commons.lang.NumberUtilsTest): NumberFormatException was expected for l]
04:52:06.389 [pool-7-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.NumberUtils:139.
04:52:06.389 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #186
04:52:06.389 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.NumberUtils:142 which is executed by 3 tests
-1898474807
04:52:06.538 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
04:52:07.149 [pool-11-thread-1] DEBUG tests.output - Failing tests with false: 
[testLang457(org.apache.commons.lang.NumberUtilsTest): String index out of range: 0]
04:52:07.149 [pool-11-thread-1] DEBUG tests.output - Failing tests with true: 
[testLang457(org.apache.commons.lang.NumberUtilsTest): String index out of range: 0]
04:52:07.149 [pool-11-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.NumberUtils:142.
04:52:07.149 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
04:52:07.770 [pool-15-thread-1] DEBUG f.i.l.c.s.ConstraintBasedSynthesis - Operators:
04:52:07.838 [pool-15-thread-1] DEBUG f.i.l.c.s.ConstraintBasedSynthesis - Operators:
== of arity: 2
!= of arity: 2
< of arity: 2
<= of arity: 2
04:52:07.997 [pool-15-thread-1] DEBUG f.i.l.c.s.ConstraintBasedSynthesis - Operators:
== of arity: 2
!= of arity: 2
< of arity: 2
<= of arity: 2
! of arity: 1
|| of arity: 2
&& of arity: 2
04:52:08.550 [pool-15-thread-1] DEBUG f.i.l.c.s.ConstraintBasedSynthesis - Operators:
== of arity: 2
!= of arity: 2
< of arity: 2
<= of arity: 2
! of arity: 1
|| of arity: 2
&& of arity: 2
== of arity: 2
!= of arity: 2
< of arity: 2
<= of arity: 2
04:52:10.622 [pool-15-thread-1] DEBUG f.i.l.c.s.ConstraintBasedSynthesis - Operators:
== of arity: 2
!= of arity: 2
< of arity: 2
<= of arity: 2
! of arity: 1
|| of arity: 2
&& of arity: 2
== of arity: 2
!= of arity: 2
< of arity: 2
<= of arity: 2
! of arity: 1
|| of arity: 2
&& of arity: 2
04:52:19.563 [pool-15-thread-1] DEBUG f.i.l.c.s.ConstraintBasedSynthesis - Failed code synthesis, returning NullCodeGenesis
04:52:19.565 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #187
04:52:19.565 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.NumberUtils:145 which is executed by 3 tests
-1898474807
04:52:19.715 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
04:52:20.059 [pool-27-thread-1] DEBUG tests.output - Failing tests with false: 
[testLang457(org.apache.commons.lang.NumberUtilsTest): String index out of range: 0]
04:52:20.060 [pool-27-thread-1] DEBUG tests.output - Failing tests with true: 
[testLang457(org.apache.commons.lang.NumberUtilsTest): String index out of range: 0]
04:52:20.060 [pool-27-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.NumberUtils:145.
04:52:20.060 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
04:52:20.375 [pool-31-thread-1] DEBUG tests.output - Failing tests with false: 
[testLang457(org.apache.commons.lang.NumberUtilsTest): String index out of range: 0]
04:52:20.375 [pool-31-thread-1] DEBUG tests.output - Failing tests with true: 
[testLang457(org.apache.commons.lang.NumberUtilsTest): NumberFormatException was expected for l]
04:52:20.375 [pool-31-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.NumberUtils:145.
04:52:20.376 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #188
04:52:20.376 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.NumberUtils:152 which is executed by 3 tests
-1898474807
04:52:20.528 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
04:52:20.826 [pool-35-thread-1] DEBUG tests.output - Failing tests with false: 
[testLang457(org.apache.commons.lang.NumberUtilsTest): String index out of range: 0]
04:52:20.826 [pool-35-thread-1] DEBUG tests.output - Failing tests with true: 
[testLang457(org.apache.commons.lang.NumberUtilsTest): String index out of range: 0]
04:52:20.826 [pool-35-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.NumberUtils:152.
04:52:20.826 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
04:52:21.299 [pool-39-thread-1] DEBUG f.i.l.c.s.ConstraintBasedSynthesis - Operators:
04:52:21.337 [pool-39-thread-1] DEBUG f.i.l.c.s.ConstraintBasedSynthesis - Operators:
== of arity: 2
!= of arity: 2
< of arity: 2
<= of arity: 2
04:52:21.469 [pool-39-thread-1] DEBUG f.i.l.c.s.ConstraintBasedSynthesis - Operators:
== of arity: 2
!= of arity: 2
< of arity: 2
<= of arity: 2
! of arity: 1
|| of arity: 2
&& of arity: 2
04:52:22.411 [pool-39-thread-1] DEBUG f.i.l.c.s.ConstraintBasedSynthesis - Operators:
== of arity: 2
!= of arity: 2
< of arity: 2
<= of arity: 2
! of arity: 1
|| of arity: 2
&& of arity: 2
== of arity: 2
!= of arity: 2
< of arity: 2
<= of arity: 2
04:52:24.128 [pool-39-thread-1] DEBUG f.i.l.c.s.ConstraintBasedSynthesis - Operators:
== of arity: 2
!= of arity: 2
< of arity: 2
<= of arity: 2
! of arity: 1
|| of arity: 2
&& of arity: 2
== of arity: 2
!= of arity: 2
< of arity: 2
<= of arity: 2
! of arity: 1
|| of arity: 2
&& of arity: 2
04:52:36.010 [pool-39-thread-1] DEBUG f.i.l.c.s.ConstraintBasedSynthesis - Failed code synthesis, returning NullCodeGenesis
04:52:36.011 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #189
04:52:36.011 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.NumberUtils:155 which is executed by 3 tests
-1898474807
04:52:36.146 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #190
04:52:36.146 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.NumberUtils:159 which is executed by 3 tests
-1898474807
04:52:36.265 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #191
04:52:36.266 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.NumberUtils:160 which is executed by 3 tests
-1898474807
04:52:36.360 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #192
04:52:36.369 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.NumberUtils:162 which is executed by 3 tests
-1898474807
04:52:36.516 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
04:52:36.912 [pool-51-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
NumberUtils.java:81: error: variable mant might not have been initialized
            boolean allZeros = org.apache.commons.lang.NumberUtils.isAllZeros(mant) && org.apache.commons.lang.NumberUtils.isAllZeros(exp);
                                                                              ^
NumberUtils.java:85: error: variable dec might not have been initialized
                    if (((dec == null) && (exp == null)) && (((numeric.charAt(0) == '-') && org.apache.commons.lang.NumberUtils.isDigits(numeric.substring(1))) || org.apache.commons.lang.NumberUtils.isDigits(numeric))) {
                          ^
NumberUtils.java:124: error: variable dec might not have been initialized
            if ((dec == null) && (exp == null)) {
                 ^
NumberUtils.java:135: error: variable mant might not have been initialized
                boolean allZeros = org.apache.commons.lang.NumberUtils.isAllZeros(mant) && org.apache.commons.lang.NumberUtils.isAllZeros(exp);
                                                                                  ^
04:52:36.953 [pool-51-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public final class NumberUtils {
    public NumberUtils() {
        super();
    }

    public static int stringToInt(java.lang.String str) {
        return org.apache.commons.lang.NumberUtils.stringToInt(str, 0);
    }

    public static int stringToInt(java.lang.String str, int defaultValue) {
        try {
            return java.lang.Integer.parseInt(str);
        } catch (java.lang.NumberFormatException nfe) {
            return defaultValue;
        }
    }

    public static java.lang.Number createNumber(java.lang.String val) throws java.lang.NumberFormatException {
        if (val == null) {
            return null;
        }
        if (val.length() == 0) {
            throw new java.lang.NumberFormatException("\"\" is not a valid number.");
        }
        if (val.startsWith("--")) {
            return null;
        }
        if (val.startsWith("0x") || val.startsWith("-0x")) {
            return org.apache.commons.lang.NumberUtils.createInteger(val);
        }
        char lastChar = val.charAt(val.length() - 1);
        java.lang.String mant;
        java.lang.String dec;
        java.lang.String exp;
        int decPos = val.indexOf('.');
        int expPos = (val.indexOf('e') + val.indexOf('E')) + 1;
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(8).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectionStarts();
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("decPos",decPos);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("val",val);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("1",1);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("lastChar",lastChar);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("decPos > (-1)",decPos > (-1));} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("expPos",expPos);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("(-1)",(-1));} catch (Exception ex1) {ex1.printStackTrace();};
            fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectionEnds();
        }
        if (runtimeAngelicValue) if (decPos > (-1)) {
            if (expPos > (-1)) {
                if (expPos < decPos) {
                    throw new java.lang.NumberFormatException(val + " is not a valid number.");
                }
                dec = val.substring(decPos + 1, expPos);
            } else {
                dec = val.substring(decPos + 1);
            }
            mant = val.substring(0, decPos);
        } else {
            if (expPos > (-1)) {
                mant = val.substring(0, expPos);
            } else {
                mant = val;
            }
            dec = null;
        }
        if (!java.lang.Character.isDigit(lastChar)) {
            if ((expPos > (-1)) && (expPos < (val.length() - 1))) {
                exp = val.substring(expPos + 1, val.length() - 1);
            } else {
                exp = null;
            }
            java.lang.String numeric = val.substring(0, val.length() - 1);
            boolean allZeros = org.apache.commons.lang.NumberUtils.isAllZeros(mant) && org.apache.commons.lang.NumberUtils.isAllZeros(exp);
            switch (lastChar) {
                case 'l' :
                case 'L' :
                    if (((dec == null) && (exp == null)) && (((numeric.charAt(0) == '-') && org.apache.commons.lang.NumberUtils.isDigits(numeric.substring(1))) || org.apache.commons.lang.NumberUtils.isDigits(numeric))) {
                        try {
                            return org.apache.commons.lang.NumberUtils.createLong(numeric);
                        } catch (java.lang.NumberFormatException nfe) {
                        }
                        return org.apache.commons.lang.NumberUtils.createBigInteger(numeric);
                    }
                    throw new java.lang.NumberFormatException(val + " is not a valid number.");
                case 'f' :
                case 'F' :
                    try {
                        java.lang.Float f = org.apache.commons.lang.NumberUtils.createFloat(numeric);
                        if (!(f.isInfinite() || ((f.floatValue() == 0.0F) && (!allZeros)))) {
                            return f;
                        }
                    } catch (java.lang.NumberFormatException e) {
                    }
                case 'd' :
                case 'D' :
                    try {
                        java.lang.Double d = org.apache.commons.lang.NumberUtils.createDouble(numeric);
                        if (!(d.isInfinite() || ((d.floatValue() == 0.0) && (!allZeros)))) {
                            return d;
                        }
                    } catch (java.lang.NumberFormatException nfe) {
                    }
                    try {
                        return org.apache.commons.lang.NumberUtils.createBigDecimal(numeric);
                    } catch (java.lang.NumberFormatException e) {
                    }
                default :
                    throw new java.lang.NumberFormatException(val + " is not a valid number.");
            }
        } else {
            if ((expPos > (-1)) && (expPos < (val.length() - 1))) {
                exp = val.substring(expPos + 1, val.length());
            } else {
                exp = null;
            }
            if ((dec == null) && (exp == null)) {
                try {
                    return org.apache.commons.lang.NumberUtils.createInteger(val);
                } catch (java.lang.NumberFormatException nfe) {
                }
                try {
                    return org.apache.commons.lang.NumberUtils.createLong(val);
                } catch (java.lang.NumberFormatException nfe) {
                }
                return org.apache.commons.lang.NumberUtils.createBigInteger(val);
            } else {
                boolean allZeros = org.apache.commons.lang.NumberUtils.isAllZeros(mant) && org.apache.commons.lang.NumberUtils.isAllZeros(exp);
                try {
                    java.lang.Float f = org.apache.commons.lang.NumberUtils.createFloat(val);
                    if (!(f.isInfinite() || ((f.floatValue() == 0.0F) && (!allZeros)))) {
                        return f;
                    }
                } catch (java.lang.NumberFormatException nfe) {
                }
                try {
                    java.lang.Double d = org.apache.commons.lang.NumberUtils.createDouble(val);
                    if (!(d.isInfinite() || ((d.doubleValue() == 0.0) && (!allZeros)))) {
                        return d;
                    }
                } catch (java.lang.NumberFormatException nfe) {
                }
                return org.apache.commons.lang.NumberUtils.createBigDecimal(val);
            }
        }
    }

    private static boolean isAllZeros(java.lang.String s) {
        if (s == null) {
            return true;
        }
        for (int i = s.length() - 1; i >= 0; i--) {
            if (s.charAt(i) != '0') {
                return false;
            }
        }
        return s.length() > 0;
    }

    public static java.lang.Float createFloat(java.lang.String val) {
        return java.lang.Float.valueOf(val);
    }

    public static java.lang.Double createDouble(java.lang.String val) {
        return java.lang.Double.valueOf(val);
    }

    public static java.lang.Integer createInteger(java.lang.String val) {
        return java.lang.Integer.decode(val);
    }

    public static java.lang.Long createLong(java.lang.String val) {
        return java.lang.Long.valueOf(val);
    }

    public static java.math.BigInteger createBigInteger(java.lang.String val) {
        java.math.BigInteger bi = new java.math.BigInteger(val);
        return bi;
    }

    public static java.math.BigDecimal createBigDecimal(java.lang.String val) {
        java.math.BigDecimal bd = new java.math.BigDecimal(val);
        return bd;
    }

    public static long minimum(long a, long b, long c) {
        if (b < a) {
            a = b;
        }
        if (c < a) {
            a = c;
        }
        return a;
    }

    public static int minimum(int a, int b, int c) {
        if (b < a) {
            a = b;
        }
        if (c < a) {
            a = c;
        }
        return a;
    }

    public static long maximum(long a, long b, long c) {
        if (b > a) {
            a = b;
        }
        if (c > a) {
            a = c;
        }
        return a;
    }

    public static int maximum(int a, int b, int c) {
        if (b > a) {
            a = b;
        }
        if (c > a) {
            a = c;
        }
        return a;
    }

    public static int compare(double lhs, double rhs) {
        if (lhs < rhs) {
            return -1;
        }
        if (lhs > rhs) {
            return +1;
        }
        long lhsBits = java.lang.Double.doubleToLongBits(lhs);
        long rhsBits = java.lang.Double.doubleToLongBits(rhs);
        if (lhsBits == rhsBits) {
            return 0;
        }
        if (lhsBits < rhsBits) {
            return -1;
        } else {
            return +1;
        }
    }

    public static int compare(float lhs, float rhs) {
        if (lhs < rhs) {
            return -1;
        }
        if (lhs > rhs) {
            return +1;
        }
        int lhsBits = java.lang.Float.floatToIntBits(lhs);
        int rhsBits = java.lang.Float.floatToIntBits(rhs);
        if (lhsBits == rhsBits) {
            return 0;
        }
        if (lhsBits < rhsBits) {
            return -1;
        } else {
            return +1;
        }
    }

    public static boolean isDigits(java.lang.String str) {
        if ((str == null) || (str.length() == 0)) {
            return false;
        }
        for (int i = 0; i < str.length(); i++) {
            if (!java.lang.Character.isDigit(str.charAt(i))) {
                return false;
            }
        }
        return true;
    }

    public static boolean isNumber(java.lang.String str) {
        if (org.apache.commons.lang.StringUtils.isEmpty(str)) {
            return false;
        }
        char[] chars = str.toCharArray();
        int sz = chars.length;
        boolean hasExp = false;
        boolean hasDecPoint = false;
        boolean allowSigns = false;
        boolean foundDigit = false;
        int start = (chars[0] == '-') ? 1 : 0;
        if (sz > (start + 1)) {
            if ((chars[start] == '0') && (chars[start + 1] == 'x')) {
                int i = start + 2;
                if (i == sz) {
                    return false;
                }
                for (; i < chars.length; i++) {
                    if ((((chars[i] < '0') || (chars[i] > '9')) && ((chars[i] < 'a') || (chars[i] > 'f'))) && ((chars[i] < 'A') || (chars[i] > 'F'))) {
                        return false;
                    }
                }
                return true;
            }
        }
        sz--;
        int i = start;
        while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
            if ((chars[i] >= '0') && (chars[i] <= '9')) {
                foundDigit = true;
                allowSigns = false;
            } else
                if (chars[i] == '.') {
                    if (hasDecPoint || hasExp) {
                        return false;
                    }
                    hasDecPoint = true;
                } else
                    if ((chars[i] == 'e') || (chars[i] == 'E')) {
                        if (hasExp) {
                            return false;
                        }
                        if (!foundDigit) {
                            return false;
                        }
                        hasExp = true;
                        allowSigns = true;
                    } else
                        if ((chars[i] == '+') || (chars[i] == '-')) {
                            if (!allowSigns) {
                                return false;
                            }
                            allowSigns = false;
                            foundDigit = false;
                        } else {
                            return false;
                        }



            i++;
        } 
        if (i < chars.length) {
            if ((chars[i] >= '0') && (chars[i] <= '9')) {
                return true;
            }
            if ((chars[i] == 'e') || (chars[i] == 'E')) {
                return false;
            }
            if ((!allowSigns) && ((((chars[i] == 'd') || (chars[i] == 'D')) || (chars[i] == 'f')) || (chars[i] == 'F'))) {
                return foundDigit;
            }
            if ((chars[i] == 'l') || (chars[i] == 'L')) {
                return foundDigit && (!hasExp);
            }
            return false;
        }
        return (!allowSigns) && foundDigit;
    }
}
04:52:36.953 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
04:52:36.953 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
04:52:37.340 [pool-53-thread-1] DEBUG tests.output - Failing tests with false: 
[testLang457(org.apache.commons.lang.NumberUtilsTest): String index out of range: 0]
04:52:37.341 [pool-53-thread-1] DEBUG tests.output - Failing tests with true: 
[testLang457(org.apache.commons.lang.NumberUtilsTest): String index out of range: -1]
04:52:37.341 [pool-53-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.NumberUtils:162.
04:52:37.341 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #193
04:52:37.341 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.NumberUtils:174 which is executed by 3 tests
-1898474807
04:52:37.489 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
04:52:37.809 [pool-57-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
NumberUtils.java:81: error: variable mant might not have been initialized
            boolean allZeros = org.apache.commons.lang.NumberUtils.isAllZeros(mant) && org.apache.commons.lang.NumberUtils.isAllZeros(exp);
                                                                              ^
NumberUtils.java:135: error: variable mant might not have been initialized
                boolean allZeros = org.apache.commons.lang.NumberUtils.isAllZeros(mant) && org.apache.commons.lang.NumberUtils.isAllZeros(exp);
                                                                                  ^
04:52:37.828 [pool-57-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public final class NumberUtils {
    public NumberUtils() {
        super();
    }

    public static int stringToInt(java.lang.String str) {
        return org.apache.commons.lang.NumberUtils.stringToInt(str, 0);
    }

    public static int stringToInt(java.lang.String str, int defaultValue) {
        try {
            return java.lang.Integer.parseInt(str);
        } catch (java.lang.NumberFormatException nfe) {
            return defaultValue;
        }
    }

    public static java.lang.Number createNumber(java.lang.String val) throws java.lang.NumberFormatException {
        if (val == null) {
            return null;
        }
        if (val.length() == 0) {
            throw new java.lang.NumberFormatException("\"\" is not a valid number.");
        }
        if (val.startsWith("--")) {
            return null;
        }
        if (val.startsWith("0x") || val.startsWith("-0x")) {
            return org.apache.commons.lang.NumberUtils.createInteger(val);
        }
        char lastChar = val.charAt(val.length() - 1);
        java.lang.String mant;
        java.lang.String dec;
        java.lang.String exp;
        int decPos = val.indexOf('.');
        int expPos = (val.indexOf('e') + val.indexOf('E')) + 1;
        if (decPos > (-1)) {
            if (expPos > (-1)) {
                if (expPos < decPos) {
                    throw new java.lang.NumberFormatException(val + " is not a valid number.");
                }
                dec = val.substring(decPos + 1, expPos);
            } else {
                dec = val.substring(decPos + 1);
            }
            mant = val.substring(0, decPos);
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(10).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("decPos",decPos);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("val",val);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("1",1);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("lastChar",lastChar);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("expPos > (-1)",expPos > (-1));} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("expPos",expPos);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("(-1)",(-1));} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectionEnds();
            }
            if (runtimeAngelicValue) if (expPos > (-1)) {
                mant = val.substring(0, expPos);
            } else {
                mant = val;
            }
            dec = null;
        }
        if (!java.lang.Character.isDigit(lastChar)) {
            if ((expPos > (-1)) && (expPos < (val.length() - 1))) {
                exp = val.substring(expPos + 1, val.length() - 1);
            } else {
                exp = null;
            }
            java.lang.String numeric = val.substring(0, val.length() - 1);
            boolean allZeros = org.apache.commons.lang.NumberUtils.isAllZeros(mant) && org.apache.commons.lang.NumberUtils.isAllZeros(exp);
            switch (lastChar) {
                case 'l' :
                case 'L' :
                    if (((dec == null) && (exp == null)) && (((numeric.charAt(0) == '-') && org.apache.commons.lang.NumberUtils.isDigits(numeric.substring(1))) || org.apache.commons.lang.NumberUtils.isDigits(numeric))) {
                        try {
                            return org.apache.commons.lang.NumberUtils.createLong(numeric);
                        } catch (java.lang.NumberFormatException nfe) {
                        }
                        return org.apache.commons.lang.NumberUtils.createBigInteger(numeric);
                    }
                    throw new java.lang.NumberFormatException(val + " is not a valid number.");
                case 'f' :
                case 'F' :
                    try {
                        java.lang.Float f = org.apache.commons.lang.NumberUtils.createFloat(numeric);
                        if (!(f.isInfinite() || ((f.floatValue() == 0.0F) && (!allZeros)))) {
                            return f;
                        }
                    } catch (java.lang.NumberFormatException e) {
                    }
                case 'd' :
                case 'D' :
                    try {
                        java.lang.Double d = org.apache.commons.lang.NumberUtils.createDouble(numeric);
                        if (!(d.isInfinite() || ((d.floatValue() == 0.0) && (!allZeros)))) {
                            return d;
                        }
                    } catch (java.lang.NumberFormatException nfe) {
                    }
                    try {
                        return org.apache.commons.lang.NumberUtils.createBigDecimal(numeric);
                    } catch (java.lang.NumberFormatException e) {
                    }
                default :
                    throw new java.lang.NumberFormatException(val + " is not a valid number.");
            }
        } else {
            if ((expPos > (-1)) && (expPos < (val.length() - 1))) {
                exp = val.substring(expPos + 1, val.length());
            } else {
                exp = null;
            }
            if ((dec == null) && (exp == null)) {
                try {
                    return org.apache.commons.lang.NumberUtils.createInteger(val);
                } catch (java.lang.NumberFormatException nfe) {
                }
                try {
                    return org.apache.commons.lang.NumberUtils.createLong(val);
                } catch (java.lang.NumberFormatException nfe) {
                }
                return org.apache.commons.lang.NumberUtils.createBigInteger(val);
            } else {
                boolean allZeros = org.apache.commons.lang.NumberUtils.isAllZeros(mant) && org.apache.commons.lang.NumberUtils.isAllZeros(exp);
                try {
                    java.lang.Float f = org.apache.commons.lang.NumberUtils.createFloat(val);
                    if (!(f.isInfinite() || ((f.floatValue() == 0.0F) && (!allZeros)))) {
                        return f;
                    }
                } catch (java.lang.NumberFormatException nfe) {
                }
                try {
                    java.lang.Double d = org.apache.commons.lang.NumberUtils.createDouble(val);
                    if (!(d.isInfinite() || ((d.doubleValue() == 0.0) && (!allZeros)))) {
                        return d;
                    }
                } catch (java.lang.NumberFormatException nfe) {
                }
                return org.apache.commons.lang.NumberUtils.createBigDecimal(val);
            }
        }
    }

    private static boolean isAllZeros(java.lang.String s) {
        if (s == null) {
            return true;
        }
        for (int i = s.length() - 1; i >= 0; i--) {
            if (s.charAt(i) != '0') {
                return false;
            }
        }
        return s.length() > 0;
    }

    public static java.lang.Float createFloat(java.lang.String val) {
        return java.lang.Float.valueOf(val);
    }

    public static java.lang.Double createDouble(java.lang.String val) {
        return java.lang.Double.valueOf(val);
    }

    public static java.lang.Integer createInteger(java.lang.String val) {
        return java.lang.Integer.decode(val);
    }

    public static java.lang.Long createLong(java.lang.String val) {
        return java.lang.Long.valueOf(val);
    }

    public static java.math.BigInteger createBigInteger(java.lang.String val) {
        java.math.BigInteger bi = new java.math.BigInteger(val);
        return bi;
    }

    public static java.math.BigDecimal createBigDecimal(java.lang.String val) {
        java.math.BigDecimal bd = new java.math.BigDecimal(val);
        return bd;
    }

    public static long minimum(long a, long b, long c) {
        if (b < a) {
            a = b;
        }
        if (c < a) {
            a = c;
        }
        return a;
    }

    public static int minimum(int a, int b, int c) {
        if (b < a) {
            a = b;
        }
        if (c < a) {
            a = c;
        }
        return a;
    }

    public static long maximum(long a, long b, long c) {
        if (b > a) {
            a = b;
        }
        if (c > a) {
            a = c;
        }
        return a;
    }

    public static int maximum(int a, int b, int c) {
        if (b > a) {
            a = b;
        }
        if (c > a) {
            a = c;
        }
        return a;
    }

    public static int compare(double lhs, double rhs) {
        if (lhs < rhs) {
            return -1;
        }
        if (lhs > rhs) {
            return +1;
        }
        long lhsBits = java.lang.Double.doubleToLongBits(lhs);
        long rhsBits = java.lang.Double.doubleToLongBits(rhs);
        if (lhsBits == rhsBits) {
            return 0;
        }
        if (lhsBits < rhsBits) {
            return -1;
        } else {
            return +1;
        }
    }

    public static int compare(float lhs, float rhs) {
        if (lhs < rhs) {
            return -1;
        }
        if (lhs > rhs) {
            return +1;
        }
        int lhsBits = java.lang.Float.floatToIntBits(lhs);
        int rhsBits = java.lang.Float.floatToIntBits(rhs);
        if (lhsBits == rhsBits) {
            return 0;
        }
        if (lhsBits < rhsBits) {
            return -1;
        } else {
            return +1;
        }
    }

    public static boolean isDigits(java.lang.String str) {
        if ((str == null) || (str.length() == 0)) {
            return false;
        }
        for (int i = 0; i < str.length(); i++) {
            if (!java.lang.Character.isDigit(str.charAt(i))) {
                return false;
            }
        }
        return true;
    }

    public static boolean isNumber(java.lang.String str) {
        if (org.apache.commons.lang.StringUtils.isEmpty(str)) {
            return false;
        }
        char[] chars = str.toCharArray();
        int sz = chars.length;
        boolean hasExp = false;
        boolean hasDecPoint = false;
        boolean allowSigns = false;
        boolean foundDigit = false;
        int start = (chars[0] == '-') ? 1 : 0;
        if (sz > (start + 1)) {
            if ((chars[start] == '0') && (chars[start + 1] == 'x')) {
                int i = start + 2;
                if (i == sz) {
                    return false;
                }
                for (; i < chars.length; i++) {
                    if ((((chars[i] < '0') || (chars[i] > '9')) && ((chars[i] < 'a') || (chars[i] > 'f'))) && ((chars[i] < 'A') || (chars[i] > 'F'))) {
                        return false;
                    }
                }
                return true;
            }
        }
        sz--;
        int i = start;
        while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
            if ((chars[i] >= '0') && (chars[i] <= '9')) {
                foundDigit = true;
                allowSigns = false;
            } else
                if (chars[i] == '.') {
                    if (hasDecPoint || hasExp) {
                        return false;
                    }
                    hasDecPoint = true;
                } else
                    if ((chars[i] == 'e') || (chars[i] == 'E')) {
                        if (hasExp) {
                            return false;
                        }
                        if (!foundDigit) {
                            return false;
                        }
                        hasExp = true;
                        allowSigns = true;
                    } else
                        if ((chars[i] == '+') || (chars[i] == '-')) {
                            if (!allowSigns) {
                                return false;
                            }
                            allowSigns = false;
                            foundDigit = false;
                        } else {
                            return false;
                        }



            i++;
        } 
        if (i < chars.length) {
            if ((chars[i] >= '0') && (chars[i] <= '9')) {
                return true;
            }
            if ((chars[i] == 'e') || (chars[i] == 'E')) {
                return false;
            }
            if ((!allowSigns) && ((((chars[i] == 'd') || (chars[i] == 'D')) || (chars[i] == 'f')) || (chars[i] == 'F'))) {
                return foundDigit;
            }
            if ((chars[i] == 'l') || (chars[i] == 'L')) {
                return foundDigit && (!hasExp);
            }
            return false;
        }
        return (!allowSigns) && foundDigit;
    }
}
04:52:37.829 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
04:52:37.829 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
04:52:38.193 [pool-59-thread-1] DEBUG tests.output - Failing tests with false: 
[testLang457(org.apache.commons.lang.NumberUtilsTest): String index out of range: 0]
04:52:38.193 [pool-59-thread-1] DEBUG tests.output - Failing tests with true: 
[testLang457(org.apache.commons.lang.NumberUtilsTest): String index out of range: -1]
04:52:38.193 [pool-59-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.NumberUtils:174.
04:52:38.193 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #194
04:52:38.193 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.NumberUtils:177 which is executed by 3 tests
-1898474807
04:52:38.323 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
04:52:38.716 [pool-63-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
NumberUtils.java:80: error: variable mant might not have been initialized
            boolean allZeros = org.apache.commons.lang.NumberUtils.isAllZeros(mant) && org.apache.commons.lang.NumberUtils.isAllZeros(exp);
                                                                              ^
NumberUtils.java:134: error: variable mant might not have been initialized
                boolean allZeros = org.apache.commons.lang.NumberUtils.isAllZeros(mant) && org.apache.commons.lang.NumberUtils.isAllZeros(exp);
                                                                                  ^
04:52:38.747 [pool-63-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public final class NumberUtils {
    public NumberUtils() {
        super();
    }

    public static int stringToInt(java.lang.String str) {
        return org.apache.commons.lang.NumberUtils.stringToInt(str, 0);
    }

    public static int stringToInt(java.lang.String str, int defaultValue) {
        try {
            return java.lang.Integer.parseInt(str);
        } catch (java.lang.NumberFormatException nfe) {
            return defaultValue;
        }
    }

    public static java.lang.Number createNumber(java.lang.String val) throws java.lang.NumberFormatException {
        if (val == null) {
            return null;
        }
        if (val.length() == 0) {
            throw new java.lang.NumberFormatException("\"\" is not a valid number.");
        }
        if (val.startsWith("--")) {
            return null;
        }
        if (val.startsWith("0x") || val.startsWith("-0x")) {
            return org.apache.commons.lang.NumberUtils.createInteger(val);
        }
        char lastChar = val.charAt(val.length() - 1);
        java.lang.String mant;
        java.lang.String dec;
        java.lang.String exp;
        int decPos = val.indexOf('.');
        int expPos = (val.indexOf('e') + val.indexOf('E')) + 1;
        if (decPos > (-1)) {
            if (expPos > (-1)) {
                if (expPos < decPos) {
                    throw new java.lang.NumberFormatException(val + " is not a valid number.");
                }
                dec = val.substring(decPos + 1, expPos);
            } else {
                dec = val.substring(decPos + 1);
            }
            mant = val.substring(0, decPos);
        } else {
            if (expPos > (-1)) {
                mant = val.substring(0, expPos);
            } else {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(12).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("decPos",decPos);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("val",val);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("expPos",expPos);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("lastChar",lastChar);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectionEnds();
                }
                if (runtimeAngelicValue)
                    mant = val;

            }
            dec = null;
        }
        if (!java.lang.Character.isDigit(lastChar)) {
            if ((expPos > (-1)) && (expPos < (val.length() - 1))) {
                exp = val.substring(expPos + 1, val.length() - 1);
            } else {
                exp = null;
            }
            java.lang.String numeric = val.substring(0, val.length() - 1);
            boolean allZeros = org.apache.commons.lang.NumberUtils.isAllZeros(mant) && org.apache.commons.lang.NumberUtils.isAllZeros(exp);
            switch (lastChar) {
                case 'l' :
                case 'L' :
                    if (((dec == null) && (exp == null)) && (((numeric.charAt(0) == '-') && org.apache.commons.lang.NumberUtils.isDigits(numeric.substring(1))) || org.apache.commons.lang.NumberUtils.isDigits(numeric))) {
                        try {
                            return org.apache.commons.lang.NumberUtils.createLong(numeric);
                        } catch (java.lang.NumberFormatException nfe) {
                        }
                        return org.apache.commons.lang.NumberUtils.createBigInteger(numeric);
                    }
                    throw new java.lang.NumberFormatException(val + " is not a valid number.");
                case 'f' :
                case 'F' :
                    try {
                        java.lang.Float f = org.apache.commons.lang.NumberUtils.createFloat(numeric);
                        if (!(f.isInfinite() || ((f.floatValue() == 0.0F) && (!allZeros)))) {
                            return f;
                        }
                    } catch (java.lang.NumberFormatException e) {
                    }
                case 'd' :
                case 'D' :
                    try {
                        java.lang.Double d = org.apache.commons.lang.NumberUtils.createDouble(numeric);
                        if (!(d.isInfinite() || ((d.floatValue() == 0.0) && (!allZeros)))) {
                            return d;
                        }
                    } catch (java.lang.NumberFormatException nfe) {
                    }
                    try {
                        return org.apache.commons.lang.NumberUtils.createBigDecimal(numeric);
                    } catch (java.lang.NumberFormatException e) {
                    }
                default :
                    throw new java.lang.NumberFormatException(val + " is not a valid number.");
            }
        } else {
            if ((expPos > (-1)) && (expPos < (val.length() - 1))) {
                exp = val.substring(expPos + 1, val.length());
            } else {
                exp = null;
            }
            if ((dec == null) && (exp == null)) {
                try {
                    return org.apache.commons.lang.NumberUtils.createInteger(val);
                } catch (java.lang.NumberFormatException nfe) {
                }
                try {
                    return org.apache.commons.lang.NumberUtils.createLong(val);
                } catch (java.lang.NumberFormatException nfe) {
                }
                return org.apache.commons.lang.NumberUtils.createBigInteger(val);
            } else {
                boolean allZeros = org.apache.commons.lang.NumberUtils.isAllZeros(mant) && org.apache.commons.lang.NumberUtils.isAllZeros(exp);
                try {
                    java.lang.Float f = org.apache.commons.lang.NumberUtils.createFloat(val);
                    if (!(f.isInfinite() || ((f.floatValue() == 0.0F) && (!allZeros)))) {
                        return f;
                    }
                } catch (java.lang.NumberFormatException nfe) {
                }
                try {
                    java.lang.Double d = org.apache.commons.lang.NumberUtils.createDouble(val);
                    if (!(d.isInfinite() || ((d.doubleValue() == 0.0) && (!allZeros)))) {
                        return d;
                    }
                } catch (java.lang.NumberFormatException nfe) {
                }
                return org.apache.commons.lang.NumberUtils.createBigDecimal(val);
            }
        }
    }

    private static boolean isAllZeros(java.lang.String s) {
        if (s == null) {
            return true;
        }
        for (int i = s.length() - 1; i >= 0; i--) {
            if (s.charAt(i) != '0') {
                return false;
            }
        }
        return s.length() > 0;
    }

    public static java.lang.Float createFloat(java.lang.String val) {
        return java.lang.Float.valueOf(val);
    }

    public static java.lang.Double createDouble(java.lang.String val) {
        return java.lang.Double.valueOf(val);
    }

    public static java.lang.Integer createInteger(java.lang.String val) {
        return java.lang.Integer.decode(val);
    }

    public static java.lang.Long createLong(java.lang.String val) {
        return java.lang.Long.valueOf(val);
    }

    public static java.math.BigInteger createBigInteger(java.lang.String val) {
        java.math.BigInteger bi = new java.math.BigInteger(val);
        return bi;
    }

    public static java.math.BigDecimal createBigDecimal(java.lang.String val) {
        java.math.BigDecimal bd = new java.math.BigDecimal(val);
        return bd;
    }

    public static long minimum(long a, long b, long c) {
        if (b < a) {
            a = b;
        }
        if (c < a) {
            a = c;
        }
        return a;
    }

    public static int minimum(int a, int b, int c) {
        if (b < a) {
            a = b;
        }
        if (c < a) {
            a = c;
        }
        return a;
    }

    public static long maximum(long a, long b, long c) {
        if (b > a) {
            a = b;
        }
        if (c > a) {
            a = c;
        }
        return a;
    }

    public static int maximum(int a, int b, int c) {
        if (b > a) {
            a = b;
        }
        if (c > a) {
            a = c;
        }
        return a;
    }

    public static int compare(double lhs, double rhs) {
        if (lhs < rhs) {
            return -1;
        }
        if (lhs > rhs) {
            return +1;
        }
        long lhsBits = java.lang.Double.doubleToLongBits(lhs);
        long rhsBits = java.lang.Double.doubleToLongBits(rhs);
        if (lhsBits == rhsBits) {
            return 0;
        }
        if (lhsBits < rhsBits) {
            return -1;
        } else {
            return +1;
        }
    }

    public static int compare(float lhs, float rhs) {
        if (lhs < rhs) {
            return -1;
        }
        if (lhs > rhs) {
            return +1;
        }
        int lhsBits = java.lang.Float.floatToIntBits(lhs);
        int rhsBits = java.lang.Float.floatToIntBits(rhs);
        if (lhsBits == rhsBits) {
            return 0;
        }
        if (lhsBits < rhsBits) {
            return -1;
        } else {
            return +1;
        }
    }

    public static boolean isDigits(java.lang.String str) {
        if ((str == null) || (str.length() == 0)) {
            return false;
        }
        for (int i = 0; i < str.length(); i++) {
            if (!java.lang.Character.isDigit(str.charAt(i))) {
                return false;
            }
        }
        return true;
    }

    public static boolean isNumber(java.lang.String str) {
        if (org.apache.commons.lang.StringUtils.isEmpty(str)) {
            return false;
        }
        char[] chars = str.toCharArray();
        int sz = chars.length;
        boolean hasExp = false;
        boolean hasDecPoint = false;
        boolean allowSigns = false;
        boolean foundDigit = false;
        int start = (chars[0] == '-') ? 1 : 0;
        if (sz > (start + 1)) {
            if ((chars[start] == '0') && (chars[start + 1] == 'x')) {
                int i = start + 2;
                if (i == sz) {
                    return false;
                }
                for (; i < chars.length; i++) {
                    if ((((chars[i] < '0') || (chars[i] > '9')) && ((chars[i] < 'a') || (chars[i] > 'f'))) && ((chars[i] < 'A') || (chars[i] > 'F'))) {
                        return false;
                    }
                }
                return true;
            }
        }
        sz--;
        int i = start;
        while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
            if ((chars[i] >= '0') && (chars[i] <= '9')) {
                foundDigit = true;
                allowSigns = false;
            } else
                if (chars[i] == '.') {
                    if (hasDecPoint || hasExp) {
                        return false;
                    }
                    hasDecPoint = true;
                } else
                    if ((chars[i] == 'e') || (chars[i] == 'E')) {
                        if (hasExp) {
                            return false;
                        }
                        if (!foundDigit) {
                            return false;
                        }
                        hasExp = true;
                        allowSigns = true;
                    } else
                        if ((chars[i] == '+') || (chars[i] == '-')) {
                            if (!allowSigns) {
                                return false;
                            }
                            allowSigns = false;
                            foundDigit = false;
                        } else {
                            return false;
                        }



            i++;
        } 
        if (i < chars.length) {
            if ((chars[i] >= '0') && (chars[i] <= '9')) {
                return true;
            }
            if ((chars[i] == 'e') || (chars[i] == 'E')) {
                return false;
            }
            if ((!allowSigns) && ((((chars[i] == 'd') || (chars[i] == 'D')) || (chars[i] == 'f')) || (chars[i] == 'F'))) {
                return foundDigit;
            }
            if ((chars[i] == 'l') || (chars[i] == 'L')) {
                return foundDigit && (!hasExp);
            }
            return false;
        }
        return (!allowSigns) && foundDigit;
    }
}
04:52:38.752 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
04:52:38.752 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #195
04:52:38.752 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.NumberUtils:179 which is executed by 3 tests
-1898474807
04:52:38.883 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
04:52:39.230 [pool-65-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
NumberUtils.java:84: error: variable dec might not have been initialized
                    if (((dec == null) && (exp == null)) && (((numeric.charAt(0) == '-') && org.apache.commons.lang.NumberUtils.isDigits(numeric.substring(1))) || org.apache.commons.lang.NumberUtils.isDigits(numeric))) {
                          ^
NumberUtils.java:123: error: variable dec might not have been initialized
            if ((dec == null) && (exp == null)) {
                 ^
04:52:39.245 [pool-65-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public final class NumberUtils {
    public NumberUtils() {
        super();
    }

    public static int stringToInt(java.lang.String str) {
        return org.apache.commons.lang.NumberUtils.stringToInt(str, 0);
    }

    public static int stringToInt(java.lang.String str, int defaultValue) {
        try {
            return java.lang.Integer.parseInt(str);
        } catch (java.lang.NumberFormatException nfe) {
            return defaultValue;
        }
    }

    public static java.lang.Number createNumber(java.lang.String val) throws java.lang.NumberFormatException {
        if (val == null) {
            return null;
        }
        if (val.length() == 0) {
            throw new java.lang.NumberFormatException("\"\" is not a valid number.");
        }
        if (val.startsWith("--")) {
            return null;
        }
        if (val.startsWith("0x") || val.startsWith("-0x")) {
            return org.apache.commons.lang.NumberUtils.createInteger(val);
        }
        char lastChar = val.charAt(val.length() - 1);
        java.lang.String mant;
        java.lang.String dec;
        java.lang.String exp;
        int decPos = val.indexOf('.');
        int expPos = (val.indexOf('e') + val.indexOf('E')) + 1;
        if (decPos > (-1)) {
            if (expPos > (-1)) {
                if (expPos < decPos) {
                    throw new java.lang.NumberFormatException(val + " is not a valid number.");
                }
                dec = val.substring(decPos + 1, expPos);
            } else {
                dec = val.substring(decPos + 1);
            }
            mant = val.substring(0, decPos);
        } else {
            if (expPos > (-1)) {
                mant = val.substring(0, expPos);
            } else {
                mant = val;
            }
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(13).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("decPos",decPos);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("val",val);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("expPos",expPos);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("lastChar",lastChar);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectionEnds();
            }
            if (runtimeAngelicValue)
                dec = null;

        }
        if (!java.lang.Character.isDigit(lastChar)) {
            if ((expPos > (-1)) && (expPos < (val.length() - 1))) {
                exp = val.substring(expPos + 1, val.length() - 1);
            } else {
                exp = null;
            }
            java.lang.String numeric = val.substring(0, val.length() - 1);
            boolean allZeros = org.apache.commons.lang.NumberUtils.isAllZeros(mant) && org.apache.commons.lang.NumberUtils.isAllZeros(exp);
            switch (lastChar) {
                case 'l' :
                case 'L' :
                    if (((dec == null) && (exp == null)) && (((numeric.charAt(0) == '-') && org.apache.commons.lang.NumberUtils.isDigits(numeric.substring(1))) || org.apache.commons.lang.NumberUtils.isDigits(numeric))) {
                        try {
                            return org.apache.commons.lang.NumberUtils.createLong(numeric);
                        } catch (java.lang.NumberFormatException nfe) {
                        }
                        return org.apache.commons.lang.NumberUtils.createBigInteger(numeric);
                    }
                    throw new java.lang.NumberFormatException(val + " is not a valid number.");
                case 'f' :
                case 'F' :
                    try {
                        java.lang.Float f = org.apache.commons.lang.NumberUtils.createFloat(numeric);
                        if (!(f.isInfinite() || ((f.floatValue() == 0.0F) && (!allZeros)))) {
                            return f;
                        }
                    } catch (java.lang.NumberFormatException e) {
                    }
                case 'd' :
                case 'D' :
                    try {
                        java.lang.Double d = org.apache.commons.lang.NumberUtils.createDouble(numeric);
                        if (!(d.isInfinite() || ((d.floatValue() == 0.0) && (!allZeros)))) {
                            return d;
                        }
                    } catch (java.lang.NumberFormatException nfe) {
                    }
                    try {
                        return org.apache.commons.lang.NumberUtils.createBigDecimal(numeric);
                    } catch (java.lang.NumberFormatException e) {
                    }
                default :
                    throw new java.lang.NumberFormatException(val + " is not a valid number.");
            }
        } else {
            if ((expPos > (-1)) && (expPos < (val.length() - 1))) {
                exp = val.substring(expPos + 1, val.length());
            } else {
                exp = null;
            }
            if ((dec == null) && (exp == null)) {
                try {
                    return org.apache.commons.lang.NumberUtils.createInteger(val);
                } catch (java.lang.NumberFormatException nfe) {
                }
                try {
                    return org.apache.commons.lang.NumberUtils.createLong(val);
                } catch (java.lang.NumberFormatException nfe) {
                }
                return org.apache.commons.lang.NumberUtils.createBigInteger(val);
            } else {
                boolean allZeros = org.apache.commons.lang.NumberUtils.isAllZeros(mant) && org.apache.commons.lang.NumberUtils.isAllZeros(exp);
                try {
                    java.lang.Float f = org.apache.commons.lang.NumberUtils.createFloat(val);
                    if (!(f.isInfinite() || ((f.floatValue() == 0.0F) && (!allZeros)))) {
                        return f;
                    }
                } catch (java.lang.NumberFormatException nfe) {
                }
                try {
                    java.lang.Double d = org.apache.commons.lang.NumberUtils.createDouble(val);
                    if (!(d.isInfinite() || ((d.doubleValue() == 0.0) && (!allZeros)))) {
                        return d;
                    }
                } catch (java.lang.NumberFormatException nfe) {
                }
                return org.apache.commons.lang.NumberUtils.createBigDecimal(val);
            }
        }
    }

    private static boolean isAllZeros(java.lang.String s) {
        if (s == null) {
            return true;
        }
        for (int i = s.length() - 1; i >= 0; i--) {
            if (s.charAt(i) != '0') {
                return false;
            }
        }
        return s.length() > 0;
    }

    public static java.lang.Float createFloat(java.lang.String val) {
        return java.lang.Float.valueOf(val);
    }

    public static java.lang.Double createDouble(java.lang.String val) {
        return java.lang.Double.valueOf(val);
    }

    public static java.lang.Integer createInteger(java.lang.String val) {
        return java.lang.Integer.decode(val);
    }

    public static java.lang.Long createLong(java.lang.String val) {
        return java.lang.Long.valueOf(val);
    }

    public static java.math.BigInteger createBigInteger(java.lang.String val) {
        java.math.BigInteger bi = new java.math.BigInteger(val);
        return bi;
    }

    public static java.math.BigDecimal createBigDecimal(java.lang.String val) {
        java.math.BigDecimal bd = new java.math.BigDecimal(val);
        return bd;
    }

    public static long minimum(long a, long b, long c) {
        if (b < a) {
            a = b;
        }
        if (c < a) {
            a = c;
        }
        return a;
    }

    public static int minimum(int a, int b, int c) {
        if (b < a) {
            a = b;
        }
        if (c < a) {
            a = c;
        }
        return a;
    }

    public static long maximum(long a, long b, long c) {
        if (b > a) {
            a = b;
        }
        if (c > a) {
            a = c;
        }
        return a;
    }

    public static int maximum(int a, int b, int c) {
        if (b > a) {
            a = b;
        }
        if (c > a) {
            a = c;
        }
        return a;
    }

    public static int compare(double lhs, double rhs) {
        if (lhs < rhs) {
            return -1;
        }
        if (lhs > rhs) {
            return +1;
        }
        long lhsBits = java.lang.Double.doubleToLongBits(lhs);
        long rhsBits = java.lang.Double.doubleToLongBits(rhs);
        if (lhsBits == rhsBits) {
            return 0;
        }
        if (lhsBits < rhsBits) {
            return -1;
        } else {
            return +1;
        }
    }

    public static int compare(float lhs, float rhs) {
        if (lhs < rhs) {
            return -1;
        }
        if (lhs > rhs) {
            return +1;
        }
        int lhsBits = java.lang.Float.floatToIntBits(lhs);
        int rhsBits = java.lang.Float.floatToIntBits(rhs);
        if (lhsBits == rhsBits) {
            return 0;
        }
        if (lhsBits < rhsBits) {
            return -1;
        } else {
            return +1;
        }
    }

    public static boolean isDigits(java.lang.String str) {
        if ((str == null) || (str.length() == 0)) {
            return false;
        }
        for (int i = 0; i < str.length(); i++) {
            if (!java.lang.Character.isDigit(str.charAt(i))) {
                return false;
            }
        }
        return true;
    }

    public static boolean isNumber(java.lang.String str) {
        if (org.apache.commons.lang.StringUtils.isEmpty(str)) {
            return false;
        }
        char[] chars = str.toCharArray();
        int sz = chars.length;
        boolean hasExp = false;
        boolean hasDecPoint = false;
        boolean allowSigns = false;
        boolean foundDigit = false;
        int start = (chars[0] == '-') ? 1 : 0;
        if (sz > (start + 1)) {
            if ((chars[start] == '0') && (chars[start + 1] == 'x')) {
                int i = start + 2;
                if (i == sz) {
                    return false;
                }
                for (; i < chars.length; i++) {
                    if ((((chars[i] < '0') || (chars[i] > '9')) && ((chars[i] < 'a') || (chars[i] > 'f'))) && ((chars[i] < 'A') || (chars[i] > 'F'))) {
                        return false;
                    }
                }
                return true;
            }
        }
        sz--;
        int i = start;
        while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
            if ((chars[i] >= '0') && (chars[i] <= '9')) {
                foundDigit = true;
                allowSigns = false;
            } else
                if (chars[i] == '.') {
                    if (hasDecPoint || hasExp) {
                        return false;
                    }
                    hasDecPoint = true;
                } else
                    if ((chars[i] == 'e') || (chars[i] == 'E')) {
                        if (hasExp) {
                            return false;
                        }
                        if (!foundDigit) {
                            return false;
                        }
                        hasExp = true;
                        allowSigns = true;
                    } else
                        if ((chars[i] == '+') || (chars[i] == '-')) {
                            if (!allowSigns) {
                                return false;
                            }
                            allowSigns = false;
                            foundDigit = false;
                        } else {
                            return false;
                        }



            i++;
        } 
        if (i < chars.length) {
            if ((chars[i] >= '0') && (chars[i] <= '9')) {
                return true;
            }
            if ((chars[i] == 'e') || (chars[i] == 'E')) {
                return false;
            }
            if ((!allowSigns) && ((((chars[i] == 'd') || (chars[i] == 'D')) || (chars[i] == 'f')) || (chars[i] == 'F'))) {
                return foundDigit;
            }
            if ((chars[i] == 'l') || (chars[i] == 'L')) {
                return foundDigit && (!hasExp);
            }
            return false;
        }
        return (!allowSigns) && foundDigit;
    }
}
04:52:39.245 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
04:52:39.245 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #196
04:52:39.245 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.NumberUtils:181 which is executed by 3 tests
-1898474807
04:52:39.346 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
04:52:39.839 [pool-67-thread-1] DEBUG f.i.l.c.s.ConstraintBasedSynthesis - Operators:
04:52:39.883 [pool-67-thread-1] DEBUG f.i.l.c.s.ConstraintBasedSynthesis - Operators:
== of arity: 2
!= of arity: 2
< of arity: 2
<= of arity: 2
04:52:40.146 [pool-67-thread-1] DEBUG f.i.l.c.s.ConstraintBasedSynthesis - Operators:
== of arity: 2
!= of arity: 2
< of arity: 2
<= of arity: 2
! of arity: 1
|| of arity: 2
&& of arity: 2
04:52:42.625 [pool-67-thread-1] DEBUG f.i.l.c.s.ConstraintBasedSynthesis - Operators:
== of arity: 2
!= of arity: 2
< of arity: 2
<= of arity: 2
! of arity: 1
|| of arity: 2
&& of arity: 2
== of arity: 2
!= of arity: 2
< of arity: 2
<= of arity: 2
04:52:47.624 [pool-67-thread-1] DEBUG f.i.l.c.s.ConstraintBasedSynthesis - Operators:
== of arity: 2
!= of arity: 2
< of arity: 2
<= of arity: 2
! of arity: 1
|| of arity: 2
&& of arity: 2
== of arity: 2
!= of arity: 2
< of arity: 2
<= of arity: 2
! of arity: 1
|| of arity: 2
&& of arity: 2
04:53:13.419 [pool-67-thread-1] DEBUG f.i.l.c.s.ConstraintBasedSynthesis - Failed code synthesis, returning NullCodeGenesis
04:53:13.420 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #197
04:53:13.420 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.NumberUtils:182 which is executed by 3 tests
-1898474807
04:53:13.550 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
04:53:13.813 [pool-79-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
NumberUtils.java:81: error: variable exp might not have been initialized
            boolean allZeros = org.apache.commons.lang.NumberUtils.isAllZeros(mant) && org.apache.commons.lang.NumberUtils.isAllZeros(exp);
                                                                                                                                      ^
NumberUtils.java:85: error: variable exp might not have been initialized
                    if (((dec == null) && (exp == null)) && (((numeric.charAt(0) == '-') && org.apache.commons.lang.NumberUtils.isDigits(numeric.substring(1))) || org.apache.commons.lang.NumberUtils.isDigits(numeric))) {
                                           ^
04:53:13.837 [pool-79-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public final class NumberUtils {
    public NumberUtils() {
        super();
    }

    public static int stringToInt(java.lang.String str) {
        return org.apache.commons.lang.NumberUtils.stringToInt(str, 0);
    }

    public static int stringToInt(java.lang.String str, int defaultValue) {
        try {
            return java.lang.Integer.parseInt(str);
        } catch (java.lang.NumberFormatException nfe) {
            return defaultValue;
        }
    }

    public static java.lang.Number createNumber(java.lang.String val) throws java.lang.NumberFormatException {
        if (val == null) {
            return null;
        }
        if (val.length() == 0) {
            throw new java.lang.NumberFormatException("\"\" is not a valid number.");
        }
        if (val.startsWith("--")) {
            return null;
        }
        if (val.startsWith("0x") || val.startsWith("-0x")) {
            return org.apache.commons.lang.NumberUtils.createInteger(val);
        }
        char lastChar = val.charAt(val.length() - 1);
        java.lang.String mant;
        java.lang.String dec;
        java.lang.String exp;
        int decPos = val.indexOf('.');
        int expPos = (val.indexOf('e') + val.indexOf('E')) + 1;
        if (decPos > (-1)) {
            if (expPos > (-1)) {
                if (expPos < decPos) {
                    throw new java.lang.NumberFormatException(val + " is not a valid number.");
                }
                dec = val.substring(decPos + 1, expPos);
            } else {
                dec = val.substring(decPos + 1);
            }
            mant = val.substring(0, decPos);
        } else {
            if (expPos > (-1)) {
                mant = val.substring(0, expPos);
            } else {
                mant = val;
            }
            dec = null;
        }
        if (!java.lang.Character.isDigit(lastChar)) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(15).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("decPos",decPos);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("val",val);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("1",1);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("lastChar",lastChar);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("expPos",expPos);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("(expPos > (-1))",(expPos > (-1)));} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("(-1)",(-1));} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectionEnds();
            }
            if (runtimeAngelicValue) if ((expPos > (-1)) && (expPos < (val.length() - 1))) {
                exp = val.substring(expPos + 1, val.length() - 1);
            } else {
                exp = null;
            }
            java.lang.String numeric = val.substring(0, val.length() - 1);
            boolean allZeros = org.apache.commons.lang.NumberUtils.isAllZeros(mant) && org.apache.commons.lang.NumberUtils.isAllZeros(exp);
            switch (lastChar) {
                case 'l' :
                case 'L' :
                    if (((dec == null) && (exp == null)) && (((numeric.charAt(0) == '-') && org.apache.commons.lang.NumberUtils.isDigits(numeric.substring(1))) || org.apache.commons.lang.NumberUtils.isDigits(numeric))) {
                        try {
                            return org.apache.commons.lang.NumberUtils.createLong(numeric);
                        } catch (java.lang.NumberFormatException nfe) {
                        }
                        return org.apache.commons.lang.NumberUtils.createBigInteger(numeric);
                    }
                    throw new java.lang.NumberFormatException(val + " is not a valid number.");
                case 'f' :
                case 'F' :
                    try {
                        java.lang.Float f = org.apache.commons.lang.NumberUtils.createFloat(numeric);
                        if (!(f.isInfinite() || ((f.floatValue() == 0.0F) && (!allZeros)))) {
                            return f;
                        }
                    } catch (java.lang.NumberFormatException e) {
                    }
                case 'd' :
                case 'D' :
                    try {
                        java.lang.Double d = org.apache.commons.lang.NumberUtils.createDouble(numeric);
                        if (!(d.isInfinite() || ((d.floatValue() == 0.0) && (!allZeros)))) {
                            return d;
                        }
                    } catch (java.lang.NumberFormatException nfe) {
                    }
                    try {
                        return org.apache.commons.lang.NumberUtils.createBigDecimal(numeric);
                    } catch (java.lang.NumberFormatException e) {
                    }
                default :
                    throw new java.lang.NumberFormatException(val + " is not a valid number.");
            }
        } else {
            if ((expPos > (-1)) && (expPos < (val.length() - 1))) {
                exp = val.substring(expPos + 1, val.length());
            } else {
                exp = null;
            }
            if ((dec == null) && (exp == null)) {
                try {
                    return org.apache.commons.lang.NumberUtils.createInteger(val);
                } catch (java.lang.NumberFormatException nfe) {
                }
                try {
                    return org.apache.commons.lang.NumberUtils.createLong(val);
                } catch (java.lang.NumberFormatException nfe) {
                }
                return org.apache.commons.lang.NumberUtils.createBigInteger(val);
            } else {
                boolean allZeros = org.apache.commons.lang.NumberUtils.isAllZeros(mant) && org.apache.commons.lang.NumberUtils.isAllZeros(exp);
                try {
                    java.lang.Float f = org.apache.commons.lang.NumberUtils.createFloat(val);
                    if (!(f.isInfinite() || ((f.floatValue() == 0.0F) && (!allZeros)))) {
                        return f;
                    }
                } catch (java.lang.NumberFormatException nfe) {
                }
                try {
                    java.lang.Double d = org.apache.commons.lang.NumberUtils.createDouble(val);
                    if (!(d.isInfinite() || ((d.doubleValue() == 0.0) && (!allZeros)))) {
                        return d;
                    }
                } catch (java.lang.NumberFormatException nfe) {
                }
                return org.apache.commons.lang.NumberUtils.createBigDecimal(val);
            }
        }
    }

    private static boolean isAllZeros(java.lang.String s) {
        if (s == null) {
            return true;
        }
        for (int i = s.length() - 1; i >= 0; i--) {
            if (s.charAt(i) != '0') {
                return false;
            }
        }
        return s.length() > 0;
    }

    public static java.lang.Float createFloat(java.lang.String val) {
        return java.lang.Float.valueOf(val);
    }

    public static java.lang.Double createDouble(java.lang.String val) {
        return java.lang.Double.valueOf(val);
    }

    public static java.lang.Integer createInteger(java.lang.String val) {
        return java.lang.Integer.decode(val);
    }

    public static java.lang.Long createLong(java.lang.String val) {
        return java.lang.Long.valueOf(val);
    }

    public static java.math.BigInteger createBigInteger(java.lang.String val) {
        java.math.BigInteger bi = new java.math.BigInteger(val);
        return bi;
    }

    public static java.math.BigDecimal createBigDecimal(java.lang.String val) {
        java.math.BigDecimal bd = new java.math.BigDecimal(val);
        return bd;
    }

    public static long minimum(long a, long b, long c) {
        if (b < a) {
            a = b;
        }
        if (c < a) {
            a = c;
        }
        return a;
    }

    public static int minimum(int a, int b, int c) {
        if (b < a) {
            a = b;
        }
        if (c < a) {
            a = c;
        }
        return a;
    }

    public static long maximum(long a, long b, long c) {
        if (b > a) {
            a = b;
        }
        if (c > a) {
            a = c;
        }
        return a;
    }

    public static int maximum(int a, int b, int c) {
        if (b > a) {
            a = b;
        }
        if (c > a) {
            a = c;
        }
        return a;
    }

    public static int compare(double lhs, double rhs) {
        if (lhs < rhs) {
            return -1;
        }
        if (lhs > rhs) {
            return +1;
        }
        long lhsBits = java.lang.Double.doubleToLongBits(lhs);
        long rhsBits = java.lang.Double.doubleToLongBits(rhs);
        if (lhsBits == rhsBits) {
            return 0;
        }
        if (lhsBits < rhsBits) {
            return -1;
        } else {
            return +1;
        }
    }

    public static int compare(float lhs, float rhs) {
        if (lhs < rhs) {
            return -1;
        }
        if (lhs > rhs) {
            return +1;
        }
        int lhsBits = java.lang.Float.floatToIntBits(lhs);
        int rhsBits = java.lang.Float.floatToIntBits(rhs);
        if (lhsBits == rhsBits) {
            return 0;
        }
        if (lhsBits < rhsBits) {
            return -1;
        } else {
            return +1;
        }
    }

    public static boolean isDigits(java.lang.String str) {
        if ((str == null) || (str.length() == 0)) {
            return false;
        }
        for (int i = 0; i < str.length(); i++) {
            if (!java.lang.Character.isDigit(str.charAt(i))) {
                return false;
            }
        }
        return true;
    }

    public static boolean isNumber(java.lang.String str) {
        if (org.apache.commons.lang.StringUtils.isEmpty(str)) {
            return false;
        }
        char[] chars = str.toCharArray();
        int sz = chars.length;
        boolean hasExp = false;
        boolean hasDecPoint = false;
        boolean allowSigns = false;
        boolean foundDigit = false;
        int start = (chars[0] == '-') ? 1 : 0;
        if (sz > (start + 1)) {
            if ((chars[start] == '0') && (chars[start + 1] == 'x')) {
                int i = start + 2;
                if (i == sz) {
                    return false;
                }
                for (; i < chars.length; i++) {
                    if ((((chars[i] < '0') || (chars[i] > '9')) && ((chars[i] < 'a') || (chars[i] > 'f'))) && ((chars[i] < 'A') || (chars[i] > 'F'))) {
                        return false;
                    }
                }
                return true;
            }
        }
        sz--;
        int i = start;
        while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
            if ((chars[i] >= '0') && (chars[i] <= '9')) {
                foundDigit = true;
                allowSigns = false;
            } else
                if (chars[i] == '.') {
                    if (hasDecPoint || hasExp) {
                        return false;
                    }
                    hasDecPoint = true;
                } else
                    if ((chars[i] == 'e') || (chars[i] == 'E')) {
                        if (hasExp) {
                            return false;
                        }
                        if (!foundDigit) {
                            return false;
                        }
                        hasExp = true;
                        allowSigns = true;
                    } else
                        if ((chars[i] == '+') || (chars[i] == '-')) {
                            if (!allowSigns) {
                                return false;
                            }
                            allowSigns = false;
                            foundDigit = false;
                        } else {
                            return false;
                        }



            i++;
        } 
        if (i < chars.length) {
            if ((chars[i] >= '0') && (chars[i] <= '9')) {
                return true;
            }
            if ((chars[i] == 'e') || (chars[i] == 'E')) {
                return false;
            }
            if ((!allowSigns) && ((((chars[i] == 'd') || (chars[i] == 'D')) || (chars[i] == 'f')) || (chars[i] == 'F'))) {
                return foundDigit;
            }
            if ((chars[i] == 'l') || (chars[i] == 'L')) {
                return foundDigit && (!hasExp);
            }
            return false;
        }
        return (!allowSigns) && foundDigit;
    }
}
04:53:13.843 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
04:53:13.843 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
04:53:14.234 [pool-81-thread-1] DEBUG f.i.l.c.s.ConstraintBasedSynthesis - Operators:
04:53:14.252 [pool-81-thread-1] DEBUG f.i.l.c.s.ConstraintBasedSynthesis - Operators:
== of arity: 2
!= of arity: 2
< of arity: 2
<= of arity: 2
04:53:14.356 [pool-81-thread-1] DEBUG f.i.l.c.s.ConstraintBasedSynthesis - Operators:
== of arity: 2
!= of arity: 2
< of arity: 2
<= of arity: 2
! of arity: 1
|| of arity: 2
&& of arity: 2
04:53:15.986 [pool-81-thread-1] DEBUG f.i.l.c.s.ConstraintBasedSynthesis - Operators:
== of arity: 2
!= of arity: 2
< of arity: 2
<= of arity: 2
! of arity: 1
|| of arity: 2
&& of arity: 2
== of arity: 2
!= of arity: 2
< of arity: 2
<= of arity: 2
04:53:18.424 [pool-81-thread-1] DEBUG f.i.l.c.s.ConstraintBasedSynthesis - Operators:
== of arity: 2
!= of arity: 2
< of arity: 2
<= of arity: 2
! of arity: 1
|| of arity: 2
&& of arity: 2
== of arity: 2
!= of arity: 2
< of arity: 2
<= of arity: 2
! of arity: 1
|| of arity: 2
&& of arity: 2
04:53:25.669 [pool-81-thread-1] DEBUG f.i.l.c.s.ConstraintBasedSynthesis - Failed code synthesis, returning NullCodeGenesis
04:53:25.669 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #198
04:53:25.669 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.NumberUtils:185 which is executed by 3 tests
-1898474807
04:53:25.757 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
04:53:25.994 [pool-93-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
NumberUtils.java:80: error: variable exp might not have been initialized
            boolean allZeros = org.apache.commons.lang.NumberUtils.isAllZeros(mant) && org.apache.commons.lang.NumberUtils.isAllZeros(exp);
                                                                                                                                      ^
NumberUtils.java:84: error: variable exp might not have been initialized
                    if (((dec == null) && (exp == null)) && (((numeric.charAt(0) == '-') && org.apache.commons.lang.NumberUtils.isDigits(numeric.substring(1))) || org.apache.commons.lang.NumberUtils.isDigits(numeric))) {
                                           ^
04:53:26.015 [pool-93-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public final class NumberUtils {
    public NumberUtils() {
        super();
    }

    public static int stringToInt(java.lang.String str) {
        return org.apache.commons.lang.NumberUtils.stringToInt(str, 0);
    }

    public static int stringToInt(java.lang.String str, int defaultValue) {
        try {
            return java.lang.Integer.parseInt(str);
        } catch (java.lang.NumberFormatException nfe) {
            return defaultValue;
        }
    }

    public static java.lang.Number createNumber(java.lang.String val) throws java.lang.NumberFormatException {
        if (val == null) {
            return null;
        }
        if (val.length() == 0) {
            throw new java.lang.NumberFormatException("\"\" is not a valid number.");
        }
        if (val.startsWith("--")) {
            return null;
        }
        if (val.startsWith("0x") || val.startsWith("-0x")) {
            return org.apache.commons.lang.NumberUtils.createInteger(val);
        }
        char lastChar = val.charAt(val.length() - 1);
        java.lang.String mant;
        java.lang.String dec;
        java.lang.String exp;
        int decPos = val.indexOf('.');
        int expPos = (val.indexOf('e') + val.indexOf('E')) + 1;
        if (decPos > (-1)) {
            if (expPos > (-1)) {
                if (expPos < decPos) {
                    throw new java.lang.NumberFormatException(val + " is not a valid number.");
                }
                dec = val.substring(decPos + 1, expPos);
            } else {
                dec = val.substring(decPos + 1);
            }
            mant = val.substring(0, decPos);
        } else {
            if (expPos > (-1)) {
                mant = val.substring(0, expPos);
            } else {
                mant = val;
            }
            dec = null;
        }
        if (!java.lang.Character.isDigit(lastChar)) {
            if ((expPos > (-1)) && (expPos < (val.length() - 1))) {
                exp = val.substring(expPos + 1, val.length() - 1);
            } else {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(17).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectInput("decPos",decPos);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectInput("val",val);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectInput("expPos",expPos);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectInput("lastChar",lastChar);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectionEnds();
                }
                if (runtimeAngelicValue)
                    exp = null;

            }
            java.lang.String numeric = val.substring(0, val.length() - 1);
            boolean allZeros = org.apache.commons.lang.NumberUtils.isAllZeros(mant) && org.apache.commons.lang.NumberUtils.isAllZeros(exp);
            switch (lastChar) {
                case 'l' :
                case 'L' :
                    if (((dec == null) && (exp == null)) && (((numeric.charAt(0) == '-') && org.apache.commons.lang.NumberUtils.isDigits(numeric.substring(1))) || org.apache.commons.lang.NumberUtils.isDigits(numeric))) {
                        try {
                            return org.apache.commons.lang.NumberUtils.createLong(numeric);
                        } catch (java.lang.NumberFormatException nfe) {
                        }
                        return org.apache.commons.lang.NumberUtils.createBigInteger(numeric);
                    }
                    throw new java.lang.NumberFormatException(val + " is not a valid number.");
                case 'f' :
                case 'F' :
                    try {
                        java.lang.Float f = org.apache.commons.lang.NumberUtils.createFloat(numeric);
                        if (!(f.isInfinite() || ((f.floatValue() == 0.0F) && (!allZeros)))) {
                            return f;
                        }
                    } catch (java.lang.NumberFormatException e) {
                    }
                case 'd' :
                case 'D' :
                    try {
                        java.lang.Double d = org.apache.commons.lang.NumberUtils.createDouble(numeric);
                        if (!(d.isInfinite() || ((d.floatValue() == 0.0) && (!allZeros)))) {
                            return d;
                        }
                    } catch (java.lang.NumberFormatException nfe) {
                    }
                    try {
                        return org.apache.commons.lang.NumberUtils.createBigDecimal(numeric);
                    } catch (java.lang.NumberFormatException e) {
                    }
                default :
                    throw new java.lang.NumberFormatException(val + " is not a valid number.");
            }
        } else {
            if ((expPos > (-1)) && (expPos < (val.length() - 1))) {
                exp = val.substring(expPos + 1, val.length());
            } else {
                exp = null;
            }
            if ((dec == null) && (exp == null)) {
                try {
                    return org.apache.commons.lang.NumberUtils.createInteger(val);
                } catch (java.lang.NumberFormatException nfe) {
                }
                try {
                    return org.apache.commons.lang.NumberUtils.createLong(val);
                } catch (java.lang.NumberFormatException nfe) {
                }
                return org.apache.commons.lang.NumberUtils.createBigInteger(val);
            } else {
                boolean allZeros = org.apache.commons.lang.NumberUtils.isAllZeros(mant) && org.apache.commons.lang.NumberUtils.isAllZeros(exp);
                try {
                    java.lang.Float f = org.apache.commons.lang.NumberUtils.createFloat(val);
                    if (!(f.isInfinite() || ((f.floatValue() == 0.0F) && (!allZeros)))) {
                        return f;
                    }
                } catch (java.lang.NumberFormatException nfe) {
                }
                try {
                    java.lang.Double d = org.apache.commons.lang.NumberUtils.createDouble(val);
                    if (!(d.isInfinite() || ((d.doubleValue() == 0.0) && (!allZeros)))) {
                        return d;
                    }
                } catch (java.lang.NumberFormatException nfe) {
                }
                return org.apache.commons.lang.NumberUtils.createBigDecimal(val);
            }
        }
    }

    private static boolean isAllZeros(java.lang.String s) {
        if (s == null) {
            return true;
        }
        for (int i = s.length() - 1; i >= 0; i--) {
            if (s.charAt(i) != '0') {
                return false;
            }
        }
        return s.length() > 0;
    }

    public static java.lang.Float createFloat(java.lang.String val) {
        return java.lang.Float.valueOf(val);
    }

    public static java.lang.Double createDouble(java.lang.String val) {
        return java.lang.Double.valueOf(val);
    }

    public static java.lang.Integer createInteger(java.lang.String val) {
        return java.lang.Integer.decode(val);
    }

    public static java.lang.Long createLong(java.lang.String val) {
        return java.lang.Long.valueOf(val);
    }

    public static java.math.BigInteger createBigInteger(java.lang.String val) {
        java.math.BigInteger bi = new java.math.BigInteger(val);
        return bi;
    }

    public static java.math.BigDecimal createBigDecimal(java.lang.String val) {
        java.math.BigDecimal bd = new java.math.BigDecimal(val);
        return bd;
    }

    public static long minimum(long a, long b, long c) {
        if (b < a) {
            a = b;
        }
        if (c < a) {
            a = c;
        }
        return a;
    }

    public static int minimum(int a, int b, int c) {
        if (b < a) {
            a = b;
        }
        if (c < a) {
            a = c;
        }
        return a;
    }

    public static long maximum(long a, long b, long c) {
        if (b > a) {
            a = b;
        }
        if (c > a) {
            a = c;
        }
        return a;
    }

    public static int maximum(int a, int b, int c) {
        if (b > a) {
            a = b;
        }
        if (c > a) {
            a = c;
        }
        return a;
    }

    public static int compare(double lhs, double rhs) {
        if (lhs < rhs) {
            return -1;
        }
        if (lhs > rhs) {
            return +1;
        }
        long lhsBits = java.lang.Double.doubleToLongBits(lhs);
        long rhsBits = java.lang.Double.doubleToLongBits(rhs);
        if (lhsBits == rhsBits) {
            return 0;
        }
        if (lhsBits < rhsBits) {
            return -1;
        } else {
            return +1;
        }
    }

    public static int compare(float lhs, float rhs) {
        if (lhs < rhs) {
            return -1;
        }
        if (lhs > rhs) {
            return +1;
        }
        int lhsBits = java.lang.Float.floatToIntBits(lhs);
        int rhsBits = java.lang.Float.floatToIntBits(rhs);
        if (lhsBits == rhsBits) {
            return 0;
        }
        if (lhsBits < rhsBits) {
            return -1;
        } else {
            return +1;
        }
    }

    public static boolean isDigits(java.lang.String str) {
        if ((str == null) || (str.length() == 0)) {
            return false;
        }
        for (int i = 0; i < str.length(); i++) {
            if (!java.lang.Character.isDigit(str.charAt(i))) {
                return false;
            }
        }
        return true;
    }

    public static boolean isNumber(java.lang.String str) {
        if (org.apache.commons.lang.StringUtils.isEmpty(str)) {
            return false;
        }
        char[] chars = str.toCharArray();
        int sz = chars.length;
        boolean hasExp = false;
        boolean hasDecPoint = false;
        boolean allowSigns = false;
        boolean foundDigit = false;
        int start = (chars[0] == '-') ? 1 : 0;
        if (sz > (start + 1)) {
            if ((chars[start] == '0') && (chars[start + 1] == 'x')) {
                int i = start + 2;
                if (i == sz) {
                    return false;
                }
                for (; i < chars.length; i++) {
                    if ((((chars[i] < '0') || (chars[i] > '9')) && ((chars[i] < 'a') || (chars[i] > 'f'))) && ((chars[i] < 'A') || (chars[i] > 'F'))) {
                        return false;
                    }
                }
                return true;
            }
        }
        sz--;
        int i = start;
        while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
            if ((chars[i] >= '0') && (chars[i] <= '9')) {
                foundDigit = true;
                allowSigns = false;
            } else
                if (chars[i] == '.') {
                    if (hasDecPoint || hasExp) {
                        return false;
                    }
                    hasDecPoint = true;
                } else
                    if ((chars[i] == 'e') || (chars[i] == 'E')) {
                        if (hasExp) {
                            return false;
                        }
                        if (!foundDigit) {
                            return false;
                        }
                        hasExp = true;
                        allowSigns = true;
                    } else
                        if ((chars[i] == '+') || (chars[i] == '-')) {
                            if (!allowSigns) {
                                return false;
                            }
                            allowSigns = false;
                            foundDigit = false;
                        } else {
                            return false;
                        }



            i++;
        } 
        if (i < chars.length) {
            if ((chars[i] >= '0') && (chars[i] <= '9')) {
                return true;
            }
            if ((chars[i] == 'e') || (chars[i] == 'E')) {
                return false;
            }
            if ((!allowSigns) && ((((chars[i] == 'd') || (chars[i] == 'D')) || (chars[i] == 'f')) || (chars[i] == 'F'))) {
                return foundDigit;
            }
            if ((chars[i] == 'l') || (chars[i] == 'L')) {
                return foundDigit && (!hasExp);
            }
            return false;
        }
        return (!allowSigns) && foundDigit;
    }
}
04:53:26.019 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
04:53:26.019 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #199
04:53:26.019 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.NumberUtils:188 which is executed by 3 tests
-1898474807
04:53:26.139 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #200
04:53:26.139 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.NumberUtils:189 which is executed by 3 tests
-1898474807
04:53:26.270 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #201
04:53:26.270 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.NumberUtils:190 which is executed by 3 tests
-1898474807
04:53:26.399 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
04:53:26.611 [pool-95-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
NumberUtils.java:154: error: missing return statement
    }
    ^
04:53:26.627 [pool-95-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public final class NumberUtils {
    public NumberUtils() {
        super();
    }

    public static int stringToInt(java.lang.String str) {
        return org.apache.commons.lang.NumberUtils.stringToInt(str, 0);
    }

    public static int stringToInt(java.lang.String str, int defaultValue) {
        try {
            return java.lang.Integer.parseInt(str);
        } catch (java.lang.NumberFormatException nfe) {
            return defaultValue;
        }
    }

    public static java.lang.Number createNumber(java.lang.String val) throws java.lang.NumberFormatException {
        if (val == null) {
            return null;
        }
        if (val.length() == 0) {
            throw new java.lang.NumberFormatException("\"\" is not a valid number.");
        }
        if (val.startsWith("--")) {
            return null;
        }
        if (val.startsWith("0x") || val.startsWith("-0x")) {
            return org.apache.commons.lang.NumberUtils.createInteger(val);
        }
        char lastChar = val.charAt(val.length() - 1);
        java.lang.String mant;
        java.lang.String dec;
        java.lang.String exp;
        int decPos = val.indexOf('.');
        int expPos = (val.indexOf('e') + val.indexOf('E')) + 1;
        if (decPos > (-1)) {
            if (expPos > (-1)) {
                if (expPos < decPos) {
                    throw new java.lang.NumberFormatException(val + " is not a valid number.");
                }
                dec = val.substring(decPos + 1, expPos);
            } else {
                dec = val.substring(decPos + 1);
            }
            mant = val.substring(0, decPos);
        } else {
            if (expPos > (-1)) {
                mant = val.substring(0, expPos);
            } else {
                mant = val;
            }
            dec = null;
        }
        if (!java.lang.Character.isDigit(lastChar)) {
            if ((expPos > (-1)) && (expPos < (val.length() - 1))) {
                exp = val.substring(expPos + 1, val.length() - 1);
            } else {
                exp = null;
            }
            java.lang.String numeric = val.substring(0, val.length() - 1);
            boolean allZeros = org.apache.commons.lang.NumberUtils.isAllZeros(mant) && org.apache.commons.lang.NumberUtils.isAllZeros(exp);
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(18).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectInput("decPos",decPos);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectInput("allZeros",allZeros);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectInput("val",val);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectInput("numeric",numeric);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectInput("expPos",expPos);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectInput("lastChar",lastChar);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectionEnds();
            }
            if (runtimeAngelicValue)
                switch (lastChar) {
                    case 'l' :
                    case 'L' :
                        if (((dec == null) && (exp == null)) && (((numeric.charAt(0) == '-') && org.apache.commons.lang.NumberUtils.isDigits(numeric.substring(1))) || org.apache.commons.lang.NumberUtils.isDigits(numeric))) {
                            try {
                                return org.apache.commons.lang.NumberUtils.createLong(numeric);
                            } catch (java.lang.NumberFormatException nfe) {
                            }
                            return org.apache.commons.lang.NumberUtils.createBigInteger(numeric);
                        }
                        throw new java.lang.NumberFormatException(val + " is not a valid number.");
                    case 'f' :
                    case 'F' :
                        try {
                            java.lang.Float f = org.apache.commons.lang.NumberUtils.createFloat(numeric);
                            if (!(f.isInfinite() || ((f.floatValue() == 0.0F) && (!allZeros)))) {
                                return f;
                            }
                        } catch (java.lang.NumberFormatException e) {
                        }
                    case 'd' :
                    case 'D' :
                        try {
                            java.lang.Double d = org.apache.commons.lang.NumberUtils.createDouble(numeric);
                            if (!(d.isInfinite() || ((d.floatValue() == 0.0) && (!allZeros)))) {
                                return d;
                            }
                        } catch (java.lang.NumberFormatException nfe) {
                        }
                        try {
                            return org.apache.commons.lang.NumberUtils.createBigDecimal(numeric);
                        } catch (java.lang.NumberFormatException e) {
                        }
                    default :
                        throw new java.lang.NumberFormatException(val + " is not a valid number.");
                }

        } else {
            if ((expPos > (-1)) && (expPos < (val.length() - 1))) {
                exp = val.substring(expPos + 1, val.length());
            } else {
                exp = null;
            }
            if ((dec == null) && (exp == null)) {
                try {
                    return org.apache.commons.lang.NumberUtils.createInteger(val);
                } catch (java.lang.NumberFormatException nfe) {
                }
                try {
                    return org.apache.commons.lang.NumberUtils.createLong(val);
                } catch (java.lang.NumberFormatException nfe) {
                }
                return org.apache.commons.lang.NumberUtils.createBigInteger(val);
            } else {
                boolean allZeros = org.apache.commons.lang.NumberUtils.isAllZeros(mant) && org.apache.commons.lang.NumberUtils.isAllZeros(exp);
                try {
                    java.lang.Float f = org.apache.commons.lang.NumberUtils.createFloat(val);
                    if (!(f.isInfinite() || ((f.floatValue() == 0.0F) && (!allZeros)))) {
                        return f;
                    }
                } catch (java.lang.NumberFormatException nfe) {
                }
                try {
                    java.lang.Double d = org.apache.commons.lang.NumberUtils.createDouble(val);
                    if (!(d.isInfinite() || ((d.doubleValue() == 0.0) && (!allZeros)))) {
                        return d;
                    }
                } catch (java.lang.NumberFormatException nfe) {
                }
                return org.apache.commons.lang.NumberUtils.createBigDecimal(val);
            }
        }
    }

    private static boolean isAllZeros(java.lang.String s) {
        if (s == null) {
            return true;
        }
        for (int i = s.length() - 1; i >= 0; i--) {
            if (s.charAt(i) != '0') {
                return false;
            }
        }
        return s.length() > 0;
    }

    public static java.lang.Float createFloat(java.lang.String val) {
        return java.lang.Float.valueOf(val);
    }

    public static java.lang.Double createDouble(java.lang.String val) {
        return java.lang.Double.valueOf(val);
    }

    public static java.lang.Integer createInteger(java.lang.String val) {
        return java.lang.Integer.decode(val);
    }

    public static java.lang.Long createLong(java.lang.String val) {
        return java.lang.Long.valueOf(val);
    }

    public static java.math.BigInteger createBigInteger(java.lang.String val) {
        java.math.BigInteger bi = new java.math.BigInteger(val);
        return bi;
    }

    public static java.math.BigDecimal createBigDecimal(java.lang.String val) {
        java.math.BigDecimal bd = new java.math.BigDecimal(val);
        return bd;
    }

    public static long minimum(long a, long b, long c) {
        if (b < a) {
            a = b;
        }
        if (c < a) {
            a = c;
        }
        return a;
    }

    public static int minimum(int a, int b, int c) {
        if (b < a) {
            a = b;
        }
        if (c < a) {
            a = c;
        }
        return a;
    }

    public static long maximum(long a, long b, long c) {
        if (b > a) {
            a = b;
        }
        if (c > a) {
            a = c;
        }
        return a;
    }

    public static int maximum(int a, int b, int c) {
        if (b > a) {
            a = b;
        }
        if (c > a) {
            a = c;
        }
        return a;
    }

    public static int compare(double lhs, double rhs) {
        if (lhs < rhs) {
            return -1;
        }
        if (lhs > rhs) {
            return +1;
        }
        long lhsBits = java.lang.Double.doubleToLongBits(lhs);
        long rhsBits = java.lang.Double.doubleToLongBits(rhs);
        if (lhsBits == rhsBits) {
            return 0;
        }
        if (lhsBits < rhsBits) {
            return -1;
        } else {
            return +1;
        }
    }

    public static int compare(float lhs, float rhs) {
        if (lhs < rhs) {
            return -1;
        }
        if (lhs > rhs) {
            return +1;
        }
        int lhsBits = java.lang.Float.floatToIntBits(lhs);
        int rhsBits = java.lang.Float.floatToIntBits(rhs);
        if (lhsBits == rhsBits) {
            return 0;
        }
        if (lhsBits < rhsBits) {
            return -1;
        } else {
            return +1;
        }
    }

    public static boolean isDigits(java.lang.String str) {
        if ((str == null) || (str.length() == 0)) {
            return false;
        }
        for (int i = 0; i < str.length(); i++) {
            if (!java.lang.Character.isDigit(str.charAt(i))) {
                return false;
            }
        }
        return true;
    }

    public static boolean isNumber(java.lang.String str) {
        if (org.apache.commons.lang.StringUtils.isEmpty(str)) {
            return false;
        }
        char[] chars = str.toCharArray();
        int sz = chars.length;
        boolean hasExp = false;
        boolean hasDecPoint = false;
        boolean allowSigns = false;
        boolean foundDigit = false;
        int start = (chars[0] == '-') ? 1 : 0;
        if (sz > (start + 1)) {
            if ((chars[start] == '0') && (chars[start + 1] == 'x')) {
                int i = start + 2;
                if (i == sz) {
                    return false;
                }
                for (; i < chars.length; i++) {
                    if ((((chars[i] < '0') || (chars[i] > '9')) && ((chars[i] < 'a') || (chars[i] > 'f'))) && ((chars[i] < 'A') || (chars[i] > 'F'))) {
                        return false;
                    }
                }
                return true;
            }
        }
        sz--;
        int i = start;
        while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
            if ((chars[i] >= '0') && (chars[i] <= '9')) {
                foundDigit = true;
                allowSigns = false;
            } else
                if (chars[i] == '.') {
                    if (hasDecPoint || hasExp) {
                        return false;
                    }
                    hasDecPoint = true;
                } else
                    if ((chars[i] == 'e') || (chars[i] == 'E')) {
                        if (hasExp) {
                            return false;
                        }
                        if (!foundDigit) {
                            return false;
                        }
                        hasExp = true;
                        allowSigns = true;
                    } else
                        if ((chars[i] == '+') || (chars[i] == '-')) {
                            if (!allowSigns) {
                                return false;
                            }
                            allowSigns = false;
                            foundDigit = false;
                        } else {
                            return false;
                        }



            i++;
        } 
        if (i < chars.length) {
            if ((chars[i] >= '0') && (chars[i] <= '9')) {
                return true;
            }
            if ((chars[i] == 'e') || (chars[i] == 'E')) {
                return false;
            }
            if ((!allowSigns) && ((((chars[i] == 'd') || (chars[i] == 'D')) || (chars[i] == 'f')) || (chars[i] == 'F'))) {
                return foundDigit;
            }
            if ((chars[i] == 'l') || (chars[i] == 'L')) {
                return foundDigit && (!hasExp);
            }
            return false;
        }
        return (!allowSigns) && foundDigit;
    }
}
04:53:26.632 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
04:53:26.632 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #202
04:53:26.632 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.NumberUtils:193 which is executed by 3 tests
-1898474807
04:53:26.758 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
04:53:27.183 [pool-97-thread-1] DEBUG f.i.l.c.s.ConstraintBasedSynthesis - Operators:
04:53:27.202 [pool-97-thread-1] DEBUG f.i.l.c.s.ConstraintBasedSynthesis - Operators:
== of arity: 2
!= of arity: 2
< of arity: 2
<= of arity: 2
04:53:27.274 [pool-97-thread-1] DEBUG f.i.l.c.s.ConstraintBasedSynthesis - Successful code synthesis: (1) != (val.length())
number of passing is 0
number of failing is 0
04:53:27.275 [pool-97-thread-1] INFO  f.i.l.repair.nopol.patch.TestPatch - Applying patch: org.apache.commons.lang.NumberUtils:193: PRECONDITION (1) != (val.length())
04:53:27.479 [pool-97-thread-1] INFO  f.i.l.repair.nopol.patch.TestPatch - Running test suite to check the patch "(1) != (val.length())" is working
04:53:27.501 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - ----INFORMATION----
04:53:27.627 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb classes : 85
04:53:27.627 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb methods : 1887
04:53:27.627 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb Statements Analyzed : 20
04:53:27.627 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb Statements with Angelic Value Found : 5
04:53:27.627 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb inputs in SMT : 5
04:53:27.627 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb SMT level: 2
04:53:27.627 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb SMT components: [4] [== of arity: 2, != of arity: 2, < of arity: 2, <= of arity: 2]
04:53:27.627 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol -                   class java.lang.Boolean: 4
04:53:27.628 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb variables in SMT : 22
04:53:27.628 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - NoPol Execution time : 109304ms
04:53:27.628 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - 
04:53:27.628 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - ----STOP_BY_PATCH_FOUND----
04:53:27.628 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Number of right compilations is  1
04:53:27.628 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Number of failing compilations is  0
04:53:27.628 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - (1) != (val.length())
04:53:27.634 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb test that executes the patch: 3
04:53:27.634 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - org.apache.commons.lang.NumberUtils:193: PRECONDITION
04:53:27.673 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - --- a/src/java/org/apache/commons/lang/NumberUtils.java
+++ b/src/java/org/apache/commons/lang/NumberUtils.java
@@ -192,12 +192,14 @@
                 case 'L' :
-                    if (dec == null
+                    if ((1) != (val.length())) {
+                        if (dec == null
                         && exp == null
                         && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
-                        try {
-                            return createLong(numeric);
-                        } catch (NumberFormatException nfe) {
-                            //Too big for a long
+                            try {
+                                return createLong(numeric);
+                            } catch (NumberFormatException nfe) {
+                                //Too big for a long
+                            }
+                            return createBigInteger(numeric);
+                            
                         }
-                        return createBigInteger(numeric);
-
                     }

PATCH
103.55user 1.01system 1:50.66elapsed 94%CPU (0avgtext+0avgdata 545300maxresident)k
3872inputs+7080outputs (3major+164298minor)pagefaults 0swaps


Node: ubuntu



Date: Tue Aug 13 04:53:28 EDT 2019

