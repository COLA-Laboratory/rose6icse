{
  "repair_end": "2019-06-08 12:18:35.962085", 
  "repair_begin": "2019-06-08 12:01:09.747221", 
  "patches": [
    {
      "diff": "--- /home/kaka/Desktop/RepairThemAll/myexeperiment/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2019-06-08 00:00:33.969961114 -0400\n+++ /home/kaka/Desktop/RepairThemAll/myexeperiment/GenProg_Defects4J_Lang_7/patches_d5vz/Patch_622/patched/home/kaka/Desktop/RepairThemAll/myexeperiment/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2019-06-08 00:17:40.530638242 -0400\n@@ -450,7 +450,7 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n+            double delta1, delta2 = Double.MAX_VALUE;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -472,13 +472,14 @@\n         if (decPos > -1) {\n \n             if (expPos > -1) {\n-                if (expPos < decPos || expPos > str.length()) {\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-                }\n-                dec = str.substring(decPos + 1, expPos);\n-            } else {\n-                dec = str.substring(decPos + 1);\n-            }\n+\t\t\t\tif (expPos < decPos || expPos > str.length()) {\n+\t\t\t\t\tthrow new NumberFormatException(str\n+\t\t\t\t\t\t\t+ \" is not a valid number.\");\n+\t\t\t\t}\n+\t\t\t\tdec = str.substring(decPos + 1, expPos);\n+\t\t\t} else {\n+\t\t\t\tdec = str.substring(decPos + 1);\n+\t\t\t}\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Replace", 
          "seed": "double delta1, delta2=Double.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "Replace", 
          "seed": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /home/kaka/Desktop/RepairThemAll/myexeperiment/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2019-06-08 00:00:33.969961114 -0400\n+++ /home/kaka/Desktop/RepairThemAll/myexeperiment/GenProg_Defects4J_Lang_7/patches_d5vz/Patch_656/patched/home/kaka/Desktop/RepairThemAll/myexeperiment/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2019-06-08 00:18:32.480486060 -0400\n@@ -450,7 +450,7 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n+            double delta1, delta2 = Double.MAX_VALUE;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -479,7 +479,29 @@\n             } else {\n                 dec = str.substring(decPos + 1);\n             }\n-            mant = str.substring(0, decPos);\n+            if (decPos > -1) {\n+\t\t\t\tif (expPos > -1) {\n+\t\t\t\t\tif (expPos < decPos || expPos > str.length()) {\n+\t\t\t\t\t\tthrow new NumberFormatException(str\n+\t\t\t\t\t\t\t\t+ \" is not a valid number.\");\n+\t\t\t\t\t}\n+\t\t\t\t\tdec = str.substring(decPos + 1, expPos);\n+\t\t\t\t} else {\n+\t\t\t\t\tdec = str.substring(decPos + 1);\n+\t\t\t\t}\n+\t\t\t\tmant = str.substring(0, decPos);\n+\t\t\t} else {\n+\t\t\t\tif (expPos > -1) {\n+\t\t\t\t\tif (expPos > str.length()) {\n+\t\t\t\t\t\tthrow new NumberFormatException(str\n+\t\t\t\t\t\t\t\t+ \" is not a valid number.\");\n+\t\t\t\t\t}\n+\t\t\t\t\tmant = str.substring(0, expPos);\n+\t\t\t\t} else {\n+\t\t\t\t\tmant = str;\n+\t\t\t\t}\n+\t\t\t\tdec = null;\n+\t\t\t}\n         } else {\n             if (expPos > -1) {\n                 if (expPos > str.length()) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Replace", 
          "seed": "double delta1, delta2=Double.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 482, 
          "faulty": "mant=str.substring(0,decPos);", 
          "type": "Replace", 
          "seed": "if (decPos > -1) {\n  if (expPos > -1) {\n    if (expPos < decPos || expPos > str.length()) {\n      throw new NumberFormatException(str + \" is not a valid number.\");\n    }\n    dec=str.substring(decPos + 1,expPos);\n  }\n else {\n    dec=str.substring(decPos + 1);\n  }\n  mant=str.substring(0,decPos);\n}\n else {\n  if (expPos > -1) {\n    if (expPos > str.length()) {\n      throw new NumberFormatException(str + \" is not a valid number.\");\n    }\n    mant=str.substring(0,expPos);\n  }\n else {\n    mant=str;\n  }\n  dec=null;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /home/kaka/Desktop/RepairThemAll/myexeperiment/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2019-06-08 00:00:33.969961114 -0400\n+++ /home/kaka/Desktop/RepairThemAll/myexeperiment/GenProg_Defects4J_Lang_7/patches_d5vz/Patch_281/patched/home/kaka/Desktop/RepairThemAll/myexeperiment/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2019-06-08 00:10:18.642323363 -0400\n@@ -450,11 +450,12 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n+            double delta1, delta2 = Double.MAX_VALUE;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n-            if (str.startsWith(\"-\")) { // drop -\n+            int denom2 = 0;\n+\t\t\tif (str.startsWith(\"-\")) { // drop -\n                 hexDigits--;\n             }\n             if (hexDigits > 8) { // too many for an int\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 457, 
          "faulty": "if (str.startsWith(\"-\")) {\n  hexDigits--;\n}", 
          "type": "InsertBefore", 
          "seed": "int denom2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Replace", 
          "seed": "double delta1, delta2=Double.MAX_VALUE;"
        }
      ]
    }, 
    {
      "diff": "\n\n--- /home/kaka/Desktop/RepairThemAll/myexeperiment/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2019-06-08 00:00:33.969961114 -0400\n+++ /home/kaka/Desktop/RepairThemAll/myexeperiment/GenProg_Defects4J_Lang_7/patches_d5vz/Patch_553/patched/home/kaka/Desktop/RepairThemAll/myexeperiment/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2019-06-08 00:16:12.603230548 -0400\n@@ -450,7 +450,7 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n+            double delta1, delta2 = Double.MAX_VALUE;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Replace", 
          "seed": "double delta1, delta2=Double.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java", 
          "line": 212, 
          "faulty": "return listeners.toArray(prototypeArray);", 
          "type": "Replace", 
          "seed": "return listeners.toArray(prototypeArray);"
        }
      ]
    }, 
    {
      "diff": "--- /home/kaka/Desktop/RepairThemAll/myexeperiment/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java\t2019-06-08 00:00:30.313932639 -0400\n+++ /home/kaka/Desktop/RepairThemAll/myexeperiment/GenProg_Defects4J_Lang_7/patches_d5vz/Patch_344/patched/home/kaka/Desktop/RepairThemAll/myexeperiment/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java\t2019-06-08 00:11:35.258876539 -0400\n@@ -225,7 +225,8 @@\n         for (L listener : listeners) {\n             try {\n                 testObjectOutputStream.writeObject(listener);\n-                serializableListeners.add(listener);\n+                Validate.notNull(listener, \"Listener object cannot be null.\");\n+\t\t\t\tserializableListeners.add(listener);\n             } catch (IOException exception) {\n                 //recreate test stream in case of indeterminate state\n                 testObjectOutputStream = new ObjectOutputStream(new ByteArrayOutputStream());\n\n\n--- /home/kaka/Desktop/RepairThemAll/myexeperiment/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2019-06-08 00:00:33.969961114 -0400\n+++ /home/kaka/Desktop/RepairThemAll/myexeperiment/GenProg_Defects4J_Lang_7/patches_d5vz/Patch_344/patched/home/kaka/Desktop/RepairThemAll/myexeperiment/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2019-06-08 00:11:35.266876598 -0400\n@@ -450,11 +450,12 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n+            double delta1, delta2 = Double.MAX_VALUE;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n-            if (str.startsWith(\"-\")) { // drop -\n+            int denom2 = 0;\n+\t\t\tif (str.startsWith(\"-\")) { // drop -\n                 hexDigits--;\n             }\n             if (hexDigits > 8) { // too many for an int\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 457, 
          "faulty": "if (str.startsWith(\"-\")) {\n  hexDigits--;\n}", 
          "type": "InsertBefore", 
          "seed": "int denom2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java", 
          "line": 228, 
          "faulty": "serializableListeners.add(listener);", 
          "type": "InsertBefore", 
          "seed": "Validate.notNull(listener,\"Listener object cannot be null.\");"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Replace", 
          "seed": "double delta1, delta2=Double.MAX_VALUE;"
        }
      ]
    }, 
    {
      "diff": "--- /home/kaka/Desktop/RepairThemAll/myexeperiment/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2019-06-08 00:00:33.969961114 -0400\n+++ /home/kaka/Desktop/RepairThemAll/myexeperiment/GenProg_Defects4J_Lang_7/patches_d5vz/Patch_540/patched/home/kaka/Desktop/RepairThemAll/myexeperiment/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2019-06-08 00:15:56.002543435 -0400\n@@ -450,7 +450,7 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n+            double delta1, delta2 = Double.MAX_VALUE;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -483,7 +483,8 @@\n         } else {\n             if (expPos > -1) {\n                 if (expPos > str.length()) {\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+                    exp = null;\n+\t\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n                 }\n                 mant = str.substring(0, expPos);\n             } else {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Replace", 
          "seed": "double delta1, delta2=Double.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Replace", 
          "seed": "double delta1, delta2=Double.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 486, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "InsertBefore", 
          "seed": "exp=null;"
        }
      ]
    }, 
    {
      "diff": "--- /home/kaka/Desktop/RepairThemAll/myexeperiment/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java\t2019-06-08 00:00:30.313932639 -0400\n+++ /home/kaka/Desktop/RepairThemAll/myexeperiment/GenProg_Defects4J_Lang_7/patches_d5vz/Patch_582/patched/home/kaka/Desktop/RepairThemAll/myexeperiment/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java\t2019-06-08 00:16:48.264658037 -0400\n@@ -227,7 +227,8 @@\n                 testObjectOutputStream.writeObject(listener);\n                 serializableListeners.add(listener);\n             } catch (IOException exception) {\n-                //recreate test stream in case of indeterminate state\n+                Validate.notNull(listener, \"Listener object cannot be null.\");\n+\t\t\t\t//recreate test stream in case of indeterminate state\n                 testObjectOutputStream = new ObjectOutputStream(new ByteArrayOutputStream());\n             }\n         }\n\n\n--- /home/kaka/Desktop/RepairThemAll/myexeperiment/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2019-06-08 00:00:33.969961114 -0400\n+++ /home/kaka/Desktop/RepairThemAll/myexeperiment/GenProg_Defects4J_Lang_7/patches_d5vz/Patch_582/patched/home/kaka/Desktop/RepairThemAll/myexeperiment/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2019-06-08 00:16:48.268658193 -0400\n@@ -450,12 +450,13 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n+            double delta1, delta2 = Double.MAX_VALUE;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n             if (str.startsWith(\"-\")) { // drop -\n-                hexDigits--;\n+                double delta1, delta2 = Double.MAX_VALUE;\n+\t\t\t\thexDigits--;\n             }\n             if (hexDigits > 8) { // too many for an int\n                 return createLong(str);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Replace", 
          "seed": "double delta1, delta2=Double.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Replace", 
          "seed": "double delta1, delta2=Double.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Replace", 
          "seed": "double delta1, delta2=Double.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 458, 
          "faulty": "hexDigits--;", 
          "type": "InsertBefore", 
          "seed": "double delta1, delta2=Double.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java", 
          "line": 231, 
          "faulty": "testObjectOutputStream=new ObjectOutputStream(new ByteArrayOutputStream());", 
          "type": "InsertBefore", 
          "seed": "Validate.notNull(listener,\"Listener object cannot be null.\");"
        }
      ]
    }, 
    {
      "diff": "--- /home/kaka/Desktop/RepairThemAll/myexeperiment/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2019-06-08 00:00:33.969961114 -0400\n+++ /home/kaka/Desktop/RepairThemAll/myexeperiment/GenProg_Defects4J_Lang_7/patches_d5vz/Patch_438/patched/home/kaka/Desktop/RepairThemAll/myexeperiment/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2019-06-08 00:13:49.228762823 -0400\n@@ -450,12 +450,13 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n+            double delta1, delta2 = Double.MAX_VALUE;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n             if (str.startsWith(\"-\")) { // drop -\n-                hexDigits--;\n+                double delta1, delta2 = Double.MAX_VALUE;\n+\t\t\t\thexDigits--;\n             }\n             if (hexDigits > 8) { // too many for an int\n                 return createLong(str);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Replace", 
          "seed": "double delta1, delta2=Double.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 458, 
          "faulty": "hexDigits--;", 
          "type": "InsertBefore", 
          "seed": "double delta1, delta2=Double.MAX_VALUE;"
        }
      ]
    }, 
    {
      "diff": "--- /home/kaka/Desktop/RepairThemAll/myexeperiment/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2019-06-08 00:00:33.969961114 -0400\n+++ /home/kaka/Desktop/RepairThemAll/myexeperiment/GenProg_Defects4J_Lang_7/patches_d5vz/Patch_205/patched/home/kaka/Desktop/RepairThemAll/myexeperiment/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2019-06-08 00:08:49.841678501 -0400\n@@ -450,7 +450,7 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n+            double delta1, delta2 = Double.MAX_VALUE;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Replace", 
          "seed": "double delta1, delta2=Double.MAX_VALUE;"
        }
      ]
    }, 
    {
      "diff": "\n\n--- /home/kaka/Desktop/RepairThemAll/myexeperiment/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2019-06-08 00:00:33.969961114 -0400\n+++ /home/kaka/Desktop/RepairThemAll/myexeperiment/GenProg_Defects4J_Lang_7/patches_d5vz/Patch_470/patched/home/kaka/Desktop/RepairThemAll/myexeperiment/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2019-06-08 00:14:27.610619476 -0400\n@@ -450,11 +450,12 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n+            double delta1, delta2 = Double.MAX_VALUE;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n-            if (str.startsWith(\"-\")) { // drop -\n+            int denom2 = 0;\n+\t\t\tif (str.startsWith(\"-\")) { // drop -\n                 hexDigits--;\n             }\n             if (hexDigits > 8) { // too many for an int\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 457, 
          "faulty": "if (str.startsWith(\"-\")) {\n  hexDigits--;\n}", 
          "type": "InsertBefore", 
          "seed": "int denom2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Replace", 
          "seed": "double delta1, delta2=Double.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java", 
          "line": 212, 
          "faulty": "return listeners.toArray(prototypeArray);", 
          "type": "Replace", 
          "seed": "return listeners.toArray(prototypeArray);"
        }
      ]
    }, 
    {
      "diff": "--- /home/kaka/Desktop/RepairThemAll/myexeperiment/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java\t2019-06-08 00:00:30.313932639 -0400\n+++ /home/kaka/Desktop/RepairThemAll/myexeperiment/GenProg_Defects4J_Lang_7/patches_d5vz/Patch_451/patched/home/kaka/Desktop/RepairThemAll/myexeperiment/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java\t2019-06-08 00:14:04.693522852 -0400\n@@ -225,7 +225,9 @@\n         for (L listener : listeners) {\n             try {\n                 testObjectOutputStream.writeObject(listener);\n-                serializableListeners.add(listener);\n+                Validate.notNull(listener, \"Listener object cannot be null.\");\n+\t\t\t\tValidate.notNull(listener, \"Listener object cannot be null.\");\n+\t\t\t\tserializableListeners.add(listener);\n             } catch (IOException exception) {\n                 //recreate test stream in case of indeterminate state\n                 testObjectOutputStream = new ObjectOutputStream(new ByteArrayOutputStream());\n\n\n--- /home/kaka/Desktop/RepairThemAll/myexeperiment/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2019-06-08 00:00:33.969961114 -0400\n+++ /home/kaka/Desktop/RepairThemAll/myexeperiment/GenProg_Defects4J_Lang_7/patches_d5vz/Patch_451/patched/home/kaka/Desktop/RepairThemAll/myexeperiment/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2019-06-08 00:14:04.701523241 -0400\n@@ -450,7 +450,7 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n+            double delta1, delta2 = Double.MAX_VALUE;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java", 
          "line": 228, 
          "faulty": "serializableListeners.add(listener);", 
          "type": "InsertBefore", 
          "seed": "Validate.notNull(listener,\"Listener object cannot be null.\");"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java", 
          "line": 228, 
          "faulty": "serializableListeners.add(listener);", 
          "type": "InsertBefore", 
          "seed": "Validate.notNull(listener,\"Listener object cannot be null.\");"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Replace", 
          "seed": "double delta1, delta2=Double.MAX_VALUE;"
        }
      ]
    }, 
    {
      "diff": "--- /home/kaka/Desktop/RepairThemAll/myexeperiment/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2019-06-08 00:00:33.969961114 -0400\n+++ /home/kaka/Desktop/RepairThemAll/myexeperiment/GenProg_Defects4J_Lang_7/patches_d5vz/Patch_563/patched/home/kaka/Desktop/RepairThemAll/myexeperiment/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2019-06-08 00:16:24.579717211 -0400\n@@ -450,7 +450,7 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n+            double delta1, delta2 = Double.MAX_VALUE;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -560,7 +560,8 @@\n             if (dec == null && exp == null) {\n                 //Must be an int,long,bigint\n                 try {\n-                    return createInteger(str);\n+                    int numer1 = 1;\n+\t\t\t\t\treturn createInteger(str);\n                 } catch (NumberFormatException nfe) { // NOPMD\n                     // ignore the bad number\n                 }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Replace", 
          "seed": "double delta1, delta2=Double.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 563, 
          "faulty": "return createInteger(str);", 
          "type": "InsertBefore", 
          "seed": "int numer1=1;"
        }
      ]
    }, 
    {
      "diff": "--- /home/kaka/Desktop/RepairThemAll/myexeperiment/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2019-06-08 00:00:33.969961114 -0400\n+++ /home/kaka/Desktop/RepairThemAll/myexeperiment/GenProg_Defects4J_Lang_7/patches_d5vz/Patch_253/patched/home/kaka/Desktop/RepairThemAll/myexeperiment/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2019-06-08 00:09:46.698091880 -0400\n@@ -450,12 +450,12 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n+            double delta1, delta2 = Double.MAX_VALUE;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n             if (str.startsWith(\"-\")) { // drop -\n-                hexDigits--;\n+                \n             }\n             if (hexDigits > 8) { // too many for an int\n                 return createLong(str);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Replace", 
          "seed": "double delta1, delta2=Double.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 458, 
          "faulty": "hexDigits--;", 
          "type": "Delete", 
          "seed": "int denom2=0;"
        }
      ]
    }
  ]
}