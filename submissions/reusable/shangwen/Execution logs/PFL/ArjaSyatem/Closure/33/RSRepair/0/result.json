{
  "repair_end": "2019-08-10 21:07:11.301446", 
  "repair_begin": "2019-08-10 20:46:51.413355", 
  "patches": [
    {
      "diff": "--- /tmp/RSRepair_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2019-08-10 08:45:30.497187791 -0400\n+++ /tmp/RSRepair_Defects4J_Closure_33/patches_g6t3/Patch_1/patched/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2019-08-10 09:07:11.248300021 -0400\n@@ -555,27 +555,6 @@\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n \n-    // Handle the case where the constraint object is a record type.\n-    //\n-    // param constraintObj {{prop: (number|undefined)}}\n-    // function f(constraintObj) {}\n-    // f({});\n-    //\n-    // We want to modify the object literal to match the constraint, by\n-    // taking any each property on the record and trying to match\n-    // properties on this object.\n-    if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n-    }\n+    \n   }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 567, 
          "faulty": "if (constraintObj.isRecordType()) {\n  for (  String prop : constraintObj.getOwnPropertyNames()) {\n    JSType propType=constraintObj.getPropertyType(prop);\n    if (!isPropertyTypeDeclared(prop)) {\n      JSType typeToInfer=propType;\n      if (!hasProperty(prop)) {\n        typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n      }\n      defineInferredProperty(prop,typeToInfer,null);\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }
      ]
    }
  ]
}